"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fullcalendar";
exports.ids = ["vendor-chunks/@fullcalendar"];
exports.modules = {

/***/ "(ssr)/./node_modules/@fullcalendar/core/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@fullcalendar/core/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Calendar: () => (/* binding */ Calendar),\n/* harmony export */   JsonRequestError: () => (/* reexport safe */ _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.ag),\n/* harmony export */   createPlugin: () => (/* binding */ createPlugin),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   formatRange: () => (/* binding */ formatRange),\n/* harmony export */   globalLocales: () => (/* binding */ globalLocales),\n/* harmony export */   globalPlugins: () => (/* binding */ globalPlugins),\n/* harmony export */   sliceEvents: () => (/* binding */ sliceEvents),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var _internal_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal-common.js */ \"(ssr)/./node_modules/@fullcalendar/core/internal-common.js\");\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact */ \"(ssr)/./node_modules/preact/dist/preact.mjs\");\n/* harmony import */ var preact_compat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! preact/compat */ \"(ssr)/./node_modules/preact/compat/dist/compat.mjs\");\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\nvar globalLocales = [];\nvar MINIMAL_RAW_EN_LOCALE = {\n  code: 'en',\n  week: {\n    dow: 0,\n    doy: 4 // 4 days need to be within the year to be considered the first week\n  },\n\n  direction: 'ltr',\n  buttonText: {\n    prev: 'prev',\n    next: 'next',\n    prevYear: 'prev year',\n    nextYear: 'next year',\n    year: 'year',\n    today: 'today',\n    month: 'month',\n    week: 'week',\n    day: 'day',\n    list: 'list'\n  },\n  weekText: 'W',\n  weekTextLong: 'Week',\n  closeHint: 'Close',\n  timeHint: 'Time',\n  eventHint: 'Event',\n  allDayText: 'all-day',\n  moreLinkText: 'more',\n  noEventsText: 'No events to display'\n};\nvar RAW_EN_LOCALE = Object.assign(Object.assign({}, MINIMAL_RAW_EN_LOCALE), {\n  // Includes things we don't want other locales to inherit,\n  // things that derive from other translatable strings.\n  buttonHints: {\n    prev: 'Previous $0',\n    next: 'Next $0',\n    today: function today(buttonText, unit) {\n      return unit === 'day' ? 'Today' : \"This \".concat(buttonText);\n    }\n  },\n  viewHint: '$0 view',\n  navLinkHint: 'Go to $0',\n  moreLinkHint: function moreLinkHint(eventCnt) {\n    return \"Show \".concat(eventCnt, \" more event\").concat(eventCnt === 1 ? '' : 's');\n  }\n});\nfunction organizeRawLocales(explicitRawLocales) {\n  var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';\n  var allRawLocales = globalLocales.concat(explicitRawLocales);\n  var rawLocaleMap = {\n    en: RAW_EN_LOCALE\n  };\n  var _iterator = _createForOfIteratorHelper(allRawLocales),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var rawLocale = _step.value;\n      rawLocaleMap[rawLocale.code] = rawLocale;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    map: rawLocaleMap,\n    defaultCode: defaultCode\n  };\n}\nfunction buildLocale(inputSingular, available) {\n  if (_typeof(inputSingular) === 'object' && !Array.isArray(inputSingular)) {\n    return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);\n  }\n  return queryLocale(inputSingular, available);\n}\nfunction queryLocale(codeArg, available) {\n  var codes = [].concat(codeArg || []); // will convert to array\n  var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;\n  return parseLocale(codeArg, codes, raw);\n}\nfunction queryRawLocale(codes, available) {\n  for (var i = 0; i < codes.length; i += 1) {\n    var parts = codes[i].toLocaleLowerCase().split('-');\n    for (var j = parts.length; j > 0; j -= 1) {\n      var simpleId = parts.slice(0, j).join('-');\n      if (available[simpleId]) {\n        return available[simpleId];\n      }\n    }\n  }\n  return null;\n}\nfunction parseLocale(codeArg, codes, raw) {\n  var merged = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.m)([MINIMAL_RAW_EN_LOCALE, raw], ['buttonText']);\n  delete merged.code; // don't want this part of the options\n  var week = merged.week;\n  delete merged.week;\n  return {\n    codeArg: codeArg,\n    codes: codes,\n    week: week,\n    simpleNumberFormat: new Intl.NumberFormat(codeArg),\n    options: merged\n  };\n}\n\n// TODO: easier way to add new hooks? need to update a million things\nfunction createPlugin(input) {\n  return {\n    id: (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.g)(),\n    name: input.name,\n    premiumReleaseDate: input.premiumReleaseDate ? new Date(input.premiumReleaseDate) : undefined,\n    deps: input.deps || [],\n    reducers: input.reducers || [],\n    isLoadingFuncs: input.isLoadingFuncs || [],\n    contextInit: [].concat(input.contextInit || []),\n    eventRefiners: input.eventRefiners || {},\n    eventDefMemberAdders: input.eventDefMemberAdders || [],\n    eventSourceRefiners: input.eventSourceRefiners || {},\n    isDraggableTransformers: input.isDraggableTransformers || [],\n    eventDragMutationMassagers: input.eventDragMutationMassagers || [],\n    eventDefMutationAppliers: input.eventDefMutationAppliers || [],\n    dateSelectionTransformers: input.dateSelectionTransformers || [],\n    datePointTransforms: input.datePointTransforms || [],\n    dateSpanTransforms: input.dateSpanTransforms || [],\n    views: input.views || {},\n    viewPropsTransformers: input.viewPropsTransformers || [],\n    isPropsValid: input.isPropsValid || null,\n    externalDefTransforms: input.externalDefTransforms || [],\n    viewContainerAppends: input.viewContainerAppends || [],\n    eventDropTransformers: input.eventDropTransformers || [],\n    componentInteractions: input.componentInteractions || [],\n    calendarInteractions: input.calendarInteractions || [],\n    themeClasses: input.themeClasses || {},\n    eventSourceDefs: input.eventSourceDefs || [],\n    cmdFormatter: input.cmdFormatter,\n    recurringTypes: input.recurringTypes || [],\n    namedTimeZonedImpl: input.namedTimeZonedImpl,\n    initialView: input.initialView || '',\n    elementDraggingImpl: input.elementDraggingImpl,\n    optionChangeHandlers: input.optionChangeHandlers || {},\n    scrollGridImpl: input.scrollGridImpl || null,\n    listenerRefiners: input.listenerRefiners || {},\n    optionRefiners: input.optionRefiners || {},\n    propSetHandlers: input.propSetHandlers || {}\n  };\n}\nfunction buildPluginHooks(pluginDefs, globalDefs) {\n  var currentPluginIds = {};\n  var hooks = {\n    premiumReleaseDate: undefined,\n    reducers: [],\n    isLoadingFuncs: [],\n    contextInit: [],\n    eventRefiners: {},\n    eventDefMemberAdders: [],\n    eventSourceRefiners: {},\n    isDraggableTransformers: [],\n    eventDragMutationMassagers: [],\n    eventDefMutationAppliers: [],\n    dateSelectionTransformers: [],\n    datePointTransforms: [],\n    dateSpanTransforms: [],\n    views: {},\n    viewPropsTransformers: [],\n    isPropsValid: null,\n    externalDefTransforms: [],\n    viewContainerAppends: [],\n    eventDropTransformers: [],\n    componentInteractions: [],\n    calendarInteractions: [],\n    themeClasses: {},\n    eventSourceDefs: [],\n    cmdFormatter: null,\n    recurringTypes: [],\n    namedTimeZonedImpl: null,\n    initialView: '',\n    elementDraggingImpl: null,\n    optionChangeHandlers: {},\n    scrollGridImpl: null,\n    listenerRefiners: {},\n    optionRefiners: {},\n    propSetHandlers: {}\n  };\n  function addDefs(defs) {\n    var _iterator2 = _createForOfIteratorHelper(defs),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var def = _step2.value;\n        var pluginName = def.name;\n        var currentId = currentPluginIds[pluginName];\n        if (currentId === undefined) {\n          currentPluginIds[pluginName] = def.id;\n          addDefs(def.deps);\n          hooks = combineHooks(hooks, def);\n        } else if (currentId !== def.id) {\n          // different ID than the one already added\n          console.warn(\"Duplicate plugin '\".concat(pluginName, \"'\"));\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  if (pluginDefs) {\n    addDefs(pluginDefs);\n  }\n  addDefs(globalDefs);\n  return hooks;\n}\nfunction buildBuildPluginHooks() {\n  var currentOverrideDefs = [];\n  var currentGlobalDefs = [];\n  var currentHooks;\n  return function (overrideDefs, globalDefs) {\n    if (!currentHooks || !(0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.i)(overrideDefs, currentOverrideDefs) || !(0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.i)(globalDefs, currentGlobalDefs)) {\n      currentHooks = buildPluginHooks(overrideDefs, globalDefs);\n    }\n    currentOverrideDefs = overrideDefs;\n    currentGlobalDefs = globalDefs;\n    return currentHooks;\n  };\n}\nfunction combineHooks(hooks0, hooks1) {\n  return {\n    premiumReleaseDate: compareOptionalDates(hooks0.premiumReleaseDate, hooks1.premiumReleaseDate),\n    reducers: hooks0.reducers.concat(hooks1.reducers),\n    isLoadingFuncs: hooks0.isLoadingFuncs.concat(hooks1.isLoadingFuncs),\n    contextInit: hooks0.contextInit.concat(hooks1.contextInit),\n    eventRefiners: Object.assign(Object.assign({}, hooks0.eventRefiners), hooks1.eventRefiners),\n    eventDefMemberAdders: hooks0.eventDefMemberAdders.concat(hooks1.eventDefMemberAdders),\n    eventSourceRefiners: Object.assign(Object.assign({}, hooks0.eventSourceRefiners), hooks1.eventSourceRefiners),\n    isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),\n    eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),\n    eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),\n    dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),\n    datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),\n    dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),\n    views: Object.assign(Object.assign({}, hooks0.views), hooks1.views),\n    viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),\n    isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,\n    externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),\n    viewContainerAppends: hooks0.viewContainerAppends.concat(hooks1.viewContainerAppends),\n    eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),\n    calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),\n    componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),\n    themeClasses: Object.assign(Object.assign({}, hooks0.themeClasses), hooks1.themeClasses),\n    eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),\n    cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,\n    recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),\n    namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,\n    initialView: hooks0.initialView || hooks1.initialView,\n    elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,\n    optionChangeHandlers: Object.assign(Object.assign({}, hooks0.optionChangeHandlers), hooks1.optionChangeHandlers),\n    scrollGridImpl: hooks1.scrollGridImpl || hooks0.scrollGridImpl,\n    listenerRefiners: Object.assign(Object.assign({}, hooks0.listenerRefiners), hooks1.listenerRefiners),\n    optionRefiners: Object.assign(Object.assign({}, hooks0.optionRefiners), hooks1.optionRefiners),\n    propSetHandlers: Object.assign(Object.assign({}, hooks0.propSetHandlers), hooks1.propSetHandlers)\n  };\n}\nfunction compareOptionalDates(date0, date1) {\n  if (date0 === undefined) {\n    return date1;\n  }\n  if (date1 === undefined) {\n    return date0;\n  }\n  return new Date(Math.max(date0.valueOf(), date1.valueOf()));\n}\nvar StandardTheme = /*#__PURE__*/function (_Theme) {\n  function StandardTheme() {\n    _classCallCheck(this, StandardTheme);\n    return _callSuper(this, StandardTheme, arguments);\n  }\n  _inherits(StandardTheme, _Theme);\n  return _createClass(StandardTheme);\n}(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.T);\nStandardTheme.prototype.classes = {\n  root: 'fc-theme-standard',\n  tableCellShaded: 'fc-cell-shaded',\n  buttonGroup: 'fc-button-group',\n  button: 'fc-button fc-button-primary',\n  buttonActive: 'fc-button-active'\n};\nStandardTheme.prototype.baseIconClass = 'fc-icon';\nStandardTheme.prototype.iconClasses = {\n  close: 'fc-icon-x',\n  prev: 'fc-icon-chevron-left',\n  next: 'fc-icon-chevron-right',\n  prevYear: 'fc-icon-chevrons-left',\n  nextYear: 'fc-icon-chevrons-right'\n};\nStandardTheme.prototype.rtlIconClasses = {\n  prev: 'fc-icon-chevron-right',\n  next: 'fc-icon-chevron-left',\n  prevYear: 'fc-icon-chevrons-right',\n  nextYear: 'fc-icon-chevrons-left'\n};\nStandardTheme.prototype.iconOverrideOption = 'buttonIcons'; // TODO: make TS-friendly\nStandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';\nStandardTheme.prototype.iconOverridePrefix = 'fc-icon-';\nfunction compileViewDefs(defaultConfigs, overrideConfigs) {\n  var hash = {};\n  var viewType;\n  for (viewType in defaultConfigs) {\n    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n  }\n  for (viewType in overrideConfigs) {\n    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n  }\n  return hash;\n}\nfunction ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n  if (hash[viewType]) {\n    return hash[viewType];\n  }\n  var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n  if (viewDef) {\n    hash[viewType] = viewDef;\n  }\n  return viewDef;\n}\nfunction buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n  var defaultConfig = defaultConfigs[viewType];\n  var overrideConfig = overrideConfigs[viewType];\n  var queryProp = function queryProp(name) {\n    return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;\n  };\n  var theComponent = queryProp('component');\n  var superType = queryProp('superType');\n  var superDef = null;\n  if (superType) {\n    if (superType === viewType) {\n      throw new Error('Can\\'t have a custom view type that references itself');\n    }\n    superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);\n  }\n  if (!theComponent && superDef) {\n    theComponent = superDef.component;\n  }\n  if (!theComponent) {\n    return null; // don't throw a warning, might be settings for a single-unit view\n  }\n\n  return {\n    type: viewType,\n    component: theComponent,\n    defaults: Object.assign(Object.assign({}, superDef ? superDef.defaults : {}), defaultConfig ? defaultConfig.rawOptions : {}),\n    overrides: Object.assign(Object.assign({}, superDef ? superDef.overrides : {}), overrideConfig ? overrideConfig.rawOptions : {})\n  };\n}\nfunction parseViewConfigs(inputs) {\n  return (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a)(inputs, parseViewConfig);\n}\nfunction parseViewConfig(input) {\n  var rawOptions = typeof input === 'function' ? {\n    component: input\n  } : input;\n  var component = rawOptions.component;\n  if (rawOptions.content) {\n    // TODO: remove content/classNames/didMount/etc from options?\n    component = createViewHookComponent(rawOptions);\n  } else if (component && !(component.prototype instanceof _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.B)) {\n    // WHY?: people were using `component` property for `content`\n    // TODO: converge on one setting name\n    component = createViewHookComponent(Object.assign(Object.assign({}, rawOptions), {\n      content: component\n    }));\n  }\n  return {\n    superType: rawOptions.type,\n    component: component,\n    rawOptions: rawOptions // includes type and component too :(\n  };\n}\n\nfunction createViewHookComponent(options) {\n  return function (viewProps) {\n    return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.V.Consumer, null, function (context) {\n      return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.C, {\n        elTag: \"div\",\n        elClasses: (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.b)(context.viewSpec),\n        renderProps: Object.assign(Object.assign({}, viewProps), {\n          nextDayThreshold: context.options.nextDayThreshold\n        }),\n        generatorName: undefined,\n        customGenerator: options.content,\n        classNameGenerator: options.classNames,\n        didMount: options.didMount,\n        willUnmount: options.willUnmount\n      });\n    });\n  };\n}\nfunction buildViewSpecs(defaultInputs, optionOverrides, dynamicOptionOverrides, localeDefaults) {\n  var defaultConfigs = parseViewConfigs(defaultInputs);\n  var overrideConfigs = parseViewConfigs(optionOverrides.views);\n  var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);\n  return (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a)(viewDefs, function (viewDef) {\n    return buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults);\n  });\n}\nfunction buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults) {\n  var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || dynamicOptionOverrides.duration || optionOverrides.duration;\n  var duration = null;\n  var durationUnit = '';\n  var singleUnit = '';\n  var singleUnitOverrides = {};\n  if (durationInput) {\n    duration = createDurationCached(durationInput);\n    if (duration) {\n      // valid?\n      var denom = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.c)(duration);\n      durationUnit = denom.unit;\n      if (denom.value === 1) {\n        singleUnit = durationUnit;\n        singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].rawOptions : {};\n      }\n    }\n  }\n  var queryButtonText = function queryButtonText(optionsSubset) {\n    var buttonTextMap = optionsSubset.buttonText || {};\n    var buttonTextKey = viewDef.defaults.buttonTextKey;\n    if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {\n      return buttonTextMap[buttonTextKey];\n    }\n    if (buttonTextMap[viewDef.type] != null) {\n      return buttonTextMap[viewDef.type];\n    }\n    if (buttonTextMap[singleUnit] != null) {\n      return buttonTextMap[singleUnit];\n    }\n    return null;\n  };\n  var queryButtonTitle = function queryButtonTitle(optionsSubset) {\n    var buttonHints = optionsSubset.buttonHints || {};\n    var buttonKey = viewDef.defaults.buttonTextKey; // use same key as text\n    if (buttonKey != null && buttonHints[buttonKey] != null) {\n      return buttonHints[buttonKey];\n    }\n    if (buttonHints[viewDef.type] != null) {\n      return buttonHints[viewDef.type];\n    }\n    if (buttonHints[singleUnit] != null) {\n      return buttonHints[singleUnit];\n    }\n    return null;\n  };\n  return {\n    type: viewDef.type,\n    component: viewDef.component,\n    duration: duration,\n    durationUnit: durationUnit,\n    singleUnit: singleUnit,\n    optionDefaults: viewDef.defaults,\n    optionOverrides: Object.assign(Object.assign({}, singleUnitOverrides), viewDef.overrides),\n    buttonTextOverride: queryButtonText(dynamicOptionOverrides) || queryButtonText(optionOverrides) ||\n    // constructor-specified buttonText lookup hash takes precedence\n    viewDef.overrides.buttonText,\n    buttonTextDefault: queryButtonText(localeDefaults) || viewDef.defaults.buttonText || queryButtonText(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.e) || viewDef.type,\n    // not DRY\n    buttonTitleOverride: queryButtonTitle(dynamicOptionOverrides) || queryButtonTitle(optionOverrides) || viewDef.overrides.buttonHint,\n    buttonTitleDefault: queryButtonTitle(localeDefaults) || viewDef.defaults.buttonHint || queryButtonTitle(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.e)\n    // will eventually fall back to buttonText\n  };\n}\n// hack to get memoization working\nvar durationInputMap = {};\nfunction createDurationCached(durationInput) {\n  var json = JSON.stringify(durationInput);\n  var res = durationInputMap[json];\n  if (res === undefined) {\n    res = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.d)(durationInput);\n    durationInputMap[json] = res;\n  }\n  return res;\n}\nfunction reduceViewType(viewType, action) {\n  switch (action.type) {\n    case 'CHANGE_VIEW_TYPE':\n      viewType = action.viewType;\n  }\n  return viewType;\n}\nfunction reduceDynamicOptionOverrides(dynamicOptionOverrides, action) {\n  switch (action.type) {\n    case 'SET_OPTION':\n      return Object.assign(Object.assign({}, dynamicOptionOverrides), _defineProperty({}, action.optionName, action.rawOptionValue));\n    default:\n      return dynamicOptionOverrides;\n  }\n}\nfunction reduceDateProfile(currentDateProfile, action, currentDate, dateProfileGenerator) {\n  var dp;\n  switch (action.type) {\n    case 'CHANGE_VIEW_TYPE':\n      return dateProfileGenerator.build(action.dateMarker || currentDate);\n    case 'CHANGE_DATE':\n      return dateProfileGenerator.build(action.dateMarker);\n    case 'PREV':\n      dp = dateProfileGenerator.buildPrev(currentDateProfile, currentDate);\n      if (dp.isValid) {\n        return dp;\n      }\n      break;\n    case 'NEXT':\n      dp = dateProfileGenerator.buildNext(currentDateProfile, currentDate);\n      if (dp.isValid) {\n        return dp;\n      }\n      break;\n  }\n  return currentDateProfile;\n}\nfunction initEventSources(calendarOptions, dateProfile, context) {\n  var activeRange = dateProfile ? dateProfile.activeRange : null;\n  return addSources({}, parseInitialSources(calendarOptions, context), activeRange, context);\n}\nfunction reduceEventSources(eventSources, action, dateProfile, context) {\n  var activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?\n  switch (action.type) {\n    case 'ADD_EVENT_SOURCES':\n      // already parsed\n      return addSources(eventSources, action.sources, activeRange, context);\n    case 'REMOVE_EVENT_SOURCE':\n      return removeSource(eventSources, action.sourceId);\n    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n    case 'NEXT':\n    case 'CHANGE_DATE':\n    case 'CHANGE_VIEW_TYPE':\n      if (dateProfile) {\n        return fetchDirtySources(eventSources, activeRange, context);\n      }\n      return eventSources;\n    case 'FETCH_EVENT_SOURCES':\n      return fetchSourcesByIds(eventSources, action.sourceIds ?\n      // why no type?\n      (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.f)(action.sourceIds) : excludeStaticSources(eventSources, context), activeRange, action.isRefetch || false, context);\n    case 'RECEIVE_EVENTS':\n    case 'RECEIVE_EVENT_ERROR':\n      return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);\n    case 'REMOVE_ALL_EVENT_SOURCES':\n      return {};\n    default:\n      return eventSources;\n  }\n}\nfunction reduceEventSourcesNewTimeZone(eventSources, dateProfile, context) {\n  var activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?\n  return fetchSourcesByIds(eventSources, excludeStaticSources(eventSources, context), activeRange, true, context);\n}\nfunction computeEventSourcesLoading(eventSources) {\n  for (var sourceId in eventSources) {\n    if (eventSources[sourceId].isFetching) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction addSources(eventSourceHash, sources, fetchRange, context) {\n  var hash = {};\n  var _iterator3 = _createForOfIteratorHelper(sources),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var source = _step3.value;\n      hash[source.sourceId] = source;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  if (fetchRange) {\n    hash = fetchDirtySources(hash, fetchRange, context);\n  }\n  return Object.assign(Object.assign({}, eventSourceHash), hash);\n}\nfunction removeSource(eventSourceHash, sourceId) {\n  return (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.h)(eventSourceHash, function (eventSource) {\n    return eventSource.sourceId !== sourceId;\n  });\n}\nfunction fetchDirtySources(sourceHash, fetchRange, context) {\n  return fetchSourcesByIds(sourceHash, (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.h)(sourceHash, function (eventSource) {\n    return isSourceDirty(eventSource, fetchRange, context);\n  }), fetchRange, false, context);\n}\nfunction isSourceDirty(eventSource, fetchRange, context) {\n  if (!doesSourceNeedRange(eventSource, context)) {\n    return !eventSource.latestFetchId;\n  }\n  return !context.options.lazyFetching || !eventSource.fetchRange || eventSource.isFetching ||\n  // always cancel outdated in-progress fetches\n  fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;\n}\nfunction fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, isRefetch, context) {\n  var nextSources = {};\n  for (var sourceId in prevSources) {\n    var source = prevSources[sourceId];\n    if (sourceIdHash[sourceId]) {\n      nextSources[sourceId] = fetchSource(source, fetchRange, isRefetch, context);\n    } else {\n      nextSources[sourceId] = source;\n    }\n  }\n  return nextSources;\n}\nfunction fetchSource(eventSource, fetchRange, isRefetch, context) {\n  var options = context.options,\n    calendarApi = context.calendarApi;\n  var sourceDef = context.pluginHooks.eventSourceDefs[eventSource.sourceDefId];\n  var fetchId = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.g)();\n  sourceDef.fetch({\n    eventSource: eventSource,\n    range: fetchRange,\n    isRefetch: isRefetch,\n    context: context\n  }, function (res) {\n    var rawEvents = res.rawEvents;\n    if (options.eventSourceSuccess) {\n      rawEvents = options.eventSourceSuccess.call(calendarApi, rawEvents, res.response) || rawEvents;\n    }\n    if (eventSource.success) {\n      rawEvents = eventSource.success.call(calendarApi, rawEvents, res.response) || rawEvents;\n    }\n    context.dispatch({\n      type: 'RECEIVE_EVENTS',\n      sourceId: eventSource.sourceId,\n      fetchId: fetchId,\n      fetchRange: fetchRange,\n      rawEvents: rawEvents\n    });\n  }, function (error) {\n    var errorHandled = false;\n    if (options.eventSourceFailure) {\n      options.eventSourceFailure.call(calendarApi, error);\n      errorHandled = true;\n    }\n    if (eventSource.failure) {\n      eventSource.failure(error);\n      errorHandled = true;\n    }\n    if (!errorHandled) {\n      console.warn(error.message, error);\n    }\n    context.dispatch({\n      type: 'RECEIVE_EVENT_ERROR',\n      sourceId: eventSource.sourceId,\n      fetchId: fetchId,\n      fetchRange: fetchRange,\n      error: error\n    });\n  });\n  return Object.assign(Object.assign({}, eventSource), {\n    isFetching: true,\n    latestFetchId: fetchId\n  });\n}\nfunction receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {\n  var eventSource = sourceHash[sourceId];\n  if (eventSource &&\n  // not already removed\n  fetchId === eventSource.latestFetchId) {\n    return Object.assign(Object.assign({}, sourceHash), _defineProperty({}, sourceId, Object.assign(Object.assign({}, eventSource), {\n      isFetching: false,\n      fetchRange: fetchRange\n    })));\n  }\n  return sourceHash;\n}\nfunction excludeStaticSources(eventSources, context) {\n  return (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.h)(eventSources, function (eventSource) {\n    return doesSourceNeedRange(eventSource, context);\n  });\n}\nfunction parseInitialSources(rawOptions, context) {\n  var refiners = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.j)(context);\n  var rawSources = [].concat(rawOptions.eventSources || []);\n  var sources = []; // parsed\n  if (rawOptions.initialEvents) {\n    rawSources.unshift(rawOptions.initialEvents);\n  }\n  if (rawOptions.events) {\n    rawSources.unshift(rawOptions.events);\n  }\n  var _iterator4 = _createForOfIteratorHelper(rawSources),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var rawSource = _step4.value;\n      var source = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.p)(rawSource, context, refiners);\n      if (source) {\n        sources.push(source);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return sources;\n}\nfunction doesSourceNeedRange(eventSource, context) {\n  var defs = context.pluginHooks.eventSourceDefs;\n  return !defs[eventSource.sourceDefId].ignoreRange;\n}\nfunction reduceDateSelection(currentSelection, action) {\n  switch (action.type) {\n    case 'UNSELECT_DATES':\n      return null;\n    case 'SELECT_DATES':\n      return action.selection;\n    default:\n      return currentSelection;\n  }\n}\nfunction reduceSelectedEvent(currentInstanceId, action) {\n  switch (action.type) {\n    case 'UNSELECT_EVENT':\n      return '';\n    case 'SELECT_EVENT':\n      return action.eventInstanceId;\n    default:\n      return currentInstanceId;\n  }\n}\nfunction reduceEventDrag(currentDrag, action) {\n  var newDrag;\n  switch (action.type) {\n    case 'UNSET_EVENT_DRAG':\n      return null;\n    case 'SET_EVENT_DRAG':\n      newDrag = action.state;\n      return {\n        affectedEvents: newDrag.affectedEvents,\n        mutatedEvents: newDrag.mutatedEvents,\n        isEvent: newDrag.isEvent\n      };\n    default:\n      return currentDrag;\n  }\n}\nfunction reduceEventResize(currentResize, action) {\n  var newResize;\n  switch (action.type) {\n    case 'UNSET_EVENT_RESIZE':\n      return null;\n    case 'SET_EVENT_RESIZE':\n      newResize = action.state;\n      return {\n        affectedEvents: newResize.affectedEvents,\n        mutatedEvents: newResize.mutatedEvents,\n        isEvent: newResize.isEvent\n      };\n    default:\n      return currentResize;\n  }\n}\nfunction parseToolbars(calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n  var header = calendarOptions.headerToolbar ? parseToolbar(calendarOptions.headerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;\n  var footer = calendarOptions.footerToolbar ? parseToolbar(calendarOptions.footerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;\n  return {\n    header: header,\n    footer: footer\n  };\n}\nfunction parseToolbar(sectionStrHash, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n  var sectionWidgets = {};\n  var viewsWithButtons = [];\n  var hasTitle = false;\n  for (var sectionName in sectionStrHash) {\n    var sectionStr = sectionStrHash[sectionName];\n    var sectionRes = parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi);\n    sectionWidgets[sectionName] = sectionRes.widgets;\n    viewsWithButtons.push.apply(viewsWithButtons, _toConsumableArray(sectionRes.viewsWithButtons));\n    hasTitle = hasTitle || sectionRes.hasTitle;\n  }\n  return {\n    sectionWidgets: sectionWidgets,\n    viewsWithButtons: viewsWithButtons,\n    hasTitle: hasTitle\n  };\n}\n/*\nBAD: querying icons and text here. should be done at render time\n*/\nfunction parseSection(sectionStr, calendarOptions,\n// defaults+overrides, then refined\ncalendarOptionOverrides,\n// overrides only!, unrefined :(\ntheme, viewSpecs, calendarApi) {\n  var isRtl = calendarOptions.direction === 'rtl';\n  var calendarCustomButtons = calendarOptions.customButtons || {};\n  var calendarButtonTextOverrides = calendarOptionOverrides.buttonText || {};\n  var calendarButtonText = calendarOptions.buttonText || {};\n  var calendarButtonHintOverrides = calendarOptionOverrides.buttonHints || {};\n  var calendarButtonHints = calendarOptions.buttonHints || {};\n  var sectionSubstrs = sectionStr ? sectionStr.split(' ') : [];\n  var viewsWithButtons = [];\n  var hasTitle = false;\n  var widgets = sectionSubstrs.map(function (buttonGroupStr) {\n    return buttonGroupStr.split(',').map(function (buttonName) {\n      if (buttonName === 'title') {\n        hasTitle = true;\n        return {\n          buttonName: buttonName\n        };\n      }\n      var customButtonProps;\n      var viewSpec;\n      var buttonClick;\n      var buttonIcon; // only one of these will be set\n      var buttonText; // \"\n      var buttonHint;\n      // ^ for the title=\"\" attribute, for accessibility\n      if (customButtonProps = calendarCustomButtons[buttonName]) {\n        buttonClick = function buttonClick(ev) {\n          if (customButtonProps.click) {\n            customButtonProps.click.call(ev.target, ev, ev.target); // TODO: use Calendar this context?\n          }\n        };\n\n        (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = customButtonProps.text);\n        buttonHint = customButtonProps.hint || customButtonProps.text;\n      } else if (viewSpec = viewSpecs[buttonName]) {\n        viewsWithButtons.push(buttonName);\n        buttonClick = function buttonClick() {\n          calendarApi.changeView(buttonName);\n        };\n        (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = viewSpec.buttonTextDefault);\n        var textFallback = viewSpec.buttonTextOverride || viewSpec.buttonTextDefault;\n        buttonHint = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.k)(viewSpec.buttonTitleOverride || viewSpec.buttonTitleDefault || calendarOptions.viewHint, [textFallback, buttonName],\n        // view-name = buttonName\n        textFallback);\n      } else if (calendarApi[buttonName]) {\n        // a calendarApi method\n        buttonClick = function buttonClick() {\n          calendarApi[buttonName]();\n        };\n        (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = calendarButtonText[buttonName]); // everything else is considered default\n        if (buttonName === 'prevYear' || buttonName === 'nextYear') {\n          var prevOrNext = buttonName === 'prevYear' ? 'prev' : 'next';\n          buttonHint = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.k)(calendarButtonHintOverrides[prevOrNext] || calendarButtonHints[prevOrNext], [calendarButtonText.year || 'year', 'year'], calendarButtonText[buttonName]);\n        } else {\n          buttonHint = function buttonHint(navUnit) {\n            return (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.k)(calendarButtonHintOverrides[buttonName] || calendarButtonHints[buttonName], [calendarButtonText[navUnit] || navUnit, navUnit], calendarButtonText[buttonName]);\n          };\n        }\n      }\n      return {\n        buttonName: buttonName,\n        buttonClick: buttonClick,\n        buttonIcon: buttonIcon,\n        buttonText: buttonText,\n        buttonHint: buttonHint\n      };\n    });\n  });\n  return {\n    widgets: widgets,\n    viewsWithButtons: viewsWithButtons,\n    hasTitle: hasTitle\n  };\n}\n\n// always represents the current view. otherwise, it'd need to change value every time date changes\nvar ViewImpl = /*#__PURE__*/function () {\n  function ViewImpl(type, getCurrentData, dateEnv) {\n    _classCallCheck(this, ViewImpl);\n    this.type = type;\n    this.getCurrentData = getCurrentData;\n    this.dateEnv = dateEnv;\n  }\n  return _createClass(ViewImpl, [{\n    key: \"calendar\",\n    get: function get() {\n      return this.getCurrentData().calendarApi;\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this.getCurrentData().viewTitle;\n    }\n  }, {\n    key: \"activeStart\",\n    get: function get() {\n      return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start);\n    }\n  }, {\n    key: \"activeEnd\",\n    get: function get() {\n      return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end);\n    }\n  }, {\n    key: \"currentStart\",\n    get: function get() {\n      return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start);\n    }\n  }, {\n    key: \"currentEnd\",\n    get: function get() {\n      return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end);\n    }\n  }, {\n    key: \"getOption\",\n    value: function getOption(name) {\n      return this.getCurrentData().options[name]; // are the view-specific options\n    }\n  }]);\n}();\n\nvar eventSourceDef$2 = {\n  ignoreRange: true,\n  parseMeta: function parseMeta(refined) {\n    if (Array.isArray(refined.events)) {\n      return refined.events;\n    }\n    return null;\n  },\n  fetch: function fetch(arg, successCallback) {\n    successCallback({\n      rawEvents: arg.eventSource.meta\n    });\n  }\n};\nvar arrayEventSourcePlugin = createPlugin({\n  name: 'array-event-source',\n  eventSourceDefs: [eventSourceDef$2]\n});\nvar eventSourceDef$1 = {\n  parseMeta: function parseMeta(refined) {\n    if (typeof refined.events === 'function') {\n      return refined.events;\n    }\n    return null;\n  },\n  fetch: function fetch(arg, successCallback, errorCallback) {\n    var dateEnv = arg.context.dateEnv;\n    var func = arg.eventSource.meta;\n    (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.u)(func.bind(null, (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.l)(arg.range, dateEnv)), function (rawEvents) {\n      return successCallback({\n        rawEvents: rawEvents\n      });\n    }, errorCallback);\n  }\n};\nvar funcEventSourcePlugin = createPlugin({\n  name: 'func-event-source',\n  eventSourceDefs: [eventSourceDef$1]\n});\nvar JSON_FEED_EVENT_SOURCE_REFINERS = {\n  method: String,\n  extraParams: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  startParam: String,\n  endParam: String,\n  timeZoneParam: String\n};\nvar eventSourceDef = {\n  parseMeta: function parseMeta(refined) {\n    if (refined.url && (refined.format === 'json' || !refined.format)) {\n      return {\n        url: refined.url,\n        format: 'json',\n        method: (refined.method || 'GET').toUpperCase(),\n        extraParams: refined.extraParams,\n        startParam: refined.startParam,\n        endParam: refined.endParam,\n        timeZoneParam: refined.timeZoneParam\n      };\n    }\n    return null;\n  },\n  fetch: function fetch(arg, successCallback, errorCallback) {\n    var meta = arg.eventSource.meta;\n    var requestParams = buildRequestParams(meta, arg.range, arg.context);\n    (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.r)(meta.method, meta.url, requestParams).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        rawEvents = _ref2[0],\n        response = _ref2[1];\n      successCallback({\n        rawEvents: rawEvents,\n        response: response\n      });\n    }, errorCallback);\n  }\n};\nvar jsonFeedEventSourcePlugin = createPlugin({\n  name: 'json-event-source',\n  eventSourceRefiners: JSON_FEED_EVENT_SOURCE_REFINERS,\n  eventSourceDefs: [eventSourceDef]\n});\nfunction buildRequestParams(meta, range, context) {\n  var dateEnv = context.dateEnv,\n    options = context.options;\n  var startParam;\n  var endParam;\n  var timeZoneParam;\n  var customRequestParams;\n  var params = {};\n  startParam = meta.startParam;\n  if (startParam == null) {\n    startParam = options.startParam;\n  }\n  endParam = meta.endParam;\n  if (endParam == null) {\n    endParam = options.endParam;\n  }\n  timeZoneParam = meta.timeZoneParam;\n  if (timeZoneParam == null) {\n    timeZoneParam = options.timeZoneParam;\n  }\n  // retrieve any outbound GET/POST data from the options\n  if (typeof meta.extraParams === 'function') {\n    // supplied as a function that returns a key/value object\n    customRequestParams = meta.extraParams();\n  } else {\n    // probably supplied as a straight key/value object\n    customRequestParams = meta.extraParams || {};\n  }\n  Object.assign(params, customRequestParams);\n  params[startParam] = dateEnv.formatIso(range.start);\n  params[endParam] = dateEnv.formatIso(range.end);\n  if (dateEnv.timeZone !== 'local') {\n    params[timeZoneParam] = dateEnv.timeZone;\n  }\n  return params;\n}\nvar SIMPLE_RECURRING_REFINERS = {\n  daysOfWeek: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  startTime: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.d,\n  endTime: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.d,\n  duration: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.d,\n  startRecur: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  endRecur: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.n\n};\nvar recurring = {\n  parse: function parse(refined, dateEnv) {\n    if (refined.daysOfWeek || refined.startTime || refined.endTime || refined.startRecur || refined.endRecur) {\n      var recurringData = {\n        daysOfWeek: refined.daysOfWeek || null,\n        startTime: refined.startTime || null,\n        endTime: refined.endTime || null,\n        startRecur: refined.startRecur ? dateEnv.createMarker(refined.startRecur) : null,\n        endRecur: refined.endRecur ? dateEnv.createMarker(refined.endRecur) : null\n      };\n      var duration;\n      if (refined.duration) {\n        duration = refined.duration;\n      }\n      if (!duration && refined.startTime && refined.endTime) {\n        duration = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.s)(refined.endTime, refined.startTime);\n      }\n      return {\n        allDayGuess: Boolean(!refined.startTime && !refined.endTime),\n        duration: duration,\n        typeData: recurringData // doesn't need endTime anymore but oh well\n      };\n    }\n\n    return null;\n  },\n  expand: function expand(typeData, framingRange, dateEnv) {\n    var clippedFramingRange = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.o)(framingRange, {\n      start: typeData.startRecur,\n      end: typeData.endRecur\n    });\n    if (clippedFramingRange) {\n      return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);\n    }\n    return [];\n  }\n};\nvar simpleRecurringEventsPlugin = createPlugin({\n  name: 'simple-recurring-event',\n  recurringTypes: [recurring],\n  eventRefiners: SIMPLE_RECURRING_REFINERS\n});\nfunction expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {\n  var dowHash = daysOfWeek ? (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.f)(daysOfWeek) : null;\n  var dayMarker = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.q)(framingRange.start);\n  var endMarker = framingRange.end;\n  var instanceStarts = [];\n  while (dayMarker < endMarker) {\n    var instanceStart = void 0;\n    // if everyday, or this particular day-of-week\n    if (!dowHash || dowHash[dayMarker.getUTCDay()]) {\n      if (startTime) {\n        instanceStart = dateEnv.add(dayMarker, startTime);\n      } else {\n        instanceStart = dayMarker;\n      }\n      instanceStarts.push(instanceStart);\n    }\n    dayMarker = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.t)(dayMarker, 1);\n  }\n  return instanceStarts;\n}\nvar changeHandlerPlugin = createPlugin({\n  name: 'change-handler',\n  optionChangeHandlers: {\n    events: function events(_events, context) {\n      handleEventSources([_events], context);\n    },\n    eventSources: handleEventSources\n  }\n});\n/*\nBUG: if `event` was supplied, all previously-given `eventSources` will be wiped out\n*/\nfunction handleEventSources(inputs, context) {\n  var unfoundSources = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.v)(context.getCurrentData().eventSources);\n  if (unfoundSources.length === 1 && inputs.length === 1 && Array.isArray(unfoundSources[0]._raw) && Array.isArray(inputs[0])) {\n    context.dispatch({\n      type: 'RESET_RAW_EVENTS',\n      sourceId: unfoundSources[0].sourceId,\n      rawEvents: inputs[0]\n    });\n    return;\n  }\n  var newInputs = [];\n  var _iterator5 = _createForOfIteratorHelper(inputs),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var input = _step5.value;\n      var inputFound = false;\n      for (var i = 0; i < unfoundSources.length; i += 1) {\n        if (unfoundSources[i]._raw === input) {\n          unfoundSources.splice(i, 1); // delete\n          inputFound = true;\n          break;\n        }\n      }\n      if (!inputFound) {\n        newInputs.push(input);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  var _iterator6 = _createForOfIteratorHelper(unfoundSources),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var unfoundSource = _step6.value;\n      context.dispatch({\n        type: 'REMOVE_EVENT_SOURCE',\n        sourceId: unfoundSource.sourceId\n      });\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  for (var _i = 0, _newInputs = newInputs; _i < _newInputs.length; _i++) {\n    var newInput = _newInputs[_i];\n    context.calendarApi.addEventSource(newInput);\n  }\n}\nfunction handleDateProfile(dateProfile, context) {\n  context.emitter.trigger('datesSet', Object.assign(Object.assign({}, (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.l)(dateProfile.activeRange, context.dateEnv)), {\n    view: context.viewApi\n  }));\n}\nfunction handleEventStore(eventStore, context) {\n  var emitter = context.emitter;\n  if (emitter.hasHandlers('eventsSet')) {\n    emitter.trigger('eventsSet', (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.w)(eventStore, context));\n  }\n}\n\n/*\nthis array is exposed on the root namespace so that UMD plugins can add to it.\nsee the rollup-bundles script.\n*/\nvar globalPlugins = [arrayEventSourcePlugin, funcEventSourcePlugin, jsonFeedEventSourcePlugin, simpleRecurringEventsPlugin, changeHandlerPlugin, createPlugin({\n  name: 'misc',\n  isLoadingFuncs: [function (state) {\n    return computeEventSourcesLoading(state.eventSources);\n  }],\n  propSetHandlers: {\n    dateProfile: handleDateProfile,\n    eventStore: handleEventStore\n  }\n})];\nvar TaskRunner = /*#__PURE__*/function () {\n  function TaskRunner(runTaskOption, drainedOption) {\n    _classCallCheck(this, TaskRunner);\n    this.runTaskOption = runTaskOption;\n    this.drainedOption = drainedOption;\n    this.queue = [];\n    this.delayedRunner = new _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.D(this.drain.bind(this));\n  }\n  return _createClass(TaskRunner, [{\n    key: \"request\",\n    value: function request(task, delay) {\n      this.queue.push(task);\n      this.delayedRunner.request(delay);\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(scope) {\n      this.delayedRunner.pause(scope);\n    }\n  }, {\n    key: \"resume\",\n    value: function resume(scope, force) {\n      this.delayedRunner.resume(scope, force);\n    }\n  }, {\n    key: \"drain\",\n    value: function drain() {\n      var queue = this.queue;\n      while (queue.length) {\n        var completedTasks = [];\n        var task = void 0;\n        while (task = queue.shift()) {\n          this.runTask(task);\n          completedTasks.push(task);\n        }\n        this.drained(completedTasks);\n      } // keep going, in case new tasks were added in the drained handler\n    }\n  }, {\n    key: \"runTask\",\n    value: function runTask(task) {\n      if (this.runTaskOption) {\n        this.runTaskOption(task);\n      }\n    }\n  }, {\n    key: \"drained\",\n    value: function drained(completedTasks) {\n      if (this.drainedOption) {\n        this.drainedOption(completedTasks);\n      }\n    }\n  }]);\n}(); // Computes what the title at the top of the calendarApi should be for this view\nfunction buildTitle(dateProfile, viewOptions, dateEnv) {\n  var range;\n  // for views that span a large unit of time, show the proper interval, ignoring stray days before and after\n  if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {\n    range = dateProfile.currentRange;\n  } else {\n    // for day units or smaller, use the actual day range\n    range = dateProfile.activeRange;\n  }\n  return dateEnv.formatRange(range.start, range.end, (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.x)(viewOptions.titleFormat || buildTitleFormat(dateProfile)), {\n    isEndExclusive: dateProfile.isRangeAllDay,\n    defaultSeparator: viewOptions.titleRangeSeparator\n  });\n}\n// Generates the format string that should be used to generate the title for the current date range.\n// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\nfunction buildTitleFormat(dateProfile) {\n  var currentRangeUnit = dateProfile.currentRangeUnit;\n  if (currentRangeUnit === 'year') {\n    return {\n      year: 'numeric'\n    };\n  }\n  if (currentRangeUnit === 'month') {\n    return {\n      year: 'numeric',\n      month: 'long'\n    }; // like \"September 2014\"\n  }\n\n  var days = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.y)(dateProfile.currentRange.start, dateProfile.currentRange.end);\n  if (days !== null && days > 1) {\n    // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    };\n  }\n  // one day. longer, like \"September 9 2014\"\n  return {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n}\n\n// in future refactor, do the redux-style function(state=initial) for initial-state\n// also, whatever is happening in constructor, have it happen in action queue too\nvar CalendarDataManager = /*#__PURE__*/function () {\n  function CalendarDataManager(props) {\n    var _this2 = this;\n    _classCallCheck(this, CalendarDataManager);\n    this.computeCurrentViewData = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(this._computeCurrentViewData);\n    this.organizeRawLocales = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(organizeRawLocales);\n    this.buildLocale = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildLocale);\n    this.buildPluginHooks = buildBuildPluginHooks();\n    this.buildDateEnv = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildDateEnv$1);\n    this.buildTheme = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildTheme);\n    this.parseToolbars = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(parseToolbars);\n    this.buildViewSpecs = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildViewSpecs);\n    this.buildDateProfileGenerator = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.A)(buildDateProfileGenerator);\n    this.buildViewApi = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildViewApi);\n    this.buildViewUiProps = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.A)(buildViewUiProps);\n    this.buildEventUiBySource = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildEventUiBySource, _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.E);\n    this.buildEventUiBases = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildEventUiBases);\n    this.parseContextBusinessHours = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.A)(parseContextBusinessHours);\n    this.buildTitle = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildTitle);\n    this.emitter = new _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.F();\n    this.actionRunner = new TaskRunner(this._handleAction.bind(this), this.updateData.bind(this));\n    this.currentCalendarOptionsInput = {};\n    this.currentCalendarOptionsRefined = {};\n    this.currentViewOptionsInput = {};\n    this.currentViewOptionsRefined = {};\n    this.currentCalendarOptionsRefiners = {};\n    this.optionsForRefining = [];\n    this.optionsForHandling = [];\n    this.getCurrentData = function () {\n      return _this2.data;\n    };\n    this.dispatch = function (action) {\n      _this2.actionRunner.request(action); // protects against recursive calls to _handleAction\n    };\n\n    this.props = props;\n    this.actionRunner.pause();\n    var dynamicOptionOverrides = {};\n    var optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);\n    var currentViewType = optionsData.calendarOptions.initialView || optionsData.pluginHooks.initialView;\n    var currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);\n    // wire things up\n    // TODO: not DRY\n    props.calendarApi.currentDataManager = this;\n    this.emitter.setThisContext(props.calendarApi);\n    this.emitter.setOptions(currentViewData.options);\n    var currentDate = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.G)(optionsData.calendarOptions, optionsData.dateEnv);\n    var dateProfile = currentViewData.dateProfileGenerator.build(currentDate);\n    if (!(0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.H)(dateProfile.activeRange, currentDate)) {\n      currentDate = dateProfile.currentRange.start;\n    }\n    var calendarContext = {\n      dateEnv: optionsData.dateEnv,\n      options: optionsData.calendarOptions,\n      pluginHooks: optionsData.pluginHooks,\n      calendarApi: props.calendarApi,\n      dispatch: this.dispatch,\n      emitter: this.emitter,\n      getCurrentData: this.getCurrentData\n    };\n    // needs to be after setThisContext\n    var _iterator7 = _createForOfIteratorHelper(optionsData.pluginHooks.contextInit),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var callback = _step7.value;\n        callback(calendarContext);\n      }\n      // NOT DRY\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n    var eventSources = initEventSources(optionsData.calendarOptions, dateProfile, calendarContext);\n    var initialState = {\n      dynamicOptionOverrides: dynamicOptionOverrides,\n      currentViewType: currentViewType,\n      currentDate: currentDate,\n      dateProfile: dateProfile,\n      businessHours: this.parseContextBusinessHours(calendarContext),\n      eventSources: eventSources,\n      eventUiBases: {},\n      eventStore: (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.I)(),\n      renderableEventStore: (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.I)(),\n      dateSelection: null,\n      eventSelection: '',\n      eventDrag: null,\n      eventResize: null,\n      selectionConfig: this.buildViewUiProps(calendarContext).selectionConfig\n    };\n    var contextAndState = Object.assign(Object.assign({}, calendarContext), initialState);\n    var _iterator8 = _createForOfIteratorHelper(optionsData.pluginHooks.reducers),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var reducer = _step8.value;\n        Object.assign(initialState, reducer(null, null, contextAndState));\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    if (computeIsLoading(initialState, calendarContext)) {\n      this.emitter.trigger('loading', true); // NOT DRY\n    }\n\n    this.state = initialState;\n    this.updateData();\n    this.actionRunner.resume();\n  }\n  return _createClass(CalendarDataManager, [{\n    key: \"resetOptions\",\n    value: function resetOptions(optionOverrides, changedOptionNames) {\n      var props = this.props;\n      if (changedOptionNames === undefined) {\n        props.optionOverrides = optionOverrides;\n      } else {\n        var _this$optionsForRefin;\n        props.optionOverrides = Object.assign(Object.assign({}, props.optionOverrides || {}), optionOverrides);\n        (_this$optionsForRefin = this.optionsForRefining).push.apply(_this$optionsForRefin, _toConsumableArray(changedOptionNames));\n      }\n      if (changedOptionNames === undefined || changedOptionNames.length) {\n        this.actionRunner.request({\n          type: 'NOTHING'\n        });\n      }\n    }\n  }, {\n    key: \"_handleAction\",\n    value: function _handleAction(action) {\n      var props = this.props,\n        state = this.state,\n        emitter = this.emitter;\n      var dynamicOptionOverrides = reduceDynamicOptionOverrides(state.dynamicOptionOverrides, action);\n      var optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);\n      var currentViewType = reduceViewType(state.currentViewType, action);\n      var currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);\n      // wire things up\n      // TODO: not DRY\n      props.calendarApi.currentDataManager = this;\n      emitter.setThisContext(props.calendarApi);\n      emitter.setOptions(currentViewData.options);\n      var calendarContext = {\n        dateEnv: optionsData.dateEnv,\n        options: optionsData.calendarOptions,\n        pluginHooks: optionsData.pluginHooks,\n        calendarApi: props.calendarApi,\n        dispatch: this.dispatch,\n        emitter: emitter,\n        getCurrentData: this.getCurrentData\n      };\n      var currentDate = state.currentDate,\n        dateProfile = state.dateProfile;\n      if (this.data && this.data.dateProfileGenerator !== currentViewData.dateProfileGenerator) {\n        // hack\n        dateProfile = currentViewData.dateProfileGenerator.build(currentDate);\n      }\n      currentDate = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.J)(currentDate, action);\n      dateProfile = reduceDateProfile(dateProfile, action, currentDate, currentViewData.dateProfileGenerator);\n      if (action.type === 'PREV' ||\n      // TODO: move this logic into DateProfileGenerator\n      action.type === 'NEXT' ||\n      // \"\n      !(0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.H)(dateProfile.currentRange, currentDate)) {\n        currentDate = dateProfile.currentRange.start;\n      }\n      var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendarContext);\n      var eventStore = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.K)(state.eventStore, action, eventSources, dateProfile, calendarContext);\n      var isEventsLoading = computeEventSourcesLoading(eventSources); // BAD. also called in this func in computeIsLoading\n      var renderableEventStore = isEventsLoading && !currentViewData.options.progressiveEventRendering ? state.renderableEventStore || eventStore :\n      // try from previous state\n      eventStore;\n      var _this$buildViewUiProp = this.buildViewUiProps(calendarContext),\n        eventUiSingleBase = _this$buildViewUiProp.eventUiSingleBase,\n        selectionConfig = _this$buildViewUiProp.selectionConfig; // will memoize obj\n      var eventUiBySource = this.buildEventUiBySource(eventSources);\n      var eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);\n      var newState = {\n        dynamicOptionOverrides: dynamicOptionOverrides,\n        currentViewType: currentViewType,\n        currentDate: currentDate,\n        dateProfile: dateProfile,\n        eventSources: eventSources,\n        eventStore: eventStore,\n        renderableEventStore: renderableEventStore,\n        selectionConfig: selectionConfig,\n        eventUiBases: eventUiBases,\n        businessHours: this.parseContextBusinessHours(calendarContext),\n        dateSelection: reduceDateSelection(state.dateSelection, action),\n        eventSelection: reduceSelectedEvent(state.eventSelection, action),\n        eventDrag: reduceEventDrag(state.eventDrag, action),\n        eventResize: reduceEventResize(state.eventResize, action)\n      };\n      var contextAndState = Object.assign(Object.assign({}, calendarContext), newState);\n      var _iterator9 = _createForOfIteratorHelper(optionsData.pluginHooks.reducers),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var reducer = _step9.value;\n          Object.assign(newState, reducer(state, action, contextAndState)); // give the OLD state, for old value\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      var wasLoading = computeIsLoading(state, calendarContext);\n      var isLoading = computeIsLoading(newState, calendarContext);\n      // TODO: use propSetHandlers in plugin system\n      if (!wasLoading && isLoading) {\n        emitter.trigger('loading', true);\n      } else if (wasLoading && !isLoading) {\n        emitter.trigger('loading', false);\n      }\n      this.state = newState;\n      if (props.onAction) {\n        props.onAction(action);\n      }\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      var props = this.props,\n        state = this.state;\n      var oldData = this.data;\n      var optionsData = this.computeOptionsData(props.optionOverrides, state.dynamicOptionOverrides, props.calendarApi);\n      var currentViewData = this.computeCurrentViewData(state.currentViewType, optionsData, props.optionOverrides, state.dynamicOptionOverrides);\n      var data = this.data = Object.assign(Object.assign(Object.assign({\n        viewTitle: this.buildTitle(state.dateProfile, currentViewData.options, optionsData.dateEnv),\n        calendarApi: props.calendarApi,\n        dispatch: this.dispatch,\n        emitter: this.emitter,\n        getCurrentData: this.getCurrentData\n      }, optionsData), currentViewData), state);\n      var changeHandlers = optionsData.pluginHooks.optionChangeHandlers;\n      var oldCalendarOptions = oldData && oldData.calendarOptions;\n      var newCalendarOptions = optionsData.calendarOptions;\n      if (oldCalendarOptions && oldCalendarOptions !== newCalendarOptions) {\n        if (oldCalendarOptions.timeZone !== newCalendarOptions.timeZone) {\n          // hack\n          state.eventSources = data.eventSources = reduceEventSourcesNewTimeZone(data.eventSources, state.dateProfile, data);\n          state.eventStore = data.eventStore = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.L)(data.eventStore, oldData.dateEnv, data.dateEnv);\n          state.renderableEventStore = data.renderableEventStore = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.L)(data.renderableEventStore, oldData.dateEnv, data.dateEnv);\n        }\n        for (var optionName in changeHandlers) {\n          if (this.optionsForHandling.indexOf(optionName) !== -1 || oldCalendarOptions[optionName] !== newCalendarOptions[optionName]) {\n            changeHandlers[optionName](newCalendarOptions[optionName], data);\n          }\n        }\n      }\n      this.optionsForHandling = [];\n      if (props.onData) {\n        props.onData(data);\n      }\n    }\n  }, {\n    key: \"computeOptionsData\",\n    value: function computeOptionsData(optionOverrides, dynamicOptionOverrides, calendarApi) {\n      // TODO: blacklist options that are handled by optionChangeHandlers\n      if (!this.optionsForRefining.length && optionOverrides === this.stableOptionOverrides && dynamicOptionOverrides === this.stableDynamicOptionOverrides) {\n        return this.stableCalendarOptionsData;\n      }\n      var _this$processRawCalen = this.processRawCalendarOptions(optionOverrides, dynamicOptionOverrides),\n        refinedOptions = _this$processRawCalen.refinedOptions,\n        pluginHooks = _this$processRawCalen.pluginHooks,\n        localeDefaults = _this$processRawCalen.localeDefaults,\n        availableLocaleData = _this$processRawCalen.availableLocaleData,\n        extra = _this$processRawCalen.extra;\n      warnUnknownOptions(extra);\n      var dateEnv = this.buildDateEnv(refinedOptions.timeZone, refinedOptions.locale, refinedOptions.weekNumberCalculation, refinedOptions.firstDay, refinedOptions.weekText, pluginHooks, availableLocaleData, refinedOptions.defaultRangeSeparator);\n      var viewSpecs = this.buildViewSpecs(pluginHooks.views, this.stableOptionOverrides, this.stableDynamicOptionOverrides, localeDefaults);\n      var theme = this.buildTheme(refinedOptions, pluginHooks);\n      var toolbarConfig = this.parseToolbars(refinedOptions, this.stableOptionOverrides, theme, viewSpecs, calendarApi);\n      return this.stableCalendarOptionsData = {\n        calendarOptions: refinedOptions,\n        pluginHooks: pluginHooks,\n        dateEnv: dateEnv,\n        viewSpecs: viewSpecs,\n        theme: theme,\n        toolbarConfig: toolbarConfig,\n        localeDefaults: localeDefaults,\n        availableRawLocales: availableLocaleData.map\n      };\n    }\n    // always called from behind a memoizer\n  }, {\n    key: \"processRawCalendarOptions\",\n    value: function processRawCalendarOptions(optionOverrides, dynamicOptionOverrides) {\n      var _this$optionsForHandl;\n      var _mergeRawOptions = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.M)([_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.e, optionOverrides, dynamicOptionOverrides]),\n        locales = _mergeRawOptions.locales,\n        locale = _mergeRawOptions.locale;\n      var availableLocaleData = this.organizeRawLocales(locales);\n      var availableRawLocales = availableLocaleData.map;\n      var localeDefaults = this.buildLocale(locale || availableLocaleData.defaultCode, availableRawLocales).options;\n      var pluginHooks = this.buildPluginHooks(optionOverrides.plugins || [], globalPlugins);\n      var refiners = this.currentCalendarOptionsRefiners = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.N), _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.O), _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.P), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);\n      var extra = {};\n      var raw = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.M)([_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.e, localeDefaults, optionOverrides, dynamicOptionOverrides]);\n      var refined = {};\n      var currentRaw = this.currentCalendarOptionsInput;\n      var currentRefined = this.currentCalendarOptionsRefined;\n      var anyChanges = false;\n      for (var optionName in raw) {\n        if (this.optionsForRefining.indexOf(optionName) === -1 && (raw[optionName] === currentRaw[optionName] || _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Q[optionName] && optionName in currentRaw && _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Q[optionName](currentRaw[optionName], raw[optionName]))) {\n          refined[optionName] = currentRefined[optionName];\n        } else if (refiners[optionName]) {\n          refined[optionName] = refiners[optionName](raw[optionName]);\n          anyChanges = true;\n        } else {\n          extra[optionName] = currentRaw[optionName];\n        }\n      }\n      if (anyChanges) {\n        this.currentCalendarOptionsInput = raw;\n        this.currentCalendarOptionsRefined = refined;\n        this.stableOptionOverrides = optionOverrides;\n        this.stableDynamicOptionOverrides = dynamicOptionOverrides;\n      }\n      (_this$optionsForHandl = this.optionsForHandling).push.apply(_this$optionsForHandl, _toConsumableArray(this.optionsForRefining));\n      this.optionsForRefining = [];\n      return {\n        rawOptions: this.currentCalendarOptionsInput,\n        refinedOptions: this.currentCalendarOptionsRefined,\n        pluginHooks: pluginHooks,\n        availableLocaleData: availableLocaleData,\n        localeDefaults: localeDefaults,\n        extra: extra\n      };\n    }\n  }, {\n    key: \"_computeCurrentViewData\",\n    value: function _computeCurrentViewData(viewType, optionsData, optionOverrides, dynamicOptionOverrides) {\n      var viewSpec = optionsData.viewSpecs[viewType];\n      if (!viewSpec) {\n        throw new Error(\"viewType \\\"\".concat(viewType, \"\\\" is not available. Please make sure you've loaded all neccessary plugins\"));\n      }\n      var _this$processRawViewO = this.processRawViewOptions(viewSpec, optionsData.pluginHooks, optionsData.localeDefaults, optionOverrides, dynamicOptionOverrides),\n        refinedOptions = _this$processRawViewO.refinedOptions,\n        extra = _this$processRawViewO.extra;\n      warnUnknownOptions(extra);\n      var dateProfileGenerator = this.buildDateProfileGenerator({\n        dateProfileGeneratorClass: viewSpec.optionDefaults.dateProfileGeneratorClass,\n        duration: viewSpec.duration,\n        durationUnit: viewSpec.durationUnit,\n        usesMinMaxTime: viewSpec.optionDefaults.usesMinMaxTime,\n        dateEnv: optionsData.dateEnv,\n        calendarApi: this.props.calendarApi,\n        slotMinTime: refinedOptions.slotMinTime,\n        slotMaxTime: refinedOptions.slotMaxTime,\n        showNonCurrentDates: refinedOptions.showNonCurrentDates,\n        dayCount: refinedOptions.dayCount,\n        dateAlignment: refinedOptions.dateAlignment,\n        dateIncrement: refinedOptions.dateIncrement,\n        hiddenDays: refinedOptions.hiddenDays,\n        weekends: refinedOptions.weekends,\n        nowInput: refinedOptions.now,\n        validRangeInput: refinedOptions.validRange,\n        visibleRangeInput: refinedOptions.visibleRange,\n        fixedWeekCount: refinedOptions.fixedWeekCount\n      });\n      var viewApi = this.buildViewApi(viewType, this.getCurrentData, optionsData.dateEnv);\n      return {\n        viewSpec: viewSpec,\n        options: refinedOptions,\n        dateProfileGenerator: dateProfileGenerator,\n        viewApi: viewApi\n      };\n    }\n  }, {\n    key: \"processRawViewOptions\",\n    value: function processRawViewOptions(viewSpec, pluginHooks, localeDefaults, optionOverrides, dynamicOptionOverrides) {\n      var raw = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.M)([_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.e, viewSpec.optionDefaults, localeDefaults, optionOverrides, viewSpec.optionOverrides, dynamicOptionOverrides]);\n      var refiners = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.N), _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.O), _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.P), _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.R), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);\n      var refined = {};\n      var currentRaw = this.currentViewOptionsInput;\n      var currentRefined = this.currentViewOptionsRefined;\n      var anyChanges = false;\n      var extra = {};\n      for (var optionName in raw) {\n        if (raw[optionName] === currentRaw[optionName] || _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Q[optionName] && _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Q[optionName](raw[optionName], currentRaw[optionName])) {\n          refined[optionName] = currentRefined[optionName];\n        } else {\n          if (raw[optionName] === this.currentCalendarOptionsInput[optionName] || _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Q[optionName] && _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Q[optionName](raw[optionName], this.currentCalendarOptionsInput[optionName])) {\n            if (optionName in this.currentCalendarOptionsRefined) {\n              // might be an \"extra\" prop\n              refined[optionName] = this.currentCalendarOptionsRefined[optionName];\n            }\n          } else if (refiners[optionName]) {\n            refined[optionName] = refiners[optionName](raw[optionName]);\n          } else {\n            extra[optionName] = raw[optionName];\n          }\n          anyChanges = true;\n        }\n      }\n      if (anyChanges) {\n        this.currentViewOptionsInput = raw;\n        this.currentViewOptionsRefined = refined;\n      }\n      return {\n        rawOptions: this.currentViewOptionsInput,\n        refinedOptions: this.currentViewOptionsRefined,\n        extra: extra\n      };\n    }\n  }]);\n}();\nfunction buildDateEnv$1(timeZone, explicitLocale, weekNumberCalculation, firstDay, weekText, pluginHooks, availableLocaleData, defaultSeparator) {\n  var locale = buildLocale(explicitLocale || availableLocaleData.defaultCode, availableLocaleData.map);\n  return new _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.S({\n    calendarSystem: 'gregory',\n    timeZone: timeZone,\n    namedTimeZoneImpl: pluginHooks.namedTimeZonedImpl,\n    locale: locale,\n    weekNumberCalculation: weekNumberCalculation,\n    firstDay: firstDay,\n    weekText: weekText,\n    cmdFormatter: pluginHooks.cmdFormatter,\n    defaultSeparator: defaultSeparator\n  });\n}\nfunction buildTheme(options, pluginHooks) {\n  var ThemeClass = pluginHooks.themeClasses[options.themeSystem] || StandardTheme;\n  return new ThemeClass(options);\n}\nfunction buildDateProfileGenerator(props) {\n  var DateProfileGeneratorClass = props.dateProfileGeneratorClass || _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.U;\n  return new DateProfileGeneratorClass(props);\n}\nfunction buildViewApi(type, getCurrentData, dateEnv) {\n  return new ViewImpl(type, getCurrentData, dateEnv);\n}\nfunction buildEventUiBySource(eventSources) {\n  return (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a)(eventSources, function (eventSource) {\n    return eventSource.ui;\n  });\n}\nfunction buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {\n  var eventUiBases = {\n    '': eventUiSingleBase\n  };\n  for (var defId in eventDefs) {\n    var def = eventDefs[defId];\n    if (def.sourceId && eventUiBySource[def.sourceId]) {\n      eventUiBases[defId] = eventUiBySource[def.sourceId];\n    }\n  }\n  return eventUiBases;\n}\nfunction buildViewUiProps(calendarContext) {\n  var options = calendarContext.options;\n  return {\n    eventUiSingleBase: (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.W)({\n      display: options.eventDisplay,\n      editable: options.editable,\n      startEditable: options.eventStartEditable,\n      durationEditable: options.eventDurationEditable,\n      constraint: options.eventConstraint,\n      overlap: typeof options.eventOverlap === 'boolean' ? options.eventOverlap : undefined,\n      allow: options.eventAllow,\n      backgroundColor: options.eventBackgroundColor,\n      borderColor: options.eventBorderColor,\n      textColor: options.eventTextColor,\n      color: options.eventColor\n      // classNames: options.eventClassNames // render hook will handle this\n    }, calendarContext),\n    selectionConfig: (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.W)({\n      constraint: options.selectConstraint,\n      overlap: typeof options.selectOverlap === 'boolean' ? options.selectOverlap : undefined,\n      allow: options.selectAllow\n    }, calendarContext)\n  };\n}\nfunction computeIsLoading(state, context) {\n  var _iterator10 = _createForOfIteratorHelper(context.pluginHooks.isLoadingFuncs),\n    _step10;\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var isLoadingFunc = _step10.value;\n      if (isLoadingFunc(state)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  return false;\n}\nfunction parseContextBusinessHours(calendarContext) {\n  return (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.X)(calendarContext.options.businessHours, calendarContext);\n}\nfunction warnUnknownOptions(options, viewName) {\n  for (var optionName in options) {\n    console.warn(\"Unknown option '\".concat(optionName, \"'\") + (viewName ? \" for view '\".concat(viewName, \"'\") : ''));\n  }\n}\nvar ToolbarSection = /*#__PURE__*/function (_BaseComponent) {\n  function ToolbarSection() {\n    _classCallCheck(this, ToolbarSection);\n    return _callSuper(this, ToolbarSection, arguments);\n  }\n  _inherits(ToolbarSection, _BaseComponent);\n  return _createClass(ToolbarSection, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var children = this.props.widgetGroups.map(function (widgetGroup) {\n        return _this3.renderWidgetGroup(widgetGroup);\n      });\n      return preact__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, ['div', {\n        className: 'fc-toolbar-chunk'\n      }].concat(_toConsumableArray(children)));\n    }\n  }, {\n    key: \"renderWidgetGroup\",\n    value: function renderWidgetGroup(widgetGroup) {\n      var props = this.props;\n      var theme = this.context.theme;\n      var children = [];\n      var isOnlyButtons = true;\n      var _iterator11 = _createForOfIteratorHelper(widgetGroup),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var widget = _step11.value;\n          var buttonName = widget.buttonName,\n            buttonClick = widget.buttonClick,\n            buttonText = widget.buttonText,\n            buttonIcon = widget.buttonIcon,\n            buttonHint = widget.buttonHint;\n          if (buttonName === 'title') {\n            isOnlyButtons = false;\n            children.push((0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"h2\", {\n              className: \"fc-toolbar-title\",\n              id: props.titleId\n            }, props.title));\n          } else {\n            var isPressed = buttonName === props.activeButton;\n            var isDisabled = !props.isTodayEnabled && buttonName === 'today' || !props.isPrevEnabled && buttonName === 'prev' || !props.isNextEnabled && buttonName === 'next';\n            var buttonClasses = [\"fc-\".concat(buttonName, \"-button\"), theme.getClass('button')];\n            if (isPressed) {\n              buttonClasses.push(theme.getClass('buttonActive'));\n            }\n            children.push((0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"button\", {\n              type: \"button\",\n              title: typeof buttonHint === 'function' ? buttonHint(props.navUnit) : buttonHint,\n              disabled: isDisabled,\n              \"aria-pressed\": isPressed,\n              className: buttonClasses.join(' '),\n              onClick: buttonClick\n            }, buttonText || (buttonIcon ? (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n              className: buttonIcon,\n              role: \"img\"\n            }) : '')));\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      if (children.length > 1) {\n        var groupClassName = isOnlyButtons && theme.getClass('buttonGroup') || '';\n        return preact__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, ['div', {\n          className: groupClassName\n        }].concat(children));\n      }\n      return children[0];\n    }\n  }]);\n}(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.B);\nvar Toolbar = /*#__PURE__*/function (_BaseComponent2) {\n  function Toolbar() {\n    _classCallCheck(this, Toolbar);\n    return _callSuper(this, Toolbar, arguments);\n  }\n  _inherits(Toolbar, _BaseComponent2);\n  return _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        model = _this$props.model,\n        extraClassName = _this$props.extraClassName;\n      var forceLtr = false;\n      var startContent;\n      var endContent;\n      var sectionWidgets = model.sectionWidgets;\n      var centerContent = sectionWidgets.center;\n      if (sectionWidgets.left) {\n        forceLtr = true;\n        startContent = sectionWidgets.left;\n      } else {\n        startContent = sectionWidgets.start;\n      }\n      if (sectionWidgets.right) {\n        forceLtr = true;\n        endContent = sectionWidgets.right;\n      } else {\n        endContent = sectionWidgets.end;\n      }\n      var classNames = [extraClassName || '', 'fc-toolbar', forceLtr ? 'fc-toolbar-ltr' : ''];\n      return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: classNames.join(' ')\n      }, this.renderSection('start', startContent || []), this.renderSection('center', centerContent || []), this.renderSection('end', endContent || []));\n    }\n  }, {\n    key: \"renderSection\",\n    value: function renderSection(key, widgetGroups) {\n      var props = this.props;\n      return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(ToolbarSection, {\n        key: key,\n        widgetGroups: widgetGroups,\n        title: props.title,\n        navUnit: props.navUnit,\n        activeButton: props.activeButton,\n        isTodayEnabled: props.isTodayEnabled,\n        isPrevEnabled: props.isPrevEnabled,\n        isNextEnabled: props.isNextEnabled,\n        titleId: props.titleId\n      });\n    }\n  }]);\n}(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.B);\nvar ViewHarness = /*#__PURE__*/function (_BaseComponent3) {\n  function ViewHarness() {\n    var _this4;\n    _classCallCheck(this, ViewHarness);\n    _this4 = _callSuper(this, ViewHarness, arguments);\n    _this4.state = {\n      availableWidth: null\n    };\n    _this4.handleEl = function (el) {\n      _this4.el = el;\n      (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Y)(_this4.props.elRef, el);\n      _this4.updateAvailableWidth();\n    };\n    _this4.handleResize = function () {\n      _this4.updateAvailableWidth();\n    };\n    return _this4;\n  }\n  _inherits(ViewHarness, _BaseComponent3);\n  return _createClass(ViewHarness, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        state = this.state;\n      var aspectRatio = props.aspectRatio;\n      var classNames = ['fc-view-harness', aspectRatio || props.liquid || props.height ? 'fc-view-harness-active' // harness controls the height\n      : 'fc-view-harness-passive' // let the view do the height\n      ];\n\n      var height = '';\n      var paddingBottom = '';\n      if (aspectRatio) {\n        if (state.availableWidth !== null) {\n          height = state.availableWidth / aspectRatio;\n        } else {\n          // while waiting to know availableWidth, we can't set height to *zero*\n          // because will cause lots of unnecessary scrollbars within scrollgrid.\n          // BETTER: don't start rendering ANYTHING yet until we know container width\n          // NOTE: why not always use paddingBottom? Causes height oscillation (issue 5606)\n          paddingBottom = \"\".concat(1 / aspectRatio * 100, \"%\");\n        }\n      } else {\n        height = props.height || '';\n      }\n      return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        \"aria-labelledby\": props.labeledById,\n        ref: this.handleEl,\n        className: classNames.join(' '),\n        style: {\n          height: height,\n          paddingBottom: paddingBottom\n        }\n      }, props.children);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.context.addResizeHandler(this.handleResize);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.removeResizeHandler(this.handleResize);\n    }\n  }, {\n    key: \"updateAvailableWidth\",\n    value: function updateAvailableWidth() {\n      if (this.el &&\n      // needed. but why?\n      this.props.aspectRatio // aspectRatio is the only height setting that needs availableWidth\n      ) {\n        this.setState({\n          availableWidth: this.el.offsetWidth\n        });\n      }\n    }\n  }]);\n}(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.B);\n/*\nDetects when the user clicks on an event within a DateComponent\n*/\nvar EventClicking = /*#__PURE__*/function (_Interaction) {\n  function EventClicking(settings) {\n    var _this5;\n    _classCallCheck(this, EventClicking);\n    _this5 = _callSuper(this, EventClicking, [settings]);\n    _this5.handleSegClick = function (ev, segEl) {\n      var _this6 = _this5,\n        component = _this6.component;\n      var context = component.context;\n      var seg = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__._)(segEl);\n      if (seg &&\n      // might be the <div> surrounding the more link\n      component.isValidSegDownEl(ev.target)) {\n        // our way to simulate a link click for elements that can't be <a> tags\n        // grab before trigger fired in case trigger trashes DOM thru rerendering\n        var hasUrlContainer = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.$)(ev.target, '.fc-event-forced-url');\n        var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';\n        context.emitter.trigger('eventClick', {\n          el: segEl,\n          event: new _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a0(component.context, seg.eventRange.def, seg.eventRange.instance),\n          jsEvent: ev,\n          view: context.viewApi\n        });\n        if (url && !ev.defaultPrevented) {\n          window.location.href = url;\n        }\n      }\n    };\n    _this5.destroy = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a1)(settings.el, 'click', '.fc-event',\n    // on both fg and bg events\n    _this5.handleSegClick);\n    return _this5;\n  }\n  _inherits(EventClicking, _Interaction);\n  return _createClass(EventClicking);\n}(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Z);\n/*\nTriggers events and adds/removes core classNames when the user's pointer\nenters/leaves event-elements of a component.\n*/\nvar EventHovering = /*#__PURE__*/function (_Interaction2) {\n  function EventHovering(settings) {\n    var _this7;\n    _classCallCheck(this, EventHovering);\n    _this7 = _callSuper(this, EventHovering, [settings]);\n    // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it\n    _this7.handleEventElRemove = function (el) {\n      if (el === _this7.currentSegEl) {\n        _this7.handleSegLeave(null, _this7.currentSegEl);\n      }\n    };\n    _this7.handleSegEnter = function (ev, segEl) {\n      if ((0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__._)(segEl)) {\n        // TODO: better way to make sure not hovering over more+ link or its wrapper\n        _this7.currentSegEl = segEl;\n        _this7.triggerEvent('eventMouseEnter', ev, segEl);\n      }\n    };\n    _this7.handleSegLeave = function (ev, segEl) {\n      if (_this7.currentSegEl) {\n        _this7.currentSegEl = null;\n        _this7.triggerEvent('eventMouseLeave', ev, segEl);\n      }\n    };\n    _this7.removeHoverListeners = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a2)(settings.el, '.fc-event',\n    // on both fg and bg events\n    _this7.handleSegEnter, _this7.handleSegLeave);\n    return _this7;\n  }\n  _inherits(EventHovering, _Interaction2);\n  return _createClass(EventHovering, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeHoverListeners();\n    }\n  }, {\n    key: \"triggerEvent\",\n    value: function triggerEvent(publicEvName, ev, segEl) {\n      var component = this.component;\n      var context = component.context;\n      var seg = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__._)(segEl);\n      if (!ev || component.isValidSegDownEl(ev.target)) {\n        context.emitter.trigger(publicEvName, {\n          el: segEl,\n          event: new _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a0(context, seg.eventRange.def, seg.eventRange.instance),\n          jsEvent: ev,\n          view: context.viewApi\n        });\n      }\n    }\n  }]);\n}(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.Z);\nvar CalendarContent = /*#__PURE__*/function (_PureComponent) {\n  function CalendarContent() {\n    var _this8;\n    _classCallCheck(this, CalendarContent);\n    _this8 = _callSuper(this, CalendarContent, arguments);\n    _this8.buildViewContext = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a4);\n    _this8.buildViewPropTransformers = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildViewPropTransformers);\n    _this8.buildToolbarProps = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildToolbarProps);\n    _this8.headerRef = (0,preact__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    _this8.footerRef = (0,preact__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    _this8.interactionsStore = {};\n    // eslint-disable-next-line\n    _this8.state = {\n      viewLabelId: (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a5)()\n    };\n    // Component Registration\n    // -----------------------------------------------------------------------------------------------------------------\n    _this8.registerInteractiveComponent = function (component, settingsInput) {\n      var settings = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a6)(component, settingsInput);\n      var DEFAULT_INTERACTIONS = [EventClicking, EventHovering];\n      var interactionClasses = DEFAULT_INTERACTIONS.concat(_this8.props.pluginHooks.componentInteractions);\n      var interactions = interactionClasses.map(function (TheInteractionClass) {\n        return new TheInteractionClass(settings);\n      });\n      _this8.interactionsStore[component.uid] = interactions;\n      _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a7[component.uid] = settings;\n    };\n    _this8.unregisterInteractiveComponent = function (component) {\n      var listeners = _this8.interactionsStore[component.uid];\n      if (listeners) {\n        var _iterator12 = _createForOfIteratorHelper(listeners),\n          _step12;\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var listener = _step12.value;\n            listener.destroy();\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n        delete _this8.interactionsStore[component.uid];\n      }\n      delete _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a7[component.uid];\n    };\n    // Resizing\n    // -----------------------------------------------------------------------------------------------------------------\n    _this8.resizeRunner = new _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.D(function () {\n      _this8.props.emitter.trigger('_resize', true); // should window resizes be considered \"forced\" ?\n      _this8.props.emitter.trigger('windowResize', {\n        view: _this8.props.viewApi\n      });\n    });\n    _this8.handleWindowResize = function (ev) {\n      var options = _this8.props.options;\n      if (options.handleWindowResize && ev.target === window // avoid jqui events\n      ) {\n        _this8.resizeRunner.request(options.windowResizeDelay);\n      }\n    };\n    return _this8;\n  }\n  /*\n  renders INSIDE of an outer div\n  */\n  _inherits(CalendarContent, _PureComponent);\n  return _createClass(CalendarContent, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var toolbarConfig = props.toolbarConfig,\n        options = props.options;\n      var toolbarProps = this.buildToolbarProps(props.viewSpec, props.dateProfile, props.dateProfileGenerator, props.currentDate, (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a8)(props.options.now, props.dateEnv),\n      // TODO: use NowTimer????\n      props.viewTitle);\n      var viewVGrow = false;\n      var viewHeight = '';\n      var viewAspectRatio;\n      if (props.isHeightAuto || props.forPrint) {\n        viewHeight = '';\n      } else if (options.height != null) {\n        viewVGrow = true;\n      } else if (options.contentHeight != null) {\n        viewHeight = options.contentHeight;\n      } else {\n        viewAspectRatio = Math.max(options.aspectRatio, 0.5); // prevent from getting too tall\n      }\n\n      var viewContext = this.buildViewContext(props.viewSpec, props.viewApi, props.options, props.dateProfileGenerator, props.dateEnv, props.theme, props.pluginHooks, props.dispatch, props.getCurrentData, props.emitter, props.calendarApi, this.registerInteractiveComponent, this.unregisterInteractiveComponent);\n      var viewLabelId = toolbarConfig.header && toolbarConfig.header.hasTitle ? this.state.viewLabelId : undefined;\n      return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.V.Provider, {\n        value: viewContext\n      }, toolbarConfig.header && (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(Toolbar, Object.assign({\n        ref: this.headerRef,\n        extraClassName: \"fc-header-toolbar\",\n        model: toolbarConfig.header,\n        titleId: viewLabelId\n      }, toolbarProps)), (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewHarness, {\n        liquid: viewVGrow,\n        height: viewHeight,\n        aspectRatio: viewAspectRatio,\n        labeledById: viewLabelId\n      }, this.renderView(props), this.buildAppendContent()), toolbarConfig.footer && (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(Toolbar, Object.assign({\n        ref: this.footerRef,\n        extraClassName: \"fc-footer-toolbar\",\n        model: toolbarConfig.footer,\n        titleId: \"\"\n      }, toolbarProps)));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var props = this.props;\n      this.calendarInteractions = props.pluginHooks.calendarInteractions.map(function (CalendarInteractionClass) {\n        return new CalendarInteractionClass(props);\n      });\n      window.addEventListener('resize', this.handleWindowResize);\n      var propSetHandlers = props.pluginHooks.propSetHandlers;\n      for (var propName in propSetHandlers) {\n        propSetHandlers[propName](props[propName], props);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var props = this.props;\n      var propSetHandlers = props.pluginHooks.propSetHandlers;\n      for (var propName in propSetHandlers) {\n        if (props[propName] !== prevProps[propName]) {\n          propSetHandlers[propName](props[propName], props);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleWindowResize);\n      this.resizeRunner.clear();\n      var _iterator13 = _createForOfIteratorHelper(this.calendarInteractions),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var interaction = _step13.value;\n          interaction.destroy();\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      this.props.emitter.trigger('_unmount');\n    }\n  }, {\n    key: \"buildAppendContent\",\n    value: function buildAppendContent() {\n      var props = this.props;\n      var children = props.pluginHooks.viewContainerAppends.map(function (buildAppendContent) {\n        return buildAppendContent(props);\n      });\n      return preact__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, [preact__WEBPACK_IMPORTED_MODULE_1__.Fragment, {}].concat(_toConsumableArray(children)));\n    }\n  }, {\n    key: \"renderView\",\n    value: function renderView(props) {\n      var pluginHooks = props.pluginHooks;\n      var viewSpec = props.viewSpec;\n      var viewProps = {\n        dateProfile: props.dateProfile,\n        businessHours: props.businessHours,\n        eventStore: props.renderableEventStore,\n        eventUiBases: props.eventUiBases,\n        dateSelection: props.dateSelection,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        isHeightAuto: props.isHeightAuto,\n        forPrint: props.forPrint\n      };\n      var transformers = this.buildViewPropTransformers(pluginHooks.viewPropsTransformers);\n      var _iterator14 = _createForOfIteratorHelper(transformers),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var transformer = _step14.value;\n          Object.assign(viewProps, transformer.transform(viewProps, props));\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      var ViewComponent = viewSpec.component;\n      return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewComponent, Object.assign({}, viewProps));\n    }\n  }]);\n}(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a3);\nfunction buildToolbarProps(viewSpec, dateProfile, dateProfileGenerator, currentDate, now, title) {\n  // don't force any date-profiles to valid date profiles (the `false`) so that we can tell if it's invalid\n  var todayInfo = dateProfileGenerator.build(now, undefined, false); // TODO: need `undefined` or else INFINITE LOOP for some reason\n  var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate, false);\n  var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate, false);\n  return {\n    title: title,\n    activeButton: viewSpec.type,\n    navUnit: viewSpec.singleUnit,\n    isTodayEnabled: todayInfo.isValid && !(0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.H)(dateProfile.currentRange, now),\n    isPrevEnabled: prevInfo.isValid,\n    isNextEnabled: nextInfo.isValid\n  };\n}\n// Plugin\n// -----------------------------------------------------------------------------------------------------------------\nfunction buildViewPropTransformers(theClasses) {\n  return theClasses.map(function (TheClass) {\n    return new TheClass();\n  });\n}\nvar Calendar = /*#__PURE__*/function (_CalendarImpl) {\n  function Calendar(el) {\n    var _this9;\n    var optionOverrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Calendar);\n    _this9 = _callSuper(this, Calendar);\n    _this9.isRendering = false;\n    _this9.isRendered = false;\n    _this9.currentClassNames = [];\n    _this9.customContentRenderId = 0;\n    _this9.handleAction = function (action) {\n      // actions we know we want to render immediately\n      switch (action.type) {\n        case 'SET_EVENT_DRAG':\n        case 'SET_EVENT_RESIZE':\n          _this9.renderRunner.tryDrain();\n      }\n    };\n    _this9.handleData = function (data) {\n      _this9.currentData = data;\n      _this9.renderRunner.request(data.calendarOptions.rerenderDelay);\n    };\n    _this9.handleRenderRequest = function () {\n      if (_this9.isRendering) {\n        _this9.isRendered = true;\n        var _this10 = _this9,\n          currentData = _this10.currentData;\n        (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.aa)(function () {\n          (0,preact__WEBPACK_IMPORTED_MODULE_1__.render)((0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.ab, {\n            options: currentData.calendarOptions,\n            theme: currentData.theme,\n            emitter: currentData.emitter\n          }, function (classNames, height, isHeightAuto, forPrint) {\n            _this9.setClassNames(classNames);\n            _this9.setHeight(height);\n            return (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.ac.Provider, {\n              value: _this9.customContentRenderId\n            }, (0,preact__WEBPACK_IMPORTED_MODULE_1__.createElement)(CalendarContent, Object.assign({\n              isHeightAuto: isHeightAuto,\n              forPrint: forPrint\n            }, currentData)));\n          }), _this9.el);\n        });\n      } else if (_this9.isRendered) {\n        _this9.isRendered = false;\n        (0,preact__WEBPACK_IMPORTED_MODULE_1__.render)(null, _this9.el);\n        _this9.setClassNames([]);\n        _this9.setHeight('');\n      }\n    };\n    (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.ad)(el);\n    _this9.el = el;\n    _this9.renderRunner = new _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.D(_this9.handleRenderRequest);\n    new CalendarDataManager({\n      optionOverrides: optionOverrides,\n      calendarApi: _this9,\n      onAction: _this9.handleAction,\n      onData: _this9.handleData\n    });\n    return _this9;\n  }\n  _inherits(Calendar, _CalendarImpl);\n  return _createClass(Calendar, [{\n    key: \"render\",\n    value: function render() {\n      var wasRendering = this.isRendering;\n      if (!wasRendering) {\n        this.isRendering = true;\n      } else {\n        this.customContentRenderId += 1;\n      }\n      this.renderRunner.request();\n      if (wasRendering) {\n        this.updateSize();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isRendering) {\n        this.isRendering = false;\n        this.renderRunner.request();\n      }\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var _this11 = this;\n      (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.aa)(function () {\n        _get(_getPrototypeOf(Calendar.prototype), \"updateSize\", _this11).call(_this11);\n      });\n    }\n  }, {\n    key: \"batchRendering\",\n    value: function batchRendering(func) {\n      this.renderRunner.pause('batchRendering');\n      func();\n      this.renderRunner.resume('batchRendering');\n    }\n  }, {\n    key: \"pauseRendering\",\n    value: function pauseRendering() {\n      this.renderRunner.pause('pauseRendering');\n    }\n  }, {\n    key: \"resumeRendering\",\n    value: function resumeRendering() {\n      this.renderRunner.resume('pauseRendering', true);\n    }\n  }, {\n    key: \"resetOptions\",\n    value: function resetOptions(optionOverrides, changedOptionNames) {\n      this.currentDataManager.resetOptions(optionOverrides, changedOptionNames);\n    }\n  }, {\n    key: \"setClassNames\",\n    value: function setClassNames(classNames) {\n      if (!(0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.i)(classNames, this.currentClassNames)) {\n        var classList = this.el.classList;\n        var _iterator15 = _createForOfIteratorHelper(this.currentClassNames),\n          _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var className = _step15.value;\n            classList.remove(className);\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n        var _iterator16 = _createForOfIteratorHelper(classNames),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _className = _step16.value;\n            classList.add(_className);\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n        this.currentClassNames = classNames;\n      }\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.ae)(this.el, 'height', height);\n    }\n  }]);\n}(_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.a9);\nfunction formatDate(dateInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var dateEnv = buildDateEnv(options);\n  var formatter = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.x)(options);\n  var dateMeta = dateEnv.createMarkerMeta(dateInput);\n  if (!dateMeta) {\n    // TODO: warning?\n    return '';\n  }\n  return dateEnv.format(dateMeta.marker, formatter, {\n    forcedTzo: dateMeta.forcedTzo\n  });\n}\nfunction formatRange(startInput, endInput, options) {\n  var dateEnv = buildDateEnv(_typeof(options) === 'object' && options ? options : {}); // pass in if non-null object\n  var formatter = (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.x)(options);\n  var startMeta = dateEnv.createMarkerMeta(startInput);\n  var endMeta = dateEnv.createMarkerMeta(endInput);\n  if (!startMeta || !endMeta) {\n    // TODO: warning?\n    return '';\n  }\n  return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {\n    forcedStartTzo: startMeta.forcedTzo,\n    forcedEndTzo: endMeta.forcedTzo,\n    isEndExclusive: options.isEndExclusive,\n    defaultSeparator: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.e.defaultRangeSeparator\n  });\n}\n// TODO: more DRY and optimized\nfunction buildDateEnv(settings) {\n  var locale = buildLocale(settings.locale || 'en', organizeRawLocales([]).map); // TODO: don't hardcode 'en' everywhere\n  return new _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.S(Object.assign(Object.assign({\n    timeZone: _internal_common_js__WEBPACK_IMPORTED_MODULE_0__.e.timeZone,\n    calendarSystem: 'gregory'\n  }, settings), {\n    locale: locale\n  }));\n}\n\n// HELPERS\n/*\nif nextDayThreshold is specified, slicing is done in an all-day fashion.\nyou can get nextDayThreshold from context.nextDayThreshold\n*/\nfunction sliceEvents(props, allDay) {\n  return (0,_internal_common_js__WEBPACK_IMPORTED_MODULE_0__.af)(props.eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? props.nextDayThreshold : null).fg;\n}\nvar version = '6.1.13';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fullcalendar/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fullcalendar/core/internal-common.js":
/*!************************************************************!*\
  !*** ./node_modules/@fullcalendar/core/internal-common.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ elementClosest),\n/* harmony export */   A: () => (/* binding */ memoizeObjArg),\n/* harmony export */   B: () => (/* binding */ BaseComponent),\n/* harmony export */   C: () => (/* binding */ ContentContainer),\n/* harmony export */   D: () => (/* binding */ DelayedRunner),\n/* harmony export */   E: () => (/* binding */ isPropsEqual),\n/* harmony export */   F: () => (/* binding */ Emitter),\n/* harmony export */   G: () => (/* binding */ getInitialDate),\n/* harmony export */   H: () => (/* binding */ rangeContainsMarker),\n/* harmony export */   I: () => (/* binding */ createEmptyEventStore),\n/* harmony export */   J: () => (/* binding */ reduceCurrentDate),\n/* harmony export */   K: () => (/* binding */ reduceEventStore),\n/* harmony export */   L: () => (/* binding */ rezoneEventStoreDates),\n/* harmony export */   M: () => (/* binding */ mergeRawOptions),\n/* harmony export */   N: () => (/* binding */ BASE_OPTION_REFINERS),\n/* harmony export */   O: () => (/* binding */ CALENDAR_LISTENER_REFINERS),\n/* harmony export */   P: () => (/* binding */ CALENDAR_OPTION_REFINERS),\n/* harmony export */   Q: () => (/* binding */ COMPLEX_OPTION_COMPARATORS),\n/* harmony export */   R: () => (/* binding */ VIEW_OPTION_REFINERS),\n/* harmony export */   S: () => (/* binding */ DateEnv),\n/* harmony export */   T: () => (/* binding */ Theme),\n/* harmony export */   U: () => (/* binding */ DateProfileGenerator),\n/* harmony export */   V: () => (/* binding */ ViewContextType),\n/* harmony export */   W: () => (/* binding */ createEventUi),\n/* harmony export */   X: () => (/* binding */ parseBusinessHours),\n/* harmony export */   Y: () => (/* binding */ setRef),\n/* harmony export */   Z: () => (/* binding */ Interaction),\n/* harmony export */   _: () => (/* binding */ getElSeg),\n/* harmony export */   a: () => (/* binding */ mapHash),\n/* harmony export */   a$: () => (/* binding */ getSlotClassNames),\n/* harmony export */   a0: () => (/* binding */ EventImpl),\n/* harmony export */   a1: () => (/* binding */ listenBySelector),\n/* harmony export */   a2: () => (/* binding */ listenToHoverBySelector),\n/* harmony export */   a3: () => (/* binding */ PureComponent),\n/* harmony export */   a4: () => (/* binding */ buildViewContext),\n/* harmony export */   a5: () => (/* binding */ getUniqueDomId),\n/* harmony export */   a6: () => (/* binding */ parseInteractionSettings),\n/* harmony export */   a7: () => (/* binding */ interactionSettingsStore),\n/* harmony export */   a8: () => (/* binding */ getNow),\n/* harmony export */   a9: () => (/* binding */ CalendarImpl),\n/* harmony export */   aA: () => (/* binding */ diffDates),\n/* harmony export */   aB: () => (/* binding */ removeExact),\n/* harmony export */   aC: () => (/* binding */ memoizeArraylike),\n/* harmony export */   aD: () => (/* binding */ memoizeHashlike),\n/* harmony export */   aE: () => (/* binding */ intersectRects),\n/* harmony export */   aF: () => (/* binding */ pointInsideRect),\n/* harmony export */   aG: () => (/* binding */ constrainPoint),\n/* harmony export */   aH: () => (/* binding */ getRectCenter),\n/* harmony export */   aI: () => (/* binding */ diffPoints),\n/* harmony export */   aJ: () => (/* binding */ translateRect),\n/* harmony export */   aK: () => (/* binding */ compareObjs),\n/* harmony export */   aL: () => (/* binding */ collectFromHash),\n/* harmony export */   aM: () => (/* binding */ findElements),\n/* harmony export */   aN: () => (/* binding */ findDirectChildren),\n/* harmony export */   aO: () => (/* binding */ removeElement),\n/* harmony export */   aP: () => (/* binding */ applyStyle),\n/* harmony export */   aQ: () => (/* binding */ elementMatches),\n/* harmony export */   aR: () => (/* binding */ getEventTargetViaRoot),\n/* harmony export */   aS: () => (/* binding */ parseClassNames),\n/* harmony export */   aT: () => (/* binding */ getCanVGrowWithinCell),\n/* harmony export */   aU: () => (/* binding */ mergeEventStores),\n/* harmony export */   aV: () => (/* binding */ getRelevantEvents),\n/* harmony export */   aW: () => (/* binding */ eventTupleToStore),\n/* harmony export */   aX: () => (/* binding */ combineEventUis),\n/* harmony export */   aY: () => (/* binding */ Splitter),\n/* harmony export */   aZ: () => (/* binding */ getDayClassNames),\n/* harmony export */   a_: () => (/* binding */ getDateMeta),\n/* harmony export */   aa: () => (/* binding */ flushSync),\n/* harmony export */   ab: () => (/* binding */ CalendarRoot),\n/* harmony export */   ac: () => (/* binding */ RenderId),\n/* harmony export */   ad: () => (/* binding */ ensureElHasStyles),\n/* harmony export */   ae: () => (/* binding */ applyStyleProp),\n/* harmony export */   af: () => (/* binding */ sliceEventStore),\n/* harmony export */   ag: () => (/* binding */ JsonRequestError),\n/* harmony export */   ah: () => (/* binding */ createContext),\n/* harmony export */   ai: () => (/* binding */ refineProps),\n/* harmony export */   aj: () => (/* binding */ createEventInstance),\n/* harmony export */   ak: () => (/* binding */ parseEventDef),\n/* harmony export */   al: () => (/* binding */ refineEventDef),\n/* harmony export */   am: () => (/* binding */ padStart),\n/* harmony export */   an: () => (/* binding */ isInt),\n/* harmony export */   ao: () => (/* binding */ parseFieldSpecs),\n/* harmony export */   ap: () => (/* binding */ compareByFieldSpecs),\n/* harmony export */   aq: () => (/* binding */ flexibleCompare),\n/* harmony export */   ar: () => (/* binding */ preventSelection),\n/* harmony export */   as: () => (/* binding */ allowSelection),\n/* harmony export */   at: () => (/* binding */ preventContextMenu),\n/* harmony export */   au: () => (/* binding */ allowContextMenu),\n/* harmony export */   av: () => (/* binding */ compareNumbers),\n/* harmony export */   aw: () => (/* binding */ enableCursor),\n/* harmony export */   ax: () => (/* binding */ disableCursor),\n/* harmony export */   ay: () => (/* binding */ computeVisibleDayRange),\n/* harmony export */   az: () => (/* binding */ isMultiDayRange),\n/* harmony export */   b: () => (/* binding */ buildViewClassNames),\n/* harmony export */   b$: () => (/* binding */ SimpleScrollGrid),\n/* harmony export */   b0: () => (/* binding */ buildNavLinkAttrs),\n/* harmony export */   b1: () => (/* binding */ preventDefault),\n/* harmony export */   b2: () => (/* binding */ whenTransitionDone),\n/* harmony export */   b3: () => (/* binding */ computeInnerRect),\n/* harmony export */   b4: () => (/* binding */ computeEdges),\n/* harmony export */   b5: () => (/* binding */ getClippingParents),\n/* harmony export */   b6: () => (/* binding */ computeRect),\n/* harmony export */   b7: () => (/* binding */ rangesEqual),\n/* harmony export */   b8: () => (/* binding */ rangesIntersect),\n/* harmony export */   b9: () => (/* binding */ rangeContainsRange),\n/* harmony export */   bA: () => (/* binding */ SegHierarchy),\n/* harmony export */   bB: () => (/* binding */ buildEntryKey),\n/* harmony export */   bC: () => (/* binding */ getEntrySpanEnd),\n/* harmony export */   bD: () => (/* binding */ binarySearch),\n/* harmony export */   bE: () => (/* binding */ groupIntersectingEntries),\n/* harmony export */   bF: () => (/* binding */ intersectSpans),\n/* harmony export */   bG: () => (/* binding */ interactionSettingsToStore),\n/* harmony export */   bH: () => (/* binding */ ElementDragging),\n/* harmony export */   bI: () => (/* binding */ config),\n/* harmony export */   bJ: () => (/* binding */ parseDragMeta),\n/* harmony export */   bK: () => (/* binding */ DayHeader),\n/* harmony export */   bL: () => (/* binding */ computeFallbackHeaderFormat),\n/* harmony export */   bM: () => (/* binding */ TableDateCell),\n/* harmony export */   bN: () => (/* binding */ TableDowCell),\n/* harmony export */   bO: () => (/* binding */ DaySeriesModel),\n/* harmony export */   bP: () => (/* binding */ hasBgRendering),\n/* harmony export */   bQ: () => (/* binding */ buildSegTimeText),\n/* harmony export */   bR: () => (/* binding */ sortEventSegs),\n/* harmony export */   bS: () => (/* binding */ getSegMeta),\n/* harmony export */   bT: () => (/* binding */ buildEventRangeKey),\n/* harmony export */   bU: () => (/* binding */ getSegAnchorAttrs),\n/* harmony export */   bV: () => (/* binding */ DayTableModel),\n/* harmony export */   bW: () => (/* binding */ Slicer),\n/* harmony export */   bX: () => (/* binding */ applyMutationToEventStore),\n/* harmony export */   bY: () => (/* binding */ isPropsValid),\n/* harmony export */   bZ: () => (/* binding */ isInteractionValid),\n/* harmony export */   b_: () => (/* binding */ isDateSelectionValid),\n/* harmony export */   ba: () => (/* binding */ PositionCache),\n/* harmony export */   bb: () => (/* binding */ ScrollController),\n/* harmony export */   bc: () => (/* binding */ ElementScrollController),\n/* harmony export */   bd: () => (/* binding */ WindowScrollController),\n/* harmony export */   be: () => (/* binding */ DateComponent),\n/* harmony export */   bf: () => (/* binding */ isDateSpansEqual),\n/* harmony export */   bg: () => (/* binding */ addMs),\n/* harmony export */   bh: () => (/* binding */ addWeeks),\n/* harmony export */   bi: () => (/* binding */ diffWeeks),\n/* harmony export */   bj: () => (/* binding */ diffWholeWeeks),\n/* harmony export */   bk: () => (/* binding */ diffDayAndTime),\n/* harmony export */   bl: () => (/* binding */ diffDays),\n/* harmony export */   bm: () => (/* binding */ isValidDate),\n/* harmony export */   bn: () => (/* binding */ asCleanDays),\n/* harmony export */   bo: () => (/* binding */ multiplyDuration),\n/* harmony export */   bp: () => (/* binding */ addDurations),\n/* harmony export */   bq: () => (/* binding */ asRoughMinutes),\n/* harmony export */   br: () => (/* binding */ asRoughSeconds),\n/* harmony export */   bs: () => (/* binding */ asRoughMs),\n/* harmony export */   bt: () => (/* binding */ wholeDivideDurations),\n/* harmony export */   bu: () => (/* binding */ formatIsoTimeString),\n/* harmony export */   bv: () => (/* binding */ formatDayString),\n/* harmony export */   bw: () => (/* binding */ buildIsoString),\n/* harmony export */   bx: () => (/* binding */ formatIsoMonthStr),\n/* harmony export */   by: () => (/* binding */ NamedTimeZoneImpl),\n/* harmony export */   bz: () => (/* binding */ _parse),\n/* harmony export */   c: () => (/* binding */ greatestDurationDenominator),\n/* harmony export */   c0: () => (/* binding */ hasShrinkWidth),\n/* harmony export */   c1: () => (/* binding */ renderMicroColGroup),\n/* harmony export */   c2: () => (/* binding */ getScrollGridClassNames),\n/* harmony export */   c3: () => (/* binding */ getSectionClassNames),\n/* harmony export */   c4: () => (/* binding */ getSectionHasLiquidHeight),\n/* harmony export */   c5: () => (/* binding */ getAllowYScrolling),\n/* harmony export */   c6: () => (/* binding */ renderChunkContent),\n/* harmony export */   c7: () => (/* binding */ _computeShrinkWidth),\n/* harmony export */   c8: () => (/* binding */ sanitizeShrinkWidth),\n/* harmony export */   c9: () => (/* binding */ isColPropsEqual),\n/* harmony export */   ca: () => (/* binding */ renderScrollShim),\n/* harmony export */   cb: () => (/* binding */ getStickyFooterScrollbar),\n/* harmony export */   cc: () => (/* binding */ getStickyHeaderDates),\n/* harmony export */   cd: () => (/* binding */ Scroller),\n/* harmony export */   ce: () => (/* binding */ getScrollbarWidths),\n/* harmony export */   cf: () => (/* binding */ RefMap),\n/* harmony export */   cg: () => (/* binding */ getIsRtlScrollbarOnLeft),\n/* harmony export */   ch: () => (/* binding */ NowTimer),\n/* harmony export */   ci: () => (/* binding */ ScrollResponder),\n/* harmony export */   cj: () => (/* binding */ StandardEvent),\n/* harmony export */   ck: () => (/* binding */ NowIndicatorContainer),\n/* harmony export */   cl: () => (/* binding */ DayCellContainer),\n/* harmony export */   cm: () => (/* binding */ hasCustomDayCellContent),\n/* harmony export */   cn: () => (/* binding */ EventContainer),\n/* harmony export */   co: () => (/* binding */ renderFill),\n/* harmony export */   cp: () => (/* binding */ BgEvent),\n/* harmony export */   cq: () => (/* binding */ WeekNumberContainer),\n/* harmony export */   cr: () => (/* binding */ MoreLinkContainer),\n/* harmony export */   cs: () => (/* binding */ computeEarliestSegStart),\n/* harmony export */   ct: () => (/* binding */ ViewContainer),\n/* harmony export */   cu: () => (/* binding */ triggerDateSelect),\n/* harmony export */   cv: () => (/* binding */ getDefaultEventEnd),\n/* harmony export */   cw: () => (/* binding */ injectStyles),\n/* harmony export */   cx: () => (/* binding */ buildElAttrs),\n/* harmony export */   cy: () => (/* binding */ CustomRenderingStore),\n/* harmony export */   d: () => (/* binding */ createDuration),\n/* harmony export */   e: () => (/* binding */ BASE_OPTION_DEFAULTS),\n/* harmony export */   f: () => (/* binding */ arrayToHash),\n/* harmony export */   g: () => (/* binding */ guid),\n/* harmony export */   h: () => (/* binding */ filterHash),\n/* harmony export */   i: () => (/* binding */ isArraysEqual),\n/* harmony export */   j: () => (/* binding */ buildEventSourceRefiners),\n/* harmony export */   k: () => (/* binding */ formatWithOrdinals),\n/* harmony export */   l: () => (/* binding */ buildRangeApiWithTimeZone),\n/* harmony export */   m: () => (/* binding */ mergeProps),\n/* harmony export */   n: () => (/* binding */ identity),\n/* harmony export */   o: () => (/* binding */ intersectRanges),\n/* harmony export */   p: () => (/* binding */ parseEventSource),\n/* harmony export */   q: () => (/* binding */ startOfDay),\n/* harmony export */   r: () => (/* binding */ requestJson),\n/* harmony export */   s: () => (/* binding */ subtractDurations),\n/* harmony export */   t: () => (/* binding */ addDays),\n/* harmony export */   u: () => (/* binding */ unpromisify),\n/* harmony export */   v: () => (/* binding */ hashValuesToArray),\n/* harmony export */   w: () => (/* binding */ buildEventApis),\n/* harmony export */   x: () => (/* binding */ createFormatter),\n/* harmony export */   y: () => (/* binding */ diffWholeDays),\n/* harmony export */   z: () => (/* binding */ memoize)\n/* harmony export */ });\n/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! preact */ \"(ssr)/./node_modules/preact/dist/preact.mjs\");\n/* harmony import */ var preact_compat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! preact/compat */ \"(ssr)/./node_modules/preact/compat/dist/compat.mjs\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\nvar styleTexts = [];\nvar styleEls = new Map();\nfunction injectStyles(styleText) {\n  styleTexts.push(styleText);\n  styleEls.forEach(function (styleEl) {\n    appendStylesTo(styleEl, styleText);\n  });\n}\nfunction ensureElHasStyles(el) {\n  if (el.isConnected &&\n  // sometimes true if SSR system simulates DOM\n  el.getRootNode // sometimes undefined if SSR system simulates DOM\n  ) {\n    registerStylesRoot(el.getRootNode());\n  }\n}\nfunction registerStylesRoot(rootNode) {\n  var styleEl = styleEls.get(rootNode);\n  if (!styleEl || !styleEl.isConnected) {\n    styleEl = rootNode.querySelector('style[data-fullcalendar]');\n    if (!styleEl) {\n      styleEl = document.createElement('style');\n      styleEl.setAttribute('data-fullcalendar', '');\n      var nonce = getNonceValue();\n      if (nonce) {\n        styleEl.nonce = nonce;\n      }\n      var parentEl = rootNode === document ? document.head : rootNode;\n      var insertBefore = rootNode === document ? parentEl.querySelector('script,link[rel=stylesheet],link[as=style],style') : parentEl.firstChild;\n      parentEl.insertBefore(styleEl, insertBefore);\n    }\n    styleEls.set(rootNode, styleEl);\n    hydrateStylesRoot(styleEl);\n  }\n}\nfunction hydrateStylesRoot(styleEl) {\n  var _iterator = _createForOfIteratorHelper(styleTexts),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var styleText = _step.value;\n      appendStylesTo(styleEl, styleText);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction appendStylesTo(styleEl, styleText) {\n  var sheet = styleEl.sheet;\n  var ruleCnt = sheet.cssRules.length;\n  styleText.split('}').forEach(function (styleStr, i) {\n    styleStr = styleStr.trim();\n    if (styleStr) {\n      sheet.insertRule(styleStr + '}', ruleCnt + i);\n    }\n  });\n}\n// nonce\n// -------------------------------------------------------------------------------------------------\nvar queriedNonceValue;\nfunction getNonceValue() {\n  if (queriedNonceValue === undefined) {\n    queriedNonceValue = queryNonceValue();\n  }\n  return queriedNonceValue;\n}\n/*\nTODO: discourage meta tag and instead put nonce attribute on placeholder <style> tag\n*/\nfunction queryNonceValue() {\n  var metaWithNonce = document.querySelector('meta[name=\"csp-nonce\"]');\n  if (metaWithNonce && metaWithNonce.hasAttribute('content')) {\n    return metaWithNonce.getAttribute('content');\n  }\n  var elWithNonce = document.querySelector('script[nonce]');\n  if (elWithNonce) {\n    return elWithNonce.nonce || '';\n  }\n  return '';\n}\n// main\n// -------------------------------------------------------------------------------------------------\nif (typeof document !== 'undefined') {\n  registerStylesRoot(document);\n}\nvar css_248z = \":root{--fc-small-font-size:.85em;--fc-page-bg-color:#fff;--fc-neutral-bg-color:hsla(0,0%,82%,.3);--fc-neutral-text-color:grey;--fc-border-color:#ddd;--fc-button-text-color:#fff;--fc-button-bg-color:#2c3e50;--fc-button-border-color:#2c3e50;--fc-button-hover-bg-color:#1e2b37;--fc-button-hover-border-color:#1a252f;--fc-button-active-bg-color:#1a252f;--fc-button-active-border-color:#151e27;--fc-event-bg-color:#3788d8;--fc-event-border-color:#3788d8;--fc-event-text-color:#fff;--fc-event-selected-overlay-color:rgba(0,0,0,.25);--fc-more-link-bg-color:#d0d0d0;--fc-more-link-text-color:inherit;--fc-event-resizer-thickness:8px;--fc-event-resizer-dot-total-width:8px;--fc-event-resizer-dot-border-width:1px;--fc-non-business-color:hsla(0,0%,84%,.3);--fc-bg-event-color:#8fdf82;--fc-bg-event-opacity:0.3;--fc-highlight-color:rgba(188,232,241,.3);--fc-today-bg-color:rgba(255,220,40,.15);--fc-now-indicator-color:red}.fc-not-allowed,.fc-not-allowed .fc-event{cursor:not-allowed}.fc{display:flex;flex-direction:column;font-size:1em}.fc,.fc *,.fc :after,.fc :before{box-sizing:border-box}.fc table{border-collapse:collapse;border-spacing:0;font-size:1em}.fc th{text-align:center}.fc td,.fc th{padding:0;vertical-align:top}.fc a[data-navlink]{cursor:pointer}.fc a[data-navlink]:hover{text-decoration:underline}.fc-direction-ltr{direction:ltr;text-align:left}.fc-direction-rtl{direction:rtl;text-align:right}.fc-theme-standard td,.fc-theme-standard th{border:1px solid var(--fc-border-color)}.fc-liquid-hack td,.fc-liquid-hack th{position:relative}@font-face{font-family:fcicons;font-style:normal;font-weight:400;src:url(\\\"data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBfAAAAC8AAAAYGNtYXAXVtKNAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZgYydxIAAAF4AAAFNGhlYWQUJ7cIAAAGrAAAADZoaGVhB20DzAAABuQAAAAkaG10eCIABhQAAAcIAAAALGxvY2ED4AU6AAAHNAAAABhtYXhwAA8AjAAAB0wAAAAgbmFtZXsr690AAAdsAAABhnBvc3QAAwAAAAAI9AAAACAAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpBgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6Qb//f//AAAAAAAg6QD//f//AAH/4xcEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAABAWIAjQKeAskAEwAAJSc3NjQnJiIHAQYUFwEWMjc2NCcCnuLiDQ0MJAz/AA0NAQAMJAwNDcni4gwjDQwM/wANIwz/AA0NDCMNAAAAAQFiAI0CngLJABMAACUBNjQnASYiBwYUHwEHBhQXFjI3AZ4BAA0N/wAMJAwNDeLiDQ0MJAyNAQAMIw0BAAwMDSMM4uINIwwNDQAAAAIA4gC3Ax4CngATACcAACUnNzY0JyYiDwEGFB8BFjI3NjQnISc3NjQnJiIPAQYUHwEWMjc2NCcB87e3DQ0MIw3VDQ3VDSMMDQ0BK7e3DQ0MJAzVDQ3VDCQMDQ3zuLcMJAwNDdUNIwzWDAwNIwy4twwkDA0N1Q0jDNYMDA0jDAAAAgDiALcDHgKeABMAJwAAJTc2NC8BJiIHBhQfAQcGFBcWMjchNzY0LwEmIgcGFB8BBwYUFxYyNwJJ1Q0N1Q0jDA0Nt7cNDQwjDf7V1Q0N1QwkDA0Nt7cNDQwkDLfWDCMN1Q0NDCQMt7gMIw0MDNYMIw3VDQ0MJAy3uAwjDQwMAAADAFUAAAOrA1UAMwBoAHcAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMhMjY1NCYjISIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAAVYRGRkR/qoRGRkRA1UFBAUOCQkVDAsZDf2rDRkLDBUJCA4FBQUFBQUOCQgVDAsZDQJVDRkLDBUJCQ4FBAVVAgECBQMCBwQECAX9qwQJAwQHAwMFAQICAgIBBQMDBwQDCQQCVQUIBAQHAgMFAgEC/oAZEhEZGRESGQAAAAADAFUAAAOrA1UAMwBoAIkAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMzFRQWMzI2PQEzMjY1NCYrATU0JiMiBh0BIyIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAgBkSEhmAERkZEYAZEhIZgBEZGREDVQUEBQ4JCRUMCxkN/asNGQsMFQkIDgUFBQUFBQ4JCBUMCxkNAlUNGQsMFQkJDgUEBVUCAQIFAwIHBAQIBf2rBAkDBAcDAwUBAgICAgEFAwMHBAMJBAJVBQgEBAcCAwUCAQL+gIASGRkSgBkSERmAEhkZEoAZERIZAAABAOIAjQMeAskAIAAAExcHBhQXFjI/ARcWMjc2NC8BNzY0JyYiDwEnJiIHBhQX4uLiDQ0MJAzi4gwkDA0N4uINDQwkDOLiDCQMDQ0CjeLiDSMMDQ3h4Q0NDCMN4uIMIw0MDOLiDAwNIwwAAAABAAAAAQAAa5n0y18PPPUACwQAAAAAANivOVsAAAAA2K85WwAAAAADqwNVAAAACAACAAAAAAAAAAEAAAPA/8AAAAQAAAAAAAOrAAEAAAAAAAAAAAAAAAAAAAALBAAAAAAAAAAAAAAAAgAAAAQAAWIEAAFiBAAA4gQAAOIEAABVBAAAVQQAAOIAAAAAAAoAFAAeAEQAagCqAOoBngJkApoAAQAAAAsAigADAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAA4ArgABAAAAAAABAAcAAAABAAAAAAACAAcAYAABAAAAAAADAAcANgABAAAAAAAEAAcAdQABAAAAAAAFAAsAFQABAAAAAAAGAAcASwABAAAAAAAKABoAigADAAEECQABAA4ABwADAAEECQACAA4AZwADAAEECQADAA4APQADAAEECQAEAA4AfAADAAEECQAFABYAIAADAAEECQAGAA4AUgADAAEECQAKADQApGZjaWNvbnMAZgBjAGkAYwBvAG4Ac1ZlcnNpb24gMS4wAFYAZQByAHMAaQBvAG4AIAAxAC4AMGZjaWNvbnMAZgBjAGkAYwBvAG4Ac2ZjaWNvbnMAZgBjAGkAYwBvAG4Ac1JlZ3VsYXIAUgBlAGcAdQBsAGEAcmZjaWNvbnMAZgBjAGkAYwBvAG4Ac0ZvbnQgZ2VuZXJhdGVkIGJ5IEljb01vb24uAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\\\") format(\\\"truetype\\\")}.fc-icon{speak:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-block;font-family:fcicons!important;font-style:normal;font-variant:normal;font-weight:400;height:1em;line-height:1;text-align:center;text-transform:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:1em}.fc-icon-chevron-left:before{content:\\\"\\\\e900\\\"}.fc-icon-chevron-right:before{content:\\\"\\\\e901\\\"}.fc-icon-chevrons-left:before{content:\\\"\\\\e902\\\"}.fc-icon-chevrons-right:before{content:\\\"\\\\e903\\\"}.fc-icon-minus-square:before{content:\\\"\\\\e904\\\"}.fc-icon-plus-square:before{content:\\\"\\\\e905\\\"}.fc-icon-x:before{content:\\\"\\\\e906\\\"}.fc .fc-button{border-radius:0;font-family:inherit;font-size:inherit;line-height:inherit;margin:0;overflow:visible;text-transform:none}.fc .fc-button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}.fc .fc-button{-webkit-appearance:button}.fc .fc-button:not(:disabled){cursor:pointer}.fc .fc-button{background-color:transparent;border:1px solid transparent;border-radius:.25em;display:inline-block;font-size:1em;font-weight:400;line-height:1.5;padding:.4em .65em;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle}.fc .fc-button:hover{text-decoration:none}.fc .fc-button:focus{box-shadow:0 0 0 .2rem rgba(44,62,80,.25);outline:0}.fc .fc-button:disabled{opacity:.65}.fc .fc-button-primary{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:hover{background-color:var(--fc-button-hover-bg-color);border-color:var(--fc-button-hover-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:disabled{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button-primary:not(:disabled).fc-button-active,.fc .fc-button-primary:not(:disabled):active{background-color:var(--fc-button-active-bg-color);border-color:var(--fc-button-active-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:not(:disabled).fc-button-active:focus,.fc .fc-button-primary:not(:disabled):active:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button .fc-icon{font-size:1.5em;vertical-align:middle}.fc .fc-button-group{display:inline-flex;position:relative;vertical-align:middle}.fc .fc-button-group>.fc-button{flex:1 1 auto;position:relative}.fc .fc-button-group>.fc-button.fc-button-active,.fc .fc-button-group>.fc-button:active,.fc .fc-button-group>.fc-button:focus,.fc .fc-button-group>.fc-button:hover{z-index:1}.fc-direction-ltr .fc-button-group>.fc-button:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0;margin-left:-1px}.fc-direction-ltr .fc-button-group>.fc-button:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.fc-direction-rtl .fc-button-group>.fc-button:not(:first-child){border-bottom-right-radius:0;border-top-right-radius:0;margin-right:-1px}.fc-direction-rtl .fc-button-group>.fc-button:not(:last-child){border-bottom-left-radius:0;border-top-left-radius:0}.fc .fc-toolbar{align-items:center;display:flex;justify-content:space-between}.fc .fc-toolbar.fc-header-toolbar{margin-bottom:1.5em}.fc .fc-toolbar.fc-footer-toolbar{margin-top:1.5em}.fc .fc-toolbar-title{font-size:1.75em;margin:0}.fc-direction-ltr .fc-toolbar>*>:not(:first-child){margin-left:.75em}.fc-direction-rtl .fc-toolbar>*>:not(:first-child){margin-right:.75em}.fc-direction-rtl .fc-toolbar-ltr{flex-direction:row-reverse}.fc .fc-scroller{-webkit-overflow-scrolling:touch;position:relative}.fc .fc-scroller-liquid{height:100%}.fc .fc-scroller-liquid-absolute{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-scroller-harness{direction:ltr;overflow:hidden;position:relative}.fc .fc-scroller-harness-liquid{height:100%}.fc-direction-rtl .fc-scroller-harness>.fc-scroller{direction:rtl}.fc-theme-standard .fc-scrollgrid{border:1px solid var(--fc-border-color)}.fc .fc-scrollgrid,.fc .fc-scrollgrid table{table-layout:fixed;width:100%}.fc .fc-scrollgrid table{border-left-style:hidden;border-right-style:hidden;border-top-style:hidden}.fc .fc-scrollgrid{border-bottom-width:0;border-collapse:separate;border-right-width:0}.fc .fc-scrollgrid-liquid{height:100%}.fc .fc-scrollgrid-section,.fc .fc-scrollgrid-section table,.fc .fc-scrollgrid-section>td{height:1px}.fc .fc-scrollgrid-section-liquid>td{height:100%}.fc .fc-scrollgrid-section>*{border-left-width:0;border-top-width:0}.fc .fc-scrollgrid-section-footer>*,.fc .fc-scrollgrid-section-header>*{border-bottom-width:0}.fc .fc-scrollgrid-section-body table,.fc .fc-scrollgrid-section-footer table{border-bottom-style:hidden}.fc .fc-scrollgrid-section-sticky>*{background:var(--fc-page-bg-color);position:sticky;z-index:3}.fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky>*{top:0}.fc .fc-scrollgrid-section-footer.fc-scrollgrid-section-sticky>*{bottom:0}.fc .fc-scrollgrid-sticky-shim{height:1px;margin-bottom:-1px}.fc-sticky{position:sticky}.fc .fc-view-harness{flex-grow:1;position:relative}.fc .fc-view-harness-active>.fc-view{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-col-header-cell-cushion{display:inline-block;padding:2px 4px}.fc .fc-bg-event,.fc .fc-highlight,.fc .fc-non-business{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-non-business{background:var(--fc-non-business-color)}.fc .fc-bg-event{background:var(--fc-bg-event-color);opacity:var(--fc-bg-event-opacity)}.fc .fc-bg-event .fc-event-title{font-size:var(--fc-small-font-size);font-style:italic;margin:.5em}.fc .fc-highlight{background:var(--fc-highlight-color)}.fc .fc-cell-shaded,.fc .fc-day-disabled{background:var(--fc-neutral-bg-color)}a.fc-event,a.fc-event:hover{text-decoration:none}.fc-event.fc-event-draggable,.fc-event[href]{cursor:pointer}.fc-event .fc-event-main{position:relative;z-index:2}.fc-event-dragging:not(.fc-event-selected){opacity:.75}.fc-event-dragging.fc-event-selected{box-shadow:0 2px 7px rgba(0,0,0,.3)}.fc-event .fc-event-resizer{display:none;position:absolute;z-index:4}.fc-event-selected .fc-event-resizer,.fc-event:hover .fc-event-resizer{display:block}.fc-event-selected .fc-event-resizer{background:var(--fc-page-bg-color);border-color:inherit;border-radius:calc(var(--fc-event-resizer-dot-total-width)/2);border-style:solid;border-width:var(--fc-event-resizer-dot-border-width);height:var(--fc-event-resizer-dot-total-width);width:var(--fc-event-resizer-dot-total-width)}.fc-event-selected .fc-event-resizer:before{bottom:-20px;content:\\\"\\\";left:-20px;position:absolute;right:-20px;top:-20px}.fc-event-selected,.fc-event:focus{box-shadow:0 2px 5px rgba(0,0,0,.2)}.fc-event-selected:before,.fc-event:focus:before{bottom:0;content:\\\"\\\";left:0;position:absolute;right:0;top:0;z-index:3}.fc-event-selected:after,.fc-event:focus:after{background:var(--fc-event-selected-overlay-color);bottom:-1px;content:\\\"\\\";left:-1px;position:absolute;right:-1px;top:-1px;z-index:1}.fc-h-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-h-event .fc-event-main{color:var(--fc-event-text-color)}.fc-h-event .fc-event-main-frame{display:flex}.fc-h-event .fc-event-time{max-width:100%;overflow:hidden}.fc-h-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-width:0}.fc-h-event .fc-event-title{display:inline-block;left:0;max-width:100%;overflow:hidden;right:0;vertical-align:top}.fc-h-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-start),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-end){border-bottom-left-radius:0;border-left-width:0;border-top-left-radius:0}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-end),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-start){border-bottom-right-radius:0;border-right-width:0;border-top-right-radius:0}.fc-h-event:not(.fc-event-selected) .fc-event-resizer{bottom:0;top:0;width:var(--fc-event-resizer-thickness)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end{cursor:w-resize;left:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start{cursor:e-resize;right:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-h-event.fc-event-selected .fc-event-resizer{margin-top:calc(var(--fc-event-resizer-dot-total-width)*-.5);top:50%}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-start,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-end{left:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-end,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-start{right:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc .fc-popover{box-shadow:0 2px 6px rgba(0,0,0,.15);position:absolute;z-index:9999}.fc .fc-popover-header{align-items:center;display:flex;flex-direction:row;justify-content:space-between;padding:3px 4px}.fc .fc-popover-title{margin:0 2px}.fc .fc-popover-close{cursor:pointer;font-size:1.1em;opacity:.65}.fc-theme-standard .fc-popover{background:var(--fc-page-bg-color);border:1px solid var(--fc-border-color)}.fc-theme-standard .fc-popover-header{background:var(--fc-neutral-bg-color)}\";\ninjectStyles(css_248z);\nvar DelayedRunner = /*#__PURE__*/function () {\n  function DelayedRunner(drainedOption) {\n    _classCallCheck(this, DelayedRunner);\n    this.drainedOption = drainedOption;\n    this.isRunning = false;\n    this.isDirty = false;\n    this.pauseDepths = {};\n    this.timeoutId = 0;\n  }\n  return _createClass(DelayedRunner, [{\n    key: \"request\",\n    value: function request(delay) {\n      this.isDirty = true;\n      if (!this.isPaused()) {\n        this.clearTimeout();\n        if (delay == null) {\n          this.tryDrain();\n        } else {\n          this.timeoutId = setTimeout(\n          // NOT OPTIMAL! TODO: look at debounce\n          this.tryDrain.bind(this), delay);\n        }\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var pauseDepths = this.pauseDepths;\n      pauseDepths[scope] = (pauseDepths[scope] || 0) + 1;\n      this.clearTimeout();\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var force = arguments.length > 1 ? arguments[1] : undefined;\n      var pauseDepths = this.pauseDepths;\n      if (scope in pauseDepths) {\n        if (force) {\n          delete pauseDepths[scope];\n        } else {\n          pauseDepths[scope] -= 1;\n          var depth = pauseDepths[scope];\n          if (depth <= 0) {\n            delete pauseDepths[scope];\n          }\n        }\n        this.tryDrain();\n      }\n    }\n  }, {\n    key: \"isPaused\",\n    value: function isPaused() {\n      return Object.keys(this.pauseDepths).length;\n    }\n  }, {\n    key: \"tryDrain\",\n    value: function tryDrain() {\n      if (!this.isRunning && !this.isPaused()) {\n        this.isRunning = true;\n        while (this.isDirty) {\n          this.isDirty = false;\n          this.drained(); // might set isDirty to true again\n        }\n\n        this.isRunning = false;\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.clearTimeout();\n      this.isDirty = false;\n      this.pauseDepths = {};\n    }\n  }, {\n    key: \"clearTimeout\",\n    value: function (_clearTimeout) {\n      function clearTimeout() {\n        return _clearTimeout.apply(this, arguments);\n      }\n      clearTimeout.toString = function () {\n        return _clearTimeout.toString();\n      };\n      return clearTimeout;\n    }(function () {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = 0;\n      }\n    })\n  }, {\n    key: \"drained\",\n    value: function drained() {\n      if (this.drainedOption) {\n        this.drainedOption();\n      }\n    }\n  }]);\n}();\nfunction removeElement(el) {\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n}\n// Querying\n// ----------------------------------------------------------------------------------------------------------------\nfunction elementClosest(el, selector) {\n  if (el.closest) {\n    return el.closest(selector);\n    // really bad fallback for IE\n    // from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n  }\n\n  if (!document.documentElement.contains(el)) {\n    return null;\n  }\n  do {\n    if (elementMatches(el, selector)) {\n      return el;\n    }\n    el = el.parentElement || el.parentNode;\n  } while (el !== null && el.nodeType === 1);\n  return null;\n}\nfunction elementMatches(el, selector) {\n  var method = el.matches || el.matchesSelector || el.msMatchesSelector;\n  return method.call(el, selector);\n}\n// accepts multiple subject els\n// returns a real array. good for methods like forEach\n// TODO: accept the document\nfunction findElements(container, selector) {\n  var containers = container instanceof HTMLElement ? [container] : container;\n  var allMatches = [];\n  for (var i = 0; i < containers.length; i += 1) {\n    var matches = containers[i].querySelectorAll(selector);\n    for (var j = 0; j < matches.length; j += 1) {\n      allMatches.push(matches[j]);\n    }\n  }\n  return allMatches;\n}\n// accepts multiple subject els\n// only queries direct child elements // TODO: rename to findDirectChildren!\nfunction findDirectChildren(parent, selector) {\n  var parents = parent instanceof HTMLElement ? [parent] : parent;\n  var allMatches = [];\n  for (var i = 0; i < parents.length; i += 1) {\n    var childNodes = parents[i].children; // only ever elements\n    for (var j = 0; j < childNodes.length; j += 1) {\n      var childNode = childNodes[j];\n      if (!selector || elementMatches(childNode, selector)) {\n        allMatches.push(childNode);\n      }\n    }\n  }\n  return allMatches;\n}\n// Style\n// ----------------------------------------------------------------------------------------------------------------\nvar PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;\nfunction applyStyle(el, props) {\n  for (var propName in props) {\n    applyStyleProp(el, propName, props[propName]);\n  }\n}\nfunction applyStyleProp(el, name, val) {\n  if (val == null) {\n    el.style[name] = '';\n  } else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {\n    el.style[name] = \"\".concat(val, \"px\");\n  } else {\n    el.style[name] = val;\n  }\n}\n// Event Handling\n// ----------------------------------------------------------------------------------------------------------------\n// if intercepting bubbled events at the document/window/body level,\n// and want to see originating element (the 'target'), use this util instead\n// of `ev.target` because it goes within web-component boundaries.\nfunction getEventTargetViaRoot(ev) {\n  var _a, _b;\n  return (_b = (_a = ev.composedPath) === null || _a === void 0 ? void 0 : _a.call(ev)[0]) !== null && _b !== void 0 ? _b : ev.target;\n}\n// Unique ID for DOM attribute\nvar guid$1 = 0;\nfunction getUniqueDomId() {\n  guid$1 += 1;\n  return 'fc-dom-' + guid$1;\n}\n\n// Stops a mouse/touch event from doing it's native browser action\nfunction preventDefault(ev) {\n  ev.preventDefault();\n}\n// Event Delegation\n// ----------------------------------------------------------------------------------------------------------------\nfunction buildDelegationHandler(selector, handler) {\n  return function (ev) {\n    var matchedChild = elementClosest(ev.target, selector);\n    if (matchedChild) {\n      handler.call(matchedChild, ev, matchedChild);\n    }\n  };\n}\nfunction listenBySelector(container, eventType, selector, handler) {\n  var attachedHandler = buildDelegationHandler(selector, handler);\n  container.addEventListener(eventType, attachedHandler);\n  return function () {\n    container.removeEventListener(eventType, attachedHandler);\n  };\n}\nfunction listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {\n  var currentMatchedChild;\n  return listenBySelector(container, 'mouseover', selector, function (mouseOverEv, matchedChild) {\n    if (matchedChild !== currentMatchedChild) {\n      currentMatchedChild = matchedChild;\n      onMouseEnter(mouseOverEv, matchedChild);\n      var _realOnMouseLeave = function realOnMouseLeave(mouseLeaveEv) {\n        currentMatchedChild = null;\n        onMouseLeave(mouseLeaveEv, matchedChild);\n        matchedChild.removeEventListener('mouseleave', _realOnMouseLeave);\n      };\n      // listen to the next mouseleave, and then unattach\n      matchedChild.addEventListener('mouseleave', _realOnMouseLeave);\n    }\n  });\n}\n// Animation\n// ----------------------------------------------------------------------------------------------------------------\nvar transitionEventNames = ['webkitTransitionEnd', 'otransitionend', 'oTransitionEnd', 'msTransitionEnd', 'transitionend'];\n// triggered only when the next single subsequent transition finishes\nfunction whenTransitionDone(el, callback) {\n  var _realCallback = function realCallback(ev) {\n    callback(ev);\n    transitionEventNames.forEach(function (eventName) {\n      el.removeEventListener(eventName, _realCallback);\n    });\n  };\n  transitionEventNames.forEach(function (eventName) {\n    el.addEventListener(eventName, _realCallback); // cross-browser way to determine when the transition finishes\n  });\n}\n// ARIA workarounds\n// ----------------------------------------------------------------------------------------------------------------\nfunction createAriaClickAttrs(handler) {\n  return Object.assign({\n    onClick: handler\n  }, createAriaKeyboardAttrs(handler));\n}\nfunction createAriaKeyboardAttrs(handler) {\n  return {\n    tabIndex: 0,\n    onKeyDown: function onKeyDown(ev) {\n      if (ev.key === 'Enter' || ev.key === ' ') {\n        handler(ev);\n        ev.preventDefault(); // if space, don't scroll down page\n      }\n    }\n  };\n}\n\nvar guidNumber = 0;\nfunction guid() {\n  guidNumber += 1;\n  return String(guidNumber);\n}\n/* FullCalendar-specific DOM Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n// Make the mouse cursor express that an event is not allowed in the current area\nfunction disableCursor() {\n  document.body.classList.add('fc-not-allowed');\n}\n// Returns the mouse cursor to its original look\nfunction enableCursor() {\n  document.body.classList.remove('fc-not-allowed');\n}\n/* Selection\n----------------------------------------------------------------------------------------------------------------------*/\nfunction preventSelection(el) {\n  el.style.userSelect = 'none';\n  el.style.webkitUserSelect = 'none';\n  el.addEventListener('selectstart', preventDefault);\n}\nfunction allowSelection(el) {\n  el.style.userSelect = '';\n  el.style.webkitUserSelect = '';\n  el.removeEventListener('selectstart', preventDefault);\n}\n/* Context Menu\n----------------------------------------------------------------------------------------------------------------------*/\nfunction preventContextMenu(el) {\n  el.addEventListener('contextmenu', preventDefault);\n}\nfunction allowContextMenu(el) {\n  el.removeEventListener('contextmenu', preventDefault);\n}\nfunction parseFieldSpecs(input) {\n  var specs = [];\n  var tokens = [];\n  var i;\n  var token;\n  if (typeof input === 'string') {\n    tokens = input.split(/\\s*,\\s*/);\n  } else if (typeof input === 'function') {\n    tokens = [input];\n  } else if (Array.isArray(input)) {\n    tokens = input;\n  }\n  for (i = 0; i < tokens.length; i += 1) {\n    token = tokens[i];\n    if (typeof token === 'string') {\n      specs.push(token.charAt(0) === '-' ? {\n        field: token.substring(1),\n        order: -1\n      } : {\n        field: token,\n        order: 1\n      });\n    } else if (typeof token === 'function') {\n      specs.push({\n        func: token\n      });\n    }\n  }\n  return specs;\n}\nfunction compareByFieldSpecs(obj0, obj1, fieldSpecs) {\n  var i;\n  var cmp;\n  for (i = 0; i < fieldSpecs.length; i += 1) {\n    cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);\n    if (cmp) {\n      return cmp;\n    }\n  }\n  return 0;\n}\nfunction compareByFieldSpec(obj0, obj1, fieldSpec) {\n  if (fieldSpec.func) {\n    return fieldSpec.func(obj0, obj1);\n  }\n  return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);\n}\nfunction flexibleCompare(a, b) {\n  if (!a && !b) {\n    return 0;\n  }\n  if (b == null) {\n    return -1;\n  }\n  if (a == null) {\n    return 1;\n  }\n  if (typeof a === 'string' || typeof b === 'string') {\n    return String(a).localeCompare(String(b));\n  }\n  return a - b;\n}\n/* String Utilities\n----------------------------------------------------------------------------------------------------------------------*/\nfunction padStart(val, len) {\n  var s = String(val);\n  return '000'.substr(0, len - s.length) + s;\n}\nfunction formatWithOrdinals(formatter, args, fallbackText) {\n  if (typeof formatter === 'function') {\n    return formatter.apply(void 0, _toConsumableArray(args));\n  }\n  if (typeof formatter === 'string') {\n    // non-blank string\n    return args.reduce(function (str, arg, index) {\n      return str.replace('$' + index, arg || '');\n    }, formatter);\n  }\n  return fallbackText;\n}\n/* Number Utilities\n----------------------------------------------------------------------------------------------------------------------*/\nfunction compareNumbers(a, b) {\n  return a - b;\n}\nfunction isInt(n) {\n  return n % 1 === 0;\n}\n/* FC-specific DOM dimension stuff\n----------------------------------------------------------------------------------------------------------------------*/\nfunction computeSmallestCellWidth(cellEl) {\n  var allWidthEl = cellEl.querySelector('.fc-scrollgrid-shrink-frame');\n  var contentWidthEl = cellEl.querySelector('.fc-scrollgrid-shrink-cushion');\n  if (!allWidthEl) {\n    throw new Error('needs fc-scrollgrid-shrink-frame className'); // TODO: use const\n  }\n\n  if (!contentWidthEl) {\n    throw new Error('needs fc-scrollgrid-shrink-cushion className');\n  }\n  return cellEl.getBoundingClientRect().width - allWidthEl.getBoundingClientRect().width +\n  // the cell padding+border\n  contentWidthEl.getBoundingClientRect().width;\n}\nvar INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];\nvar PARSE_RE = /^(-?)(?:(\\d+)\\.)?(\\d+):(\\d\\d)(?::(\\d\\d)(?:\\.(\\d\\d\\d))?)?/;\n// Parsing and Creation\nfunction createDuration(input, unit) {\n  if (typeof input === 'string') {\n    return parseString(input);\n  }\n  if (_typeof(input) === 'object' && input) {\n    // non-null object\n    return parseObject(input);\n  }\n  if (typeof input === 'number') {\n    return parseObject(_defineProperty({}, unit || 'milliseconds', input));\n  }\n  return null;\n}\nfunction parseString(s) {\n  var m = PARSE_RE.exec(s);\n  if (m) {\n    var sign = m[1] ? -1 : 1;\n    return {\n      years: 0,\n      months: 0,\n      days: sign * (m[2] ? parseInt(m[2], 10) : 0),\n      milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 +\n      // hours\n      (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 +\n      // minutes\n      (m[5] ? parseInt(m[5], 10) : 0) * 1000 + (\n      // seconds\n      m[6] ? parseInt(m[6], 10) : 0) // ms\n      )\n    };\n  }\n\n  return null;\n}\nfunction parseObject(obj) {\n  var duration = {\n    years: obj.years || obj.year || 0,\n    months: obj.months || obj.month || 0,\n    days: obj.days || obj.day || 0,\n    milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 +\n    // hours\n    (obj.minutes || obj.minute || 0) * 60 * 1000 +\n    // minutes\n    (obj.seconds || obj.second || 0) * 1000 + (\n    // seconds\n    obj.milliseconds || obj.millisecond || obj.ms || 0) // ms\n  };\n\n  var weeks = obj.weeks || obj.week;\n  if (weeks) {\n    duration.days += weeks * 7;\n    duration.specifiedWeeks = true;\n  }\n  return duration;\n}\n// Equality\nfunction durationsEqual(d0, d1) {\n  return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;\n}\nfunction asCleanDays(dur) {\n  if (!dur.years && !dur.months && !dur.milliseconds) {\n    return dur.days;\n  }\n  return 0;\n}\n// Simple Math\nfunction addDurations(d0, d1) {\n  return {\n    years: d0.years + d1.years,\n    months: d0.months + d1.months,\n    days: d0.days + d1.days,\n    milliseconds: d0.milliseconds + d1.milliseconds\n  };\n}\nfunction subtractDurations(d1, d0) {\n  return {\n    years: d1.years - d0.years,\n    months: d1.months - d0.months,\n    days: d1.days - d0.days,\n    milliseconds: d1.milliseconds - d0.milliseconds\n  };\n}\nfunction multiplyDuration(d, n) {\n  return {\n    years: d.years * n,\n    months: d.months * n,\n    days: d.days * n,\n    milliseconds: d.milliseconds * n\n  };\n}\n// Conversions\n// \"Rough\" because they are based on average-case Gregorian months/years\nfunction asRoughYears(dur) {\n  return asRoughDays(dur) / 365;\n}\nfunction asRoughMonths(dur) {\n  return asRoughDays(dur) / 30;\n}\nfunction asRoughDays(dur) {\n  return asRoughMs(dur) / 864e5;\n}\nfunction asRoughMinutes(dur) {\n  return asRoughMs(dur) / (1000 * 60);\n}\nfunction asRoughSeconds(dur) {\n  return asRoughMs(dur) / 1000;\n}\nfunction asRoughMs(dur) {\n  return dur.years * (365 * 864e5) + dur.months * (30 * 864e5) + dur.days * 864e5 + dur.milliseconds;\n}\n// Advanced Math\nfunction wholeDivideDurations(numerator, denominator) {\n  var res = null;\n  for (var i = 0; i < INTERNAL_UNITS.length; i += 1) {\n    var unit = INTERNAL_UNITS[i];\n    if (denominator[unit]) {\n      var localRes = numerator[unit] / denominator[unit];\n      if (!isInt(localRes) || res !== null && res !== localRes) {\n        return null;\n      }\n      res = localRes;\n    } else if (numerator[unit]) {\n      // needs to divide by something but can't!\n      return null;\n    }\n  }\n  return res;\n}\nfunction greatestDurationDenominator(dur) {\n  var ms = dur.milliseconds;\n  if (ms) {\n    if (ms % 1000 !== 0) {\n      return {\n        unit: 'millisecond',\n        value: ms\n      };\n    }\n    if (ms % (1000 * 60) !== 0) {\n      return {\n        unit: 'second',\n        value: ms / 1000\n      };\n    }\n    if (ms % (1000 * 60 * 60) !== 0) {\n      return {\n        unit: 'minute',\n        value: ms / (1000 * 60)\n      };\n    }\n    if (ms) {\n      return {\n        unit: 'hour',\n        value: ms / (1000 * 60 * 60)\n      };\n    }\n  }\n  if (dur.days) {\n    if (dur.specifiedWeeks && dur.days % 7 === 0) {\n      return {\n        unit: 'week',\n        value: dur.days / 7\n      };\n    }\n    return {\n      unit: 'day',\n      value: dur.days\n    };\n  }\n  if (dur.months) {\n    return {\n      unit: 'month',\n      value: dur.months\n    };\n  }\n  if (dur.years) {\n    return {\n      unit: 'year',\n      value: dur.years\n    };\n  }\n  return {\n    unit: 'millisecond',\n    value: 0\n  };\n}\n\n// TODO: new util arrayify?\nfunction removeExact(array, exactVal) {\n  var removeCnt = 0;\n  var i = 0;\n  while (i < array.length) {\n    if (array[i] === exactVal) {\n      array.splice(i, 1);\n      removeCnt += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return removeCnt;\n}\nfunction isArraysEqual(a0, a1, equalityFunc) {\n  if (a0 === a1) {\n    return true;\n  }\n  var len = a0.length;\n  var i;\n  if (len !== a1.length) {\n    // not array? or not same length?\n    return false;\n  }\n  for (i = 0; i < len; i += 1) {\n    if (!(equalityFunc ? equalityFunc(a0[i], a1[i]) : a0[i] === a1[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nvar DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n// Adding\nfunction addWeeks(m, n) {\n  var a = dateToUtcArray(m);\n  a[2] += n * 7;\n  return arrayToUtcDate(a);\n}\nfunction addDays(m, n) {\n  var a = dateToUtcArray(m);\n  a[2] += n;\n  return arrayToUtcDate(a);\n}\nfunction addMs(m, n) {\n  var a = dateToUtcArray(m);\n  a[6] += n;\n  return arrayToUtcDate(a);\n}\n// Diffing (all return floats)\n// TODO: why not use ranges?\nfunction diffWeeks(m0, m1) {\n  return diffDays(m0, m1) / 7;\n}\nfunction diffDays(m0, m1) {\n  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);\n}\nfunction diffHours(m0, m1) {\n  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);\n}\nfunction diffMinutes(m0, m1) {\n  return (m1.valueOf() - m0.valueOf()) / (1000 * 60);\n}\nfunction diffSeconds(m0, m1) {\n  return (m1.valueOf() - m0.valueOf()) / 1000;\n}\nfunction diffDayAndTime(m0, m1) {\n  var m0day = startOfDay(m0);\n  var m1day = startOfDay(m1);\n  return {\n    years: 0,\n    months: 0,\n    days: Math.round(diffDays(m0day, m1day)),\n    milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())\n  };\n}\n// Diffing Whole Units\nfunction diffWholeWeeks(m0, m1) {\n  var d = diffWholeDays(m0, m1);\n  if (d !== null && d % 7 === 0) {\n    return d / 7;\n  }\n  return null;\n}\nfunction diffWholeDays(m0, m1) {\n  if (timeAsMs(m0) === timeAsMs(m1)) {\n    return Math.round(diffDays(m0, m1));\n  }\n  return null;\n}\n// Start-Of\nfunction startOfDay(m) {\n  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate()]);\n}\nfunction startOfHour(m) {\n  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours()]);\n}\nfunction startOfMinute(m) {\n  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes()]);\n}\nfunction startOfSecond(m) {\n  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes(), m.getUTCSeconds()]);\n}\n// Week Computation\nfunction weekOfYear(marker, dow, doy) {\n  var y = marker.getUTCFullYear();\n  var w = weekOfGivenYear(marker, y, dow, doy);\n  if (w < 1) {\n    return weekOfGivenYear(marker, y - 1, dow, doy);\n  }\n  var nextW = weekOfGivenYear(marker, y + 1, dow, doy);\n  if (nextW >= 1) {\n    return Math.min(w, nextW);\n  }\n  return w;\n}\nfunction weekOfGivenYear(marker, year, dow, doy) {\n  var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);\n  var dayStart = startOfDay(marker);\n  var days = Math.round(diffDays(firstWeekStart, dayStart));\n  return Math.floor(days / 7) + 1; // zero-indexed\n}\n// start-of-first-week - start-of-year\nfunction firstWeekOffset(year, dow, doy) {\n  // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n  var fwd = 7 + dow - doy;\n  // first-week day local weekday -- which local weekday is fwd\n  var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;\n  return -fwdlw + fwd - 1;\n}\n// Array Conversion\nfunction dateToLocalArray(date) {\n  return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];\n}\nfunction arrayToLocalDate(a) {\n  return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2],\n  // day of month\n  a[3] || 0, a[4] || 0, a[5] || 0);\n}\nfunction dateToUtcArray(date) {\n  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()];\n}\nfunction arrayToUtcDate(a) {\n  // according to web standards (and Safari), a month index is required.\n  // massage if only given a year.\n  if (a.length === 1) {\n    a = a.concat([0]);\n  }\n  return new Date(Date.UTC.apply(Date, _toConsumableArray(a)));\n}\n// Other Utils\nfunction isValidDate(m) {\n  return !isNaN(m.valueOf());\n}\nfunction timeAsMs(m) {\n  return m.getUTCHours() * 1000 * 60 * 60 + m.getUTCMinutes() * 1000 * 60 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();\n}\n\n// timeZoneOffset is in minutes\nfunction buildIsoString(marker, timeZoneOffset) {\n  var stripZeroTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var s = marker.toISOString();\n  s = s.replace('.000', '');\n  if (stripZeroTime) {\n    s = s.replace('T00:00:00Z', '');\n  }\n  if (s.length > 10) {\n    // time part wasn't stripped, can add timezone info\n    if (timeZoneOffset == null) {\n      s = s.replace('Z', '');\n    } else if (timeZoneOffset !== 0) {\n      s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));\n    }\n    // otherwise, its UTC-0 and we want to keep the Z\n  }\n\n  return s;\n}\n// formats the date, but with no time part\n// TODO: somehow merge with buildIsoString and stripZeroTime\n// TODO: rename. omit \"string\"\nfunction formatDayString(marker) {\n  return marker.toISOString().replace(/T.*$/, '');\n}\nfunction formatIsoMonthStr(marker) {\n  return marker.toISOString().match(/^\\d{4}-\\d{2}/)[0];\n}\n// TODO: use Date::toISOString and use everything after the T?\nfunction formatIsoTimeString(marker) {\n  return padStart(marker.getUTCHours(), 2) + ':' + padStart(marker.getUTCMinutes(), 2) + ':' + padStart(marker.getUTCSeconds(), 2);\n}\nfunction formatTimeZoneOffset(minutes) {\n  var doIso = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var sign = minutes < 0 ? '-' : '+';\n  var abs = Math.abs(minutes);\n  var hours = Math.floor(abs / 60);\n  var mins = Math.round(abs % 60);\n  if (doIso) {\n    return \"\".concat(sign + padStart(hours, 2), \":\").concat(padStart(mins, 2));\n  }\n  return \"GMT\".concat(sign).concat(hours).concat(mins ? \":\".concat(padStart(mins, 2)) : '');\n}\nfunction memoize(workerFunc, resEquality, teardownFunc) {\n  var currentArgs;\n  var currentRes;\n  return function () {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n    if (!currentArgs) {\n      currentRes = workerFunc.apply(this, newArgs);\n    } else if (!isArraysEqual(currentArgs, newArgs)) {\n      if (teardownFunc) {\n        teardownFunc(currentRes);\n      }\n      var res = workerFunc.apply(this, newArgs);\n      if (!resEquality || !resEquality(res, currentRes)) {\n        currentRes = res;\n      }\n    }\n    currentArgs = newArgs;\n    return currentRes;\n  };\n}\nfunction memoizeObjArg(workerFunc, resEquality, teardownFunc) {\n  var _this = this;\n  var currentArg;\n  var currentRes;\n  return function (newArg) {\n    if (!currentArg) {\n      currentRes = workerFunc.call(_this, newArg);\n    } else if (!isPropsEqual(currentArg, newArg)) {\n      if (teardownFunc) {\n        teardownFunc(currentRes);\n      }\n      var res = workerFunc.call(_this, newArg);\n      if (!resEquality || !resEquality(res, currentRes)) {\n        currentRes = res;\n      }\n    }\n    currentArg = newArg;\n    return currentRes;\n  };\n}\nfunction memoizeArraylike(\n// used at all?\nworkerFunc, resEquality, teardownFunc) {\n  var _this2 = this;\n  var currentArgSets = [];\n  var currentResults = [];\n  return function (newArgSets) {\n    var currentLen = currentArgSets.length;\n    var newLen = newArgSets.length;\n    var i = 0;\n    for (; i < currentLen; i += 1) {\n      if (!newArgSets[i]) {\n        // one of the old sets no longer exists\n        if (teardownFunc) {\n          teardownFunc(currentResults[i]);\n        }\n      } else if (!isArraysEqual(currentArgSets[i], newArgSets[i])) {\n        if (teardownFunc) {\n          teardownFunc(currentResults[i]);\n        }\n        var res = workerFunc.apply(_this2, newArgSets[i]);\n        if (!resEquality || !resEquality(res, currentResults[i])) {\n          currentResults[i] = res;\n        }\n      }\n    }\n    for (; i < newLen; i += 1) {\n      currentResults[i] = workerFunc.apply(_this2, newArgSets[i]);\n    }\n    currentArgSets = newArgSets;\n    currentResults.splice(newLen); // remove excess\n    return currentResults;\n  };\n}\nfunction memoizeHashlike(workerFunc, resEquality, teardownFunc) {\n  var _this3 = this;\n  var currentArgHash = {};\n  var currentResHash = {};\n  return function (newArgHash) {\n    var newResHash = {};\n    for (var key in newArgHash) {\n      if (!currentResHash[key]) {\n        newResHash[key] = workerFunc.apply(_this3, newArgHash[key]);\n      } else if (!isArraysEqual(currentArgHash[key], newArgHash[key])) {\n        if (teardownFunc) {\n          teardownFunc(currentResHash[key]);\n        }\n        var res = workerFunc.apply(_this3, newArgHash[key]);\n        newResHash[key] = resEquality && resEquality(res, currentResHash[key]) ? currentResHash[key] : res;\n      } else {\n        newResHash[key] = currentResHash[key];\n      }\n    }\n    currentArgHash = newArgHash;\n    currentResHash = newResHash;\n    return newResHash;\n  };\n}\nvar EXTENDED_SETTINGS_AND_SEVERITIES = {\n  week: 3,\n  separator: 0,\n  omitZeroMinute: 0,\n  meridiem: 0,\n  omitCommas: 0\n};\nvar STANDARD_DATE_PROP_SEVERITIES = {\n  timeZoneName: 7,\n  era: 6,\n  year: 5,\n  month: 4,\n  day: 2,\n  weekday: 2,\n  hour: 1,\n  minute: 1,\n  second: 1\n};\nvar MERIDIEM_RE = /\\s*([ap])\\.?m\\.?/i; // eats up leading spaces too\nvar COMMA_RE = /,/g; // we need re for globalness\nvar MULTI_SPACE_RE = /\\s+/g;\nvar LTR_RE = /\\u200e/g; // control character\nvar UTC_RE = /UTC|GMT/;\nvar NativeFormatter = /*#__PURE__*/function () {\n  function NativeFormatter(formatSettings) {\n    _classCallCheck(this, NativeFormatter);\n    var standardDateProps = {};\n    var extendedSettings = {};\n    var severity = 0;\n    for (var name in formatSettings) {\n      if (name in EXTENDED_SETTINGS_AND_SEVERITIES) {\n        extendedSettings[name] = formatSettings[name];\n        severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name], severity);\n      } else {\n        standardDateProps[name] = formatSettings[name];\n        if (name in STANDARD_DATE_PROP_SEVERITIES) {\n          // TODO: what about hour12? no severity\n          severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name], severity);\n        }\n      }\n    }\n    this.standardDateProps = standardDateProps;\n    this.extendedSettings = extendedSettings;\n    this.severity = severity;\n    this.buildFormattingFunc = memoize(buildFormattingFunc);\n  }\n  return _createClass(NativeFormatter, [{\n    key: \"format\",\n    value: function format(date, context) {\n      return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);\n    }\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end, context, betterDefaultSeparator) {\n      var standardDateProps = this.standardDateProps,\n        extendedSettings = this.extendedSettings;\n      var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);\n      if (!diffSeverity) {\n        return this.format(start, context);\n      }\n      var biggestUnitForPartial = diffSeverity;\n      if (biggestUnitForPartial > 1 && (\n      // the two dates are different in a way that's larger scale than time\n      standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') && (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') && (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {\n        biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time\n      }\n\n      var full0 = this.format(start, context);\n      var full1 = this.format(end, context);\n      if (full0 === full1) {\n        return full0;\n      }\n      var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);\n      var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);\n      var partial0 = partialFormattingFunc(start);\n      var partial1 = partialFormattingFunc(end);\n      var insertion = findCommonInsertion(full0, partial0, full1, partial1);\n      var separator = extendedSettings.separator || betterDefaultSeparator || context.defaultSeparator || '';\n      if (insertion) {\n        return insertion.before + partial0 + separator + partial1 + insertion.after;\n      }\n      return full0 + separator + full1;\n    }\n  }, {\n    key: \"getLargestUnit\",\n    value: function getLargestUnit() {\n      switch (this.severity) {\n        case 7:\n        case 6:\n        case 5:\n          return 'year';\n        case 4:\n          return 'month';\n        case 3:\n          return 'week';\n        case 2:\n          return 'day';\n        default:\n          return 'time';\n        // really?\n      }\n    }\n  }]);\n}();\n\nfunction buildFormattingFunc(standardDateProps, extendedSettings, context) {\n  var standardDatePropCnt = Object.keys(standardDateProps).length;\n  if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {\n    return function (date) {\n      return formatTimeZoneOffset(date.timeZoneOffset);\n    };\n  }\n  if (standardDatePropCnt === 0 && extendedSettings.week) {\n    return function (date) {\n      return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekText, context.weekTextLong, context.locale, extendedSettings.week);\n    };\n  }\n  return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);\n}\nfunction buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {\n  standardDateProps = Object.assign({}, standardDateProps); // copy\n  extendedSettings = Object.assign({}, extendedSettings); // copy\n  sanitizeSettings(standardDateProps, extendedSettings);\n  standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers\n  var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);\n  var zeroFormat; // needed?\n  if (extendedSettings.omitZeroMinute) {\n    var zeroProps = Object.assign({}, standardDateProps);\n    delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings\n    zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);\n  }\n  return function (date) {\n    var marker = date.marker;\n    var format;\n    if (zeroFormat && !marker.getUTCMinutes()) {\n      format = zeroFormat;\n    } else {\n      format = normalFormat;\n    }\n    var s = format.format(marker);\n    return postProcess(s, date, standardDateProps, extendedSettings, context);\n  };\n}\nfunction sanitizeSettings(standardDateProps, extendedSettings) {\n  // deal with a browser inconsistency where formatting the timezone\n  // requires that the hour/minute be present.\n  if (standardDateProps.timeZoneName) {\n    if (!standardDateProps.hour) {\n      standardDateProps.hour = '2-digit';\n    }\n    if (!standardDateProps.minute) {\n      standardDateProps.minute = '2-digit';\n    }\n  }\n  // only support short timezone names\n  if (standardDateProps.timeZoneName === 'long') {\n    standardDateProps.timeZoneName = 'short';\n  }\n  // if requesting to display seconds, MUST display minutes\n  if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {\n    delete extendedSettings.omitZeroMinute;\n  }\n}\nfunction postProcess(s, date, standardDateProps, extendedSettings, context) {\n  s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes\n  if (standardDateProps.timeZoneName === 'short') {\n    s = injectTzoStr(s, context.timeZone === 'UTC' || date.timeZoneOffset == null ? 'UTC' :\n    // important to normalize for IE, which does \"GMT\"\n    formatTimeZoneOffset(date.timeZoneOffset));\n  }\n  if (extendedSettings.omitCommas) {\n    s = s.replace(COMMA_RE, '').trim();\n  }\n  if (extendedSettings.omitZeroMinute) {\n    s = s.replace(':00', ''); // zeroFormat doesn't always achieve this\n  }\n  // ^ do anything that might create adjacent spaces before this point,\n  // because MERIDIEM_RE likes to eat up loading spaces\n  if (extendedSettings.meridiem === false) {\n    s = s.replace(MERIDIEM_RE, '').trim();\n  } else if (extendedSettings.meridiem === 'narrow') {\n    // a/p\n    s = s.replace(MERIDIEM_RE, function (m0, m1) {\n      return m1.toLocaleLowerCase();\n    });\n  } else if (extendedSettings.meridiem === 'short') {\n    // am/pm\n    s = s.replace(MERIDIEM_RE, function (m0, m1) {\n      return \"\".concat(m1.toLocaleLowerCase(), \"m\");\n    });\n  } else if (extendedSettings.meridiem === 'lowercase') {\n    // other meridiem transformers already converted to lowercase\n    s = s.replace(MERIDIEM_RE, function (m0) {\n      return m0.toLocaleLowerCase();\n    });\n  }\n  s = s.replace(MULTI_SPACE_RE, ' ');\n  s = s.trim();\n  return s;\n}\nfunction injectTzoStr(s, tzoStr) {\n  var replaced = false;\n  s = s.replace(UTC_RE, function () {\n    replaced = true;\n    return tzoStr;\n  });\n  // IE11 doesn't include UTC/GMT in the original string, so append to end\n  if (!replaced) {\n    s += \" \".concat(tzoStr);\n  }\n  return s;\n}\nfunction formatWeekNumber(num, weekText, weekTextLong, locale, display) {\n  var parts = [];\n  if (display === 'long') {\n    parts.push(weekTextLong);\n  } else if (display === 'short' || display === 'narrow') {\n    parts.push(weekText);\n  }\n  if (display === 'long' || display === 'short') {\n    parts.push(' ');\n  }\n  parts.push(locale.simpleNumberFormat.format(num));\n  if (locale.options.direction === 'rtl') {\n    // TODO: use control characters instead?\n    parts.reverse();\n  }\n  return parts.join('');\n}\n// Range Formatting Utils\n// 0 = exactly the same\n// 1 = different by time\n// and bigger\nfunction computeMarkerDiffSeverity(d0, d1, ca) {\n  if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {\n    return 5;\n  }\n  if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {\n    return 4;\n  }\n  if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {\n    return 2;\n  }\n  if (timeAsMs(d0) !== timeAsMs(d1)) {\n    return 1;\n  }\n  return 0;\n}\nfunction computePartialFormattingOptions(options, biggestUnit) {\n  var partialOptions = {};\n  for (var name in options) {\n    if (!(name in STANDARD_DATE_PROP_SEVERITIES) ||\n    // not a date part prop (like timeZone)\n    STANDARD_DATE_PROP_SEVERITIES[name] <= biggestUnit) {\n      partialOptions[name] = options[name];\n    }\n  }\n  return partialOptions;\n}\nfunction findCommonInsertion(full0, partial0, full1, partial1) {\n  var i0 = 0;\n  while (i0 < full0.length) {\n    var found0 = full0.indexOf(partial0, i0);\n    if (found0 === -1) {\n      break;\n    }\n    var before0 = full0.substr(0, found0);\n    i0 = found0 + partial0.length;\n    var after0 = full0.substr(i0);\n    var i1 = 0;\n    while (i1 < full1.length) {\n      var found1 = full1.indexOf(partial1, i1);\n      if (found1 === -1) {\n        break;\n      }\n      var before1 = full1.substr(0, found1);\n      i1 = found1 + partial1.length;\n      var after1 = full1.substr(i1);\n      if (before0 === before1 && after0 === after1) {\n        return {\n          before: before0,\n          after: after0\n        };\n      }\n    }\n  }\n  return null;\n}\nfunction expandZonedMarker(dateInfo, calendarSystem) {\n  var a = calendarSystem.markerToArray(dateInfo.marker);\n  return {\n    marker: dateInfo.marker,\n    timeZoneOffset: dateInfo.timeZoneOffset,\n    array: a,\n    year: a[0],\n    month: a[1],\n    day: a[2],\n    hour: a[3],\n    minute: a[4],\n    second: a[5],\n    millisecond: a[6]\n  };\n}\nfunction createVerboseFormattingArg(start, end, context, betterDefaultSeparator) {\n  var startInfo = expandZonedMarker(start, context.calendarSystem);\n  var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;\n  return {\n    date: startInfo,\n    start: startInfo,\n    end: endInfo,\n    timeZone: context.timeZone,\n    localeCodes: context.locale.codes,\n    defaultSeparator: betterDefaultSeparator || context.defaultSeparator\n  };\n}\n\n/*\nTODO: fix the terminology of \"formatter\" vs \"formatting func\"\n*/\n/*\nAt the time of instantiation, this object does not know which cmd-formatting system it will use.\nIt receives this at the time of formatting, as a setting.\n*/\nvar CmdFormatter = /*#__PURE__*/function () {\n  function CmdFormatter(cmdStr) {\n    _classCallCheck(this, CmdFormatter);\n    this.cmdStr = cmdStr;\n  }\n  return _createClass(CmdFormatter, [{\n    key: \"format\",\n    value: function format(date, context, betterDefaultSeparator) {\n      return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, betterDefaultSeparator));\n    }\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end, context, betterDefaultSeparator) {\n      return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, betterDefaultSeparator));\n    }\n  }]);\n}();\nvar FuncFormatter = /*#__PURE__*/function () {\n  function FuncFormatter(func) {\n    _classCallCheck(this, FuncFormatter);\n    this.func = func;\n  }\n  return _createClass(FuncFormatter, [{\n    key: \"format\",\n    value: function format(date, context, betterDefaultSeparator) {\n      return this.func(createVerboseFormattingArg(date, null, context, betterDefaultSeparator));\n    }\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end, context, betterDefaultSeparator) {\n      return this.func(createVerboseFormattingArg(start, end, context, betterDefaultSeparator));\n    }\n  }]);\n}();\nfunction createFormatter(input) {\n  if (_typeof(input) === 'object' && input) {\n    // non-null object\n    return new NativeFormatter(input);\n  }\n  if (typeof input === 'string') {\n    return new CmdFormatter(input);\n  }\n  if (typeof input === 'function') {\n    return new FuncFormatter(input);\n  }\n  return null;\n}\n\n// base options\n// ------------\nvar BASE_OPTION_REFINERS = {\n  navLinkDayClick: identity,\n  navLinkWeekClick: identity,\n  duration: createDuration,\n  bootstrapFontAwesome: identity,\n  buttonIcons: identity,\n  customButtons: identity,\n  defaultAllDayEventDuration: createDuration,\n  defaultTimedEventDuration: createDuration,\n  nextDayThreshold: createDuration,\n  scrollTime: createDuration,\n  scrollTimeReset: Boolean,\n  slotMinTime: createDuration,\n  slotMaxTime: createDuration,\n  dayPopoverFormat: createFormatter,\n  slotDuration: createDuration,\n  snapDuration: createDuration,\n  headerToolbar: identity,\n  footerToolbar: identity,\n  defaultRangeSeparator: String,\n  titleRangeSeparator: String,\n  forceEventDuration: Boolean,\n  dayHeaders: Boolean,\n  dayHeaderFormat: createFormatter,\n  dayHeaderClassNames: identity,\n  dayHeaderContent: identity,\n  dayHeaderDidMount: identity,\n  dayHeaderWillUnmount: identity,\n  dayCellClassNames: identity,\n  dayCellContent: identity,\n  dayCellDidMount: identity,\n  dayCellWillUnmount: identity,\n  initialView: String,\n  aspectRatio: Number,\n  weekends: Boolean,\n  weekNumberCalculation: identity,\n  weekNumbers: Boolean,\n  weekNumberClassNames: identity,\n  weekNumberContent: identity,\n  weekNumberDidMount: identity,\n  weekNumberWillUnmount: identity,\n  editable: Boolean,\n  viewClassNames: identity,\n  viewDidMount: identity,\n  viewWillUnmount: identity,\n  nowIndicator: Boolean,\n  nowIndicatorClassNames: identity,\n  nowIndicatorContent: identity,\n  nowIndicatorDidMount: identity,\n  nowIndicatorWillUnmount: identity,\n  showNonCurrentDates: Boolean,\n  lazyFetching: Boolean,\n  startParam: String,\n  endParam: String,\n  timeZoneParam: String,\n  timeZone: String,\n  locales: identity,\n  locale: identity,\n  themeSystem: String,\n  dragRevertDuration: Number,\n  dragScroll: Boolean,\n  allDayMaintainDuration: Boolean,\n  unselectAuto: Boolean,\n  dropAccept: identity,\n  eventOrder: parseFieldSpecs,\n  eventOrderStrict: Boolean,\n  handleWindowResize: Boolean,\n  windowResizeDelay: Number,\n  longPressDelay: Number,\n  eventDragMinDistance: Number,\n  expandRows: Boolean,\n  height: identity,\n  contentHeight: identity,\n  direction: String,\n  weekNumberFormat: createFormatter,\n  eventResizableFromStart: Boolean,\n  displayEventTime: Boolean,\n  displayEventEnd: Boolean,\n  weekText: String,\n  weekTextLong: String,\n  progressiveEventRendering: Boolean,\n  businessHours: identity,\n  initialDate: identity,\n  now: identity,\n  eventDataTransform: identity,\n  stickyHeaderDates: identity,\n  stickyFooterScrollbar: identity,\n  viewHeight: identity,\n  defaultAllDay: Boolean,\n  eventSourceFailure: identity,\n  eventSourceSuccess: identity,\n  eventDisplay: String,\n  eventStartEditable: Boolean,\n  eventDurationEditable: Boolean,\n  eventOverlap: identity,\n  eventConstraint: identity,\n  eventAllow: identity,\n  eventBackgroundColor: String,\n  eventBorderColor: String,\n  eventTextColor: String,\n  eventColor: String,\n  eventClassNames: identity,\n  eventContent: identity,\n  eventDidMount: identity,\n  eventWillUnmount: identity,\n  selectConstraint: identity,\n  selectOverlap: identity,\n  selectAllow: identity,\n  droppable: Boolean,\n  unselectCancel: String,\n  slotLabelFormat: identity,\n  slotLaneClassNames: identity,\n  slotLaneContent: identity,\n  slotLaneDidMount: identity,\n  slotLaneWillUnmount: identity,\n  slotLabelClassNames: identity,\n  slotLabelContent: identity,\n  slotLabelDidMount: identity,\n  slotLabelWillUnmount: identity,\n  dayMaxEvents: identity,\n  dayMaxEventRows: identity,\n  dayMinWidth: Number,\n  slotLabelInterval: createDuration,\n  allDayText: String,\n  allDayClassNames: identity,\n  allDayContent: identity,\n  allDayDidMount: identity,\n  allDayWillUnmount: identity,\n  slotMinWidth: Number,\n  navLinks: Boolean,\n  eventTimeFormat: createFormatter,\n  rerenderDelay: Number,\n  moreLinkText: identity,\n  moreLinkHint: identity,\n  selectMinDistance: Number,\n  selectable: Boolean,\n  selectLongPressDelay: Number,\n  eventLongPressDelay: Number,\n  selectMirror: Boolean,\n  eventMaxStack: Number,\n  eventMinHeight: Number,\n  eventMinWidth: Number,\n  eventShortHeight: Number,\n  slotEventOverlap: Boolean,\n  plugins: identity,\n  firstDay: Number,\n  dayCount: Number,\n  dateAlignment: String,\n  dateIncrement: createDuration,\n  hiddenDays: identity,\n  fixedWeekCount: Boolean,\n  validRange: identity,\n  visibleRange: identity,\n  titleFormat: identity,\n  eventInteractive: Boolean,\n  // only used by list-view, but languages define the value, so we need it in base options\n  noEventsText: String,\n  viewHint: identity,\n  navLinkHint: identity,\n  closeHint: String,\n  timeHint: String,\n  eventHint: String,\n  moreLinkClick: identity,\n  moreLinkClassNames: identity,\n  moreLinkContent: identity,\n  moreLinkDidMount: identity,\n  moreLinkWillUnmount: identity,\n  monthStartFormat: createFormatter,\n  // for connectors\n  // (can't be part of plugin system b/c must be provided at runtime)\n  handleCustomRendering: identity,\n  customRenderingMetaMap: identity,\n  customRenderingReplaces: Boolean\n};\n// do NOT give a type here. need `typeof BASE_OPTION_DEFAULTS` to give real results.\n// raw values.\nvar BASE_OPTION_DEFAULTS = {\n  eventDisplay: 'auto',\n  defaultRangeSeparator: ' - ',\n  titleRangeSeparator: \" \\u2013 \",\n  defaultTimedEventDuration: '01:00:00',\n  defaultAllDayEventDuration: {\n    day: 1\n  },\n  forceEventDuration: false,\n  nextDayThreshold: '00:00:00',\n  dayHeaders: true,\n  initialView: '',\n  aspectRatio: 1.35,\n  headerToolbar: {\n    start: 'title',\n    center: '',\n    end: 'today prev,next'\n  },\n  weekends: true,\n  weekNumbers: false,\n  weekNumberCalculation: 'local',\n  editable: false,\n  nowIndicator: false,\n  scrollTime: '06:00:00',\n  scrollTimeReset: true,\n  slotMinTime: '00:00:00',\n  slotMaxTime: '24:00:00',\n  showNonCurrentDates: true,\n  lazyFetching: true,\n  startParam: 'start',\n  endParam: 'end',\n  timeZoneParam: 'timeZone',\n  timeZone: 'local',\n  locales: [],\n  locale: '',\n  themeSystem: 'standard',\n  dragRevertDuration: 500,\n  dragScroll: true,\n  allDayMaintainDuration: false,\n  unselectAuto: true,\n  dropAccept: '*',\n  eventOrder: 'start,-duration,allDay,title',\n  dayPopoverFormat: {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  },\n  handleWindowResize: true,\n  windowResizeDelay: 100,\n  longPressDelay: 1000,\n  eventDragMinDistance: 5,\n  expandRows: false,\n  navLinks: false,\n  selectable: false,\n  eventMinHeight: 15,\n  eventMinWidth: 30,\n  eventShortHeight: 30,\n  monthStartFormat: {\n    month: 'long',\n    day: 'numeric'\n  }\n};\n// calendar listeners\n// ------------------\nvar CALENDAR_LISTENER_REFINERS = {\n  datesSet: identity,\n  eventsSet: identity,\n  eventAdd: identity,\n  eventChange: identity,\n  eventRemove: identity,\n  windowResize: identity,\n  eventClick: identity,\n  eventMouseEnter: identity,\n  eventMouseLeave: identity,\n  select: identity,\n  unselect: identity,\n  loading: identity,\n  // internal\n  _unmount: identity,\n  _beforeprint: identity,\n  _afterprint: identity,\n  _noEventDrop: identity,\n  _noEventResize: identity,\n  _resize: identity,\n  _scrollRequest: identity\n};\n// calendar-specific options\n// -------------------------\nvar CALENDAR_OPTION_REFINERS = {\n  buttonText: identity,\n  buttonHints: identity,\n  views: identity,\n  plugins: identity,\n  initialEvents: identity,\n  events: identity,\n  eventSources: identity\n};\nvar COMPLEX_OPTION_COMPARATORS = _defineProperty({\n  headerToolbar: isMaybeObjectsEqual,\n  footerToolbar: isMaybeObjectsEqual,\n  buttonText: isMaybeObjectsEqual,\n  buttonHints: isMaybeObjectsEqual,\n  buttonIcons: isMaybeObjectsEqual,\n  dateIncrement: isMaybeObjectsEqual,\n  plugins: isMaybeArraysEqual,\n  events: isMaybeArraysEqual,\n  eventSources: isMaybeArraysEqual\n}, 'resources', isMaybeArraysEqual);\nfunction isMaybeObjectsEqual(a, b) {\n  if (_typeof(a) === 'object' && _typeof(b) === 'object' && a && b) {\n    // both non-null objects\n    return isPropsEqual(a, b);\n  }\n  return a === b;\n}\nfunction isMaybeArraysEqual(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return isArraysEqual(a, b);\n  }\n  return a === b;\n}\n// view-specific options\n// ---------------------\nvar VIEW_OPTION_REFINERS = {\n  type: String,\n  component: identity,\n  buttonText: String,\n  buttonTextKey: String,\n  dateProfileGeneratorClass: identity,\n  usesMinMaxTime: Boolean,\n  classNames: identity,\n  content: identity,\n  didMount: identity,\n  willUnmount: identity\n};\n// util funcs\n// ----------------------------------------------------------------------------------------------------\nfunction mergeRawOptions(optionSets) {\n  return mergeProps(optionSets, COMPLEX_OPTION_COMPARATORS);\n}\nfunction refineProps(input, refiners) {\n  var refined = {};\n  var extra = {};\n  for (var propName in refiners) {\n    if (propName in input) {\n      refined[propName] = refiners[propName](input[propName]);\n    }\n  }\n  for (var _propName in input) {\n    if (!(_propName in refiners)) {\n      extra[_propName] = input[_propName];\n    }\n  }\n  return {\n    refined: refined,\n    extra: extra\n  };\n}\nfunction identity(raw) {\n  return raw;\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n// Merges an array of objects into a single object.\n// The second argument allows for an array of property names who's object values will be merged together.\nfunction mergeProps(propObjs, complexPropsMap) {\n  var dest = {};\n  if (complexPropsMap) {\n    for (var name in complexPropsMap) {\n      if (complexPropsMap[name] === isMaybeObjectsEqual) {\n        // implies that it's object-mergeable\n        var complexObjs = [];\n        // collect the trailing object values, stopping when a non-object is discovered\n        for (var i = propObjs.length - 1; i >= 0; i -= 1) {\n          var val = propObjs[i][name];\n          if (_typeof(val) === 'object' && val) {\n            // non-null object\n            complexObjs.unshift(val);\n          } else if (val !== undefined) {\n            dest[name] = val; // if there were no objects, this value will be used\n            break;\n          }\n        }\n        // if the trailing values were objects, use the merged value\n        if (complexObjs.length) {\n          dest[name] = mergeProps(complexObjs);\n        }\n      }\n    }\n  }\n  // copy values into the destination, going from last to first\n  for (var _i = propObjs.length - 1; _i >= 0; _i -= 1) {\n    var props = propObjs[_i];\n    for (var _name in props) {\n      if (!(_name in dest)) {\n        // if already assigned by previous props or complex props, don't reassign\n        dest[_name] = props[_name];\n      }\n    }\n  }\n  return dest;\n}\nfunction filterHash(hash, func) {\n  var filtered = {};\n  for (var key in hash) {\n    if (func(hash[key], key)) {\n      filtered[key] = hash[key];\n    }\n  }\n  return filtered;\n}\nfunction mapHash(hash, func) {\n  var newHash = {};\n  for (var key in hash) {\n    newHash[key] = func(hash[key], key);\n  }\n  return newHash;\n}\nfunction arrayToHash(a) {\n  var hash = {};\n  var _iterator2 = _createForOfIteratorHelper(a),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var item = _step2.value;\n      hash[item] = true;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return hash;\n}\n// TODO: reassess browser support\n// https://caniuse.com/?search=object.values\nfunction hashValuesToArray(obj) {\n  var a = [];\n  for (var key in obj) {\n    a.push(obj[key]);\n  }\n  return a;\n}\nfunction isPropsEqual(obj0, obj1) {\n  if (obj0 === obj1) {\n    return true;\n  }\n  for (var key in obj0) {\n    if (hasOwnProperty.call(obj0, key)) {\n      if (!(key in obj1)) {\n        return false;\n      }\n    }\n  }\n  for (var _key2 in obj1) {\n    if (hasOwnProperty.call(obj1, _key2)) {\n      if (obj0[_key2] !== obj1[_key2]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar HANDLER_RE = /^on[A-Z]/;\nfunction isNonHandlerPropsEqual(obj0, obj1) {\n  var keys = getUnequalProps(obj0, obj1);\n  var _iterator3 = _createForOfIteratorHelper(keys),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var key = _step3.value;\n      if (!HANDLER_RE.test(key)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return true;\n}\nfunction getUnequalProps(obj0, obj1) {\n  var keys = [];\n  for (var key in obj0) {\n    if (hasOwnProperty.call(obj0, key)) {\n      if (!(key in obj1)) {\n        keys.push(key);\n      }\n    }\n  }\n  for (var _key3 in obj1) {\n    if (hasOwnProperty.call(obj1, _key3)) {\n      if (obj0[_key3] !== obj1[_key3]) {\n        keys.push(_key3);\n      }\n    }\n  }\n  return keys;\n}\nfunction compareObjs(oldProps, newProps) {\n  var equalityFuncs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (oldProps === newProps) {\n    return true;\n  }\n  for (var key in newProps) {\n    if (key in oldProps && isObjValsEqual(oldProps[key], newProps[key], equalityFuncs[key])) ;else {\n      return false;\n    }\n  }\n  // check for props that were omitted in the new\n  for (var _key4 in oldProps) {\n    if (!(_key4 in newProps)) {\n      return false;\n    }\n  }\n  return true;\n}\n/*\nassumed \"true\" equality for handler names like \"onReceiveSomething\"\n*/\nfunction isObjValsEqual(val0, val1, comparator) {\n  if (val0 === val1 || comparator === true) {\n    return true;\n  }\n  if (comparator) {\n    return comparator(val0, val1);\n  }\n  return false;\n}\nfunction collectFromHash(hash) {\n  var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var endIndex = arguments.length > 2 ? arguments[2] : undefined;\n  var step = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var res = [];\n  if (endIndex == null) {\n    endIndex = Object.keys(hash).length;\n  }\n  for (var i = startIndex; i < endIndex; i += step) {\n    var val = hash[i];\n    if (val !== undefined) {\n      // will disregard undefined for sparse arrays\n      res.push(val);\n    }\n  }\n  return res;\n}\nvar calendarSystemClassMap = {};\nfunction registerCalendarSystem(name, theClass) {\n  calendarSystemClassMap[name] = theClass;\n}\nfunction createCalendarSystem(name) {\n  return new calendarSystemClassMap[name]();\n}\nvar GregorianCalendarSystem = /*#__PURE__*/function () {\n  function GregorianCalendarSystem() {\n    _classCallCheck(this, GregorianCalendarSystem);\n  }\n  return _createClass(GregorianCalendarSystem, [{\n    key: \"getMarkerYear\",\n    value: function getMarkerYear(d) {\n      return d.getUTCFullYear();\n    }\n  }, {\n    key: \"getMarkerMonth\",\n    value: function getMarkerMonth(d) {\n      return d.getUTCMonth();\n    }\n  }, {\n    key: \"getMarkerDay\",\n    value: function getMarkerDay(d) {\n      return d.getUTCDate();\n    }\n  }, {\n    key: \"arrayToMarker\",\n    value: function arrayToMarker(arr) {\n      return arrayToUtcDate(arr);\n    }\n  }, {\n    key: \"markerToArray\",\n    value: function markerToArray(marker) {\n      return dateToUtcArray(marker);\n    }\n  }]);\n}();\nregisterCalendarSystem('gregory', GregorianCalendarSystem);\nvar ISO_RE = /^\\s*(\\d{4})(-?(\\d{2})(-?(\\d{2})([T ](\\d{2}):?(\\d{2})(:?(\\d{2})(\\.(\\d+))?)?(Z|(([-+])(\\d{2})(:?(\\d{2}))?))?)?)?)?$/;\nfunction _parse(str) {\n  var m = ISO_RE.exec(str);\n  if (m) {\n    var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number(\"0.\".concat(m[12])) * 1000 : 0));\n    if (isValidDate(marker)) {\n      var timeZoneOffset = null;\n      if (m[13]) {\n        timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));\n      }\n      return {\n        marker: marker,\n        isTimeUnspecified: !m[6],\n        timeZoneOffset: timeZoneOffset\n      };\n    }\n  }\n  return null;\n}\nvar DateEnv = /*#__PURE__*/function () {\n  function DateEnv(settings) {\n    _classCallCheck(this, DateEnv);\n    var timeZone = this.timeZone = settings.timeZone;\n    var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';\n    if (settings.namedTimeZoneImpl && isNamedTimeZone) {\n      this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);\n    }\n    this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);\n    this.calendarSystem = createCalendarSystem(settings.calendarSystem);\n    this.locale = settings.locale;\n    this.weekDow = settings.locale.week.dow;\n    this.weekDoy = settings.locale.week.doy;\n    if (settings.weekNumberCalculation === 'ISO') {\n      this.weekDow = 1;\n      this.weekDoy = 4;\n    }\n    if (typeof settings.firstDay === 'number') {\n      this.weekDow = settings.firstDay;\n    }\n    if (typeof settings.weekNumberCalculation === 'function') {\n      this.weekNumberFunc = settings.weekNumberCalculation;\n    }\n    this.weekText = settings.weekText != null ? settings.weekText : settings.locale.options.weekText;\n    this.weekTextLong = (settings.weekTextLong != null ? settings.weekTextLong : settings.locale.options.weekTextLong) || this.weekText;\n    this.cmdFormatter = settings.cmdFormatter;\n    this.defaultSeparator = settings.defaultSeparator;\n  }\n  // Creating / Parsing\n  return _createClass(DateEnv, [{\n    key: \"createMarker\",\n    value: function createMarker(input) {\n      var meta = this.createMarkerMeta(input);\n      if (meta === null) {\n        return null;\n      }\n      return meta.marker;\n    }\n  }, {\n    key: \"createNowMarker\",\n    value: function createNowMarker() {\n      if (this.canComputeOffset) {\n        return this.timestampToMarker(new Date().valueOf());\n      }\n      // if we can't compute the current date val for a timezone,\n      // better to give the current local date vals than UTC\n      return arrayToUtcDate(dateToLocalArray(new Date()));\n    }\n  }, {\n    key: \"createMarkerMeta\",\n    value: function createMarkerMeta(input) {\n      if (typeof input === 'string') {\n        return this.parse(input);\n      }\n      var marker = null;\n      if (typeof input === 'number') {\n        marker = this.timestampToMarker(input);\n      } else if (input instanceof Date) {\n        input = input.valueOf();\n        if (!isNaN(input)) {\n          marker = this.timestampToMarker(input);\n        }\n      } else if (Array.isArray(input)) {\n        marker = arrayToUtcDate(input);\n      }\n      if (marker === null || !isValidDate(marker)) {\n        return null;\n      }\n      return {\n        marker: marker,\n        isTimeUnspecified: false,\n        forcedTzo: null\n      };\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(s) {\n      var parts = _parse(s);\n      if (parts === null) {\n        return null;\n      }\n      var marker = parts.marker;\n      var forcedTzo = null;\n      if (parts.timeZoneOffset !== null) {\n        if (this.canComputeOffset) {\n          marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);\n        } else {\n          forcedTzo = parts.timeZoneOffset;\n        }\n      }\n      return {\n        marker: marker,\n        isTimeUnspecified: parts.isTimeUnspecified,\n        forcedTzo: forcedTzo\n      };\n    }\n    // Accessors\n  }, {\n    key: \"getYear\",\n    value: function getYear(marker) {\n      return this.calendarSystem.getMarkerYear(marker);\n    }\n  }, {\n    key: \"getMonth\",\n    value: function getMonth(marker) {\n      return this.calendarSystem.getMarkerMonth(marker);\n    }\n  }, {\n    key: \"getDay\",\n    value: function getDay(marker) {\n      return this.calendarSystem.getMarkerDay(marker);\n    }\n    // Adding / Subtracting\n  }, {\n    key: \"add\",\n    value: function add(marker, dur) {\n      var a = this.calendarSystem.markerToArray(marker);\n      a[0] += dur.years;\n      a[1] += dur.months;\n      a[2] += dur.days;\n      a[6] += dur.milliseconds;\n      return this.calendarSystem.arrayToMarker(a);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(marker, dur) {\n      var a = this.calendarSystem.markerToArray(marker);\n      a[0] -= dur.years;\n      a[1] -= dur.months;\n      a[2] -= dur.days;\n      a[6] -= dur.milliseconds;\n      return this.calendarSystem.arrayToMarker(a);\n    }\n  }, {\n    key: \"addYears\",\n    value: function addYears(marker, n) {\n      var a = this.calendarSystem.markerToArray(marker);\n      a[0] += n;\n      return this.calendarSystem.arrayToMarker(a);\n    }\n  }, {\n    key: \"addMonths\",\n    value: function addMonths(marker, n) {\n      var a = this.calendarSystem.markerToArray(marker);\n      a[1] += n;\n      return this.calendarSystem.arrayToMarker(a);\n    }\n    // Diffing Whole Units\n  }, {\n    key: \"diffWholeYears\",\n    value: function diffWholeYears(m0, m1) {\n      var calendarSystem = this.calendarSystem;\n      if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {\n        return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);\n      }\n      return null;\n    }\n  }, {\n    key: \"diffWholeMonths\",\n    value: function diffWholeMonths(m0, m1) {\n      var calendarSystem = this.calendarSystem;\n      if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {\n        return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;\n      }\n      return null;\n    }\n    // Range / Duration\n  }, {\n    key: \"greatestWholeUnit\",\n    value: function greatestWholeUnit(m0, m1) {\n      var n = this.diffWholeYears(m0, m1);\n      if (n !== null) {\n        return {\n          unit: 'year',\n          value: n\n        };\n      }\n      n = this.diffWholeMonths(m0, m1);\n      if (n !== null) {\n        return {\n          unit: 'month',\n          value: n\n        };\n      }\n      n = diffWholeWeeks(m0, m1);\n      if (n !== null) {\n        return {\n          unit: 'week',\n          value: n\n        };\n      }\n      n = diffWholeDays(m0, m1);\n      if (n !== null) {\n        return {\n          unit: 'day',\n          value: n\n        };\n      }\n      n = diffHours(m0, m1);\n      if (isInt(n)) {\n        return {\n          unit: 'hour',\n          value: n\n        };\n      }\n      n = diffMinutes(m0, m1);\n      if (isInt(n)) {\n        return {\n          unit: 'minute',\n          value: n\n        };\n      }\n      n = diffSeconds(m0, m1);\n      if (isInt(n)) {\n        return {\n          unit: 'second',\n          value: n\n        };\n      }\n      return {\n        unit: 'millisecond',\n        value: m1.valueOf() - m0.valueOf()\n      };\n    }\n  }, {\n    key: \"countDurationsBetween\",\n    value: function countDurationsBetween(m0, m1, d) {\n      // TODO: can use greatestWholeUnit\n      var diff;\n      if (d.years) {\n        diff = this.diffWholeYears(m0, m1);\n        if (diff !== null) {\n          return diff / asRoughYears(d);\n        }\n      }\n      if (d.months) {\n        diff = this.diffWholeMonths(m0, m1);\n        if (diff !== null) {\n          return diff / asRoughMonths(d);\n        }\n      }\n      if (d.days) {\n        diff = diffWholeDays(m0, m1);\n        if (diff !== null) {\n          return diff / asRoughDays(d);\n        }\n      }\n      return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);\n    }\n    // Start-Of\n    // these DON'T return zoned-dates. only UTC start-of dates\n  }, {\n    key: \"startOf\",\n    value: function startOf(m, unit) {\n      if (unit === 'year') {\n        return this.startOfYear(m);\n      }\n      if (unit === 'month') {\n        return this.startOfMonth(m);\n      }\n      if (unit === 'week') {\n        return this.startOfWeek(m);\n      }\n      if (unit === 'day') {\n        return startOfDay(m);\n      }\n      if (unit === 'hour') {\n        return startOfHour(m);\n      }\n      if (unit === 'minute') {\n        return startOfMinute(m);\n      }\n      if (unit === 'second') {\n        return startOfSecond(m);\n      }\n      return null;\n    }\n  }, {\n    key: \"startOfYear\",\n    value: function startOfYear(m) {\n      return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m)]);\n    }\n  }, {\n    key: \"startOfMonth\",\n    value: function startOfMonth(m) {\n      return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m)]);\n    }\n  }, {\n    key: \"startOfWeek\",\n    value: function startOfWeek(m) {\n      return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m), m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7]);\n    }\n    // Week Number\n  }, {\n    key: \"computeWeekNumber\",\n    value: function computeWeekNumber(marker) {\n      if (this.weekNumberFunc) {\n        return this.weekNumberFunc(this.toDate(marker));\n      }\n      return weekOfYear(marker, this.weekDow, this.weekDoy);\n    }\n    // TODO: choke on timeZoneName: long\n  }, {\n    key: \"format\",\n    value: function format(marker, formatter) {\n      var dateOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return formatter.format({\n        marker: marker,\n        timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)\n      }, this);\n    }\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end, formatter) {\n      var dateOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      if (dateOptions.isEndExclusive) {\n        end = addMs(end, -1);\n      }\n      return formatter.formatRange({\n        marker: start,\n        timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)\n      }, {\n        marker: end,\n        timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)\n      }, this, dateOptions.defaultSeparator);\n    }\n    /*\n    DUMB: the omitTime arg is dumb. if we omit the time, we want to omit the timezone offset. and if we do that,\n    might as well use buildIsoString or some other util directly\n    */\n  }, {\n    key: \"formatIso\",\n    value: function formatIso(marker) {\n      var extraOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var timeZoneOffset = null;\n      if (!extraOptions.omitTimeZoneOffset) {\n        if (extraOptions.forcedTzo != null) {\n          timeZoneOffset = extraOptions.forcedTzo;\n        } else {\n          timeZoneOffset = this.offsetForMarker(marker);\n        }\n      }\n      return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);\n    }\n    // TimeZone\n  }, {\n    key: \"timestampToMarker\",\n    value: function timestampToMarker(ms) {\n      if (this.timeZone === 'local') {\n        return arrayToUtcDate(dateToLocalArray(new Date(ms)));\n      }\n      if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {\n        return new Date(ms);\n      }\n      return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));\n    }\n  }, {\n    key: \"offsetForMarker\",\n    value: function offsetForMarker(m) {\n      if (this.timeZone === 'local') {\n        return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert \"inverse\" offset to \"normal\" offset\n      }\n\n      if (this.timeZone === 'UTC') {\n        return 0;\n      }\n      if (this.namedTimeZoneImpl) {\n        return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));\n      }\n      return null;\n    }\n    // Conversion\n  }, {\n    key: \"toDate\",\n    value: function toDate(m, forcedTzo) {\n      if (this.timeZone === 'local') {\n        return arrayToLocalDate(dateToUtcArray(m));\n      }\n      if (this.timeZone === 'UTC') {\n        return new Date(m.valueOf()); // make sure it's a copy\n      }\n\n      if (!this.namedTimeZoneImpl) {\n        return new Date(m.valueOf() - (forcedTzo || 0));\n      }\n      return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60);\n    }\n  }]);\n}();\nvar Theme = /*#__PURE__*/function () {\n  function Theme(calendarOptions) {\n    _classCallCheck(this, Theme);\n    if (this.iconOverrideOption) {\n      this.setIconOverride(calendarOptions[this.iconOverrideOption]);\n    }\n  }\n  return _createClass(Theme, [{\n    key: \"setIconOverride\",\n    value: function setIconOverride(iconOverrideHash) {\n      var iconClassesCopy;\n      var buttonName;\n      if (_typeof(iconOverrideHash) === 'object' && iconOverrideHash) {\n        // non-null object\n        iconClassesCopy = Object.assign({}, this.iconClasses);\n        for (buttonName in iconOverrideHash) {\n          iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);\n        }\n        this.iconClasses = iconClassesCopy;\n      } else if (iconOverrideHash === false) {\n        this.iconClasses = {};\n      }\n    }\n  }, {\n    key: \"applyIconOverridePrefix\",\n    value: function applyIconOverridePrefix(className) {\n      var prefix = this.iconOverridePrefix;\n      if (prefix && className.indexOf(prefix) !== 0) {\n        // if not already present\n        className = prefix + className;\n      }\n      return className;\n    }\n  }, {\n    key: \"getClass\",\n    value: function getClass(key) {\n      return this.classes[key] || '';\n    }\n  }, {\n    key: \"getIconClass\",\n    value: function getIconClass(buttonName, isRtl) {\n      var className;\n      if (isRtl && this.rtlIconClasses) {\n        className = this.rtlIconClasses[buttonName] || this.iconClasses[buttonName];\n      } else {\n        className = this.iconClasses[buttonName];\n      }\n      if (className) {\n        return \"\".concat(this.baseIconClass, \" \").concat(className);\n      }\n      return '';\n    }\n  }, {\n    key: \"getCustomButtonIconClass\",\n    value: function getCustomButtonIconClass(customButtonProps) {\n      var className;\n      if (this.iconOverrideCustomButtonOption) {\n        className = customButtonProps[this.iconOverrideCustomButtonOption];\n        if (className) {\n          return \"\".concat(this.baseIconClass, \" \").concat(this.applyIconOverridePrefix(className));\n        }\n      }\n      return '';\n    }\n  }]);\n}();\nTheme.prototype.classes = {};\nTheme.prototype.iconClasses = {};\nTheme.prototype.baseIconClass = '';\nTheme.prototype.iconOverridePrefix = '';\n\n/*\nNOTE: this can be a public API, especially createElement for hooks.\nSee examples/typescript-scheduler/src/index.ts\n*/\nfunction flushSync(runBeforeFlush) {\n  runBeforeFlush();\n  var oldDebounceRendering = preact__WEBPACK_IMPORTED_MODULE_0__.options.debounceRendering; // orig\n  var callbackQ = [];\n  function execCallbackSync(callback) {\n    callbackQ.push(callback);\n  }\n  preact__WEBPACK_IMPORTED_MODULE_0__.options.debounceRendering = execCallbackSync;\n  preact__WEBPACK_IMPORTED_MODULE_0__.render(preact__WEBPACK_IMPORTED_MODULE_0__.createElement(FakeComponent, {}), document.createElement('div'));\n  while (callbackQ.length) {\n    callbackQ.shift()();\n  }\n  preact__WEBPACK_IMPORTED_MODULE_0__.options.debounceRendering = oldDebounceRendering;\n}\nvar FakeComponent = /*#__PURE__*/function (_preact$Component) {\n  function FakeComponent() {\n    _classCallCheck(this, FakeComponent);\n    return _callSuper(this, FakeComponent, arguments);\n  }\n  _inherits(FakeComponent, _preact$Component);\n  return _createClass(FakeComponent, [{\n    key: \"render\",\n    value: function render() {\n      return preact__WEBPACK_IMPORTED_MODULE_0__.createElement('div', {});\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({});\n    }\n  }]);\n}(preact__WEBPACK_IMPORTED_MODULE_0__.Component); // TODO: use preact/compat instead?\nfunction createContext(defaultValue) {\n  var ContextType = preact__WEBPACK_IMPORTED_MODULE_0__.createContext(defaultValue);\n  var origProvider = ContextType.Provider;\n  ContextType.Provider = function () {\n    var _this4 = this;\n    var isNew = !this.getChildContext;\n    var children = origProvider.apply(this, arguments); // eslint-disable-line prefer-rest-params\n    if (isNew) {\n      var subs = [];\n      this.shouldComponentUpdate = function (_props) {\n        if (_this4.props.value !== _props.value) {\n          subs.forEach(function (c) {\n            c.context = _props.value;\n            c.forceUpdate();\n          });\n        }\n      };\n      this.sub = function (c) {\n        subs.push(c);\n        var old = c.componentWillUnmount;\n        c.componentWillUnmount = function () {\n          subs.splice(subs.indexOf(c), 1);\n          old && old.call(c);\n        };\n      };\n    }\n    return children;\n  };\n  return ContextType;\n}\nvar ScrollResponder = /*#__PURE__*/function () {\n  function ScrollResponder(execFunc, emitter, scrollTime, scrollTimeReset) {\n    var _this5 = this;\n    _classCallCheck(this, ScrollResponder);\n    this.execFunc = execFunc;\n    this.emitter = emitter;\n    this.scrollTime = scrollTime;\n    this.scrollTimeReset = scrollTimeReset;\n    this.handleScrollRequest = function (request) {\n      _this5.queuedRequest = Object.assign({}, _this5.queuedRequest || {}, request);\n      _this5.drain();\n    };\n    emitter.on('_scrollRequest', this.handleScrollRequest);\n    this.fireInitialScroll();\n  }\n  return _createClass(ScrollResponder, [{\n    key: \"detach\",\n    value: function detach() {\n      this.emitter.off('_scrollRequest', this.handleScrollRequest);\n    }\n  }, {\n    key: \"update\",\n    value: function update(isDatesNew) {\n      if (isDatesNew && this.scrollTimeReset) {\n        this.fireInitialScroll(); // will drain\n      } else {\n        this.drain();\n      }\n    }\n  }, {\n    key: \"fireInitialScroll\",\n    value: function fireInitialScroll() {\n      this.handleScrollRequest({\n        time: this.scrollTime\n      });\n    }\n  }, {\n    key: \"drain\",\n    value: function drain() {\n      if (this.queuedRequest && this.execFunc(this.queuedRequest)) {\n        this.queuedRequest = null;\n      }\n    }\n  }]);\n}();\nvar ViewContextType = createContext({}); // for Components\nfunction buildViewContext(viewSpec, viewApi, viewOptions, dateProfileGenerator, dateEnv, theme, pluginHooks, dispatch, getCurrentData, emitter, calendarApi, registerInteractiveComponent, unregisterInteractiveComponent) {\n  return {\n    dateEnv: dateEnv,\n    options: viewOptions,\n    pluginHooks: pluginHooks,\n    emitter: emitter,\n    dispatch: dispatch,\n    getCurrentData: getCurrentData,\n    calendarApi: calendarApi,\n    viewSpec: viewSpec,\n    viewApi: viewApi,\n    dateProfileGenerator: dateProfileGenerator,\n    theme: theme,\n    isRtl: viewOptions.direction === 'rtl',\n    addResizeHandler: function addResizeHandler(handler) {\n      emitter.on('_resize', handler);\n    },\n    removeResizeHandler: function removeResizeHandler(handler) {\n      emitter.off('_resize', handler);\n    },\n    createScrollResponder: function createScrollResponder(execFunc) {\n      return new ScrollResponder(execFunc, emitter, createDuration(viewOptions.scrollTime), viewOptions.scrollTimeReset);\n    },\n    registerInteractiveComponent: registerInteractiveComponent,\n    unregisterInteractiveComponent: unregisterInteractiveComponent\n  };\n}\n\n/* eslint max-classes-per-file: off */\nvar PureComponent = /*#__PURE__*/function (_Component) {\n  function PureComponent() {\n    _classCallCheck(this, PureComponent);\n    return _callSuper(this, PureComponent, arguments);\n  }\n  _inherits(PureComponent, _Component);\n  return _createClass(PureComponent, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.debug) {\n        // eslint-disable-next-line no-console\n        console.log(getUnequalProps(nextProps, this.props), getUnequalProps(nextState, this.state));\n      }\n      return !compareObjs(this.props, nextProps, this.propEquality) || !compareObjs(this.state, nextState, this.stateEquality);\n    }\n    // HACK for freakin' React StrictMode\n  }, {\n    key: \"safeSetState\",\n    value: function safeSetState(newState) {\n      if (!compareObjs(this.state, Object.assign(Object.assign({}, this.state), newState), this.stateEquality)) {\n        this.setState(newState);\n      }\n    }\n  }]);\n}(preact__WEBPACK_IMPORTED_MODULE_0__.Component);\nPureComponent.addPropsEquality = addPropsEquality;\nPureComponent.addStateEquality = addStateEquality;\nPureComponent.contextType = ViewContextType;\nPureComponent.prototype.propEquality = {};\nPureComponent.prototype.stateEquality = {};\nvar BaseComponent = /*#__PURE__*/function (_PureComponent) {\n  function BaseComponent() {\n    _classCallCheck(this, BaseComponent);\n    return _callSuper(this, BaseComponent, arguments);\n  }\n  _inherits(BaseComponent, _PureComponent);\n  return _createClass(BaseComponent);\n}(PureComponent);\nBaseComponent.contextType = ViewContextType;\nfunction addPropsEquality(propEquality) {\n  var hash = Object.create(this.prototype.propEquality);\n  Object.assign(hash, propEquality);\n  this.prototype.propEquality = hash;\n}\nfunction addStateEquality(stateEquality) {\n  var hash = Object.create(this.prototype.stateEquality);\n  Object.assign(hash, stateEquality);\n  this.prototype.stateEquality = hash;\n}\n// use other one\nfunction setRef(ref, current) {\n  if (typeof ref === 'function') {\n    ref(current);\n  } else if (ref) {\n    // see https://github.com/facebook/react/issues/13029\n    ref.current = current;\n  }\n}\nvar ContentInjector = /*#__PURE__*/function (_BaseComponent) {\n  function ContentInjector() {\n    var _this6;\n    _classCallCheck(this, ContentInjector);\n    _this6 = _callSuper(this, ContentInjector, arguments);\n    _this6.id = guid();\n    _this6.queuedDomNodes = [];\n    _this6.currentDomNodes = [];\n    _this6.handleEl = function (el) {\n      var options = _this6.context.options;\n      var generatorName = _this6.props.generatorName;\n      if (!options.customRenderingReplaces || !hasCustomRenderingHandler(generatorName, options)) {\n        _this6.updateElRef(el);\n      }\n    };\n    _this6.updateElRef = function (el) {\n      if (_this6.props.elRef) {\n        setRef(_this6.props.elRef, el);\n      }\n    };\n    return _this6;\n  }\n  _inherits(ContentInjector, _BaseComponent);\n  return _createClass(ContentInjector, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      var options = context.options;\n      var customGenerator = props.customGenerator,\n        defaultGenerator = props.defaultGenerator,\n        renderProps = props.renderProps;\n      var attrs = buildElAttrs(props, [], this.handleEl);\n      var useDefault = false;\n      var innerContent;\n      var queuedDomNodes = [];\n      var currentGeneratorMeta;\n      if (customGenerator != null) {\n        var customGeneratorRes = typeof customGenerator === 'function' ? customGenerator(renderProps, preact__WEBPACK_IMPORTED_MODULE_0__.createElement) : customGenerator;\n        if (customGeneratorRes === true) {\n          useDefault = true;\n        } else {\n          var isObject = customGeneratorRes && _typeof(customGeneratorRes) === 'object'; // non-null\n          if (isObject && 'html' in customGeneratorRes) {\n            attrs.dangerouslySetInnerHTML = {\n              __html: customGeneratorRes.html\n            };\n          } else if (isObject && 'domNodes' in customGeneratorRes) {\n            queuedDomNodes = Array.prototype.slice.call(customGeneratorRes.domNodes);\n          } else if (isObject ? (0,preact__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(customGeneratorRes) // vdom node\n          : typeof customGeneratorRes !== 'function' // primitive value (like string or number)\n          ) {\n            // use in vdom\n            innerContent = customGeneratorRes;\n          } else {\n            // an exotic object for handleCustomRendering\n            currentGeneratorMeta = customGeneratorRes;\n          }\n        }\n      } else {\n        useDefault = !hasCustomRenderingHandler(props.generatorName, options);\n      }\n      if (useDefault && defaultGenerator) {\n        innerContent = defaultGenerator(renderProps);\n      }\n      this.queuedDomNodes = queuedDomNodes;\n      this.currentGeneratorMeta = currentGeneratorMeta;\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(props.elTag, attrs, innerContent);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.applyQueueudDomNodes();\n      this.triggerCustomRendering(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.applyQueueudDomNodes();\n      this.triggerCustomRendering(true);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.triggerCustomRendering(false); // TODO: different API for removal?\n    }\n  }, {\n    key: \"triggerCustomRendering\",\n    value: function triggerCustomRendering(isActive) {\n      var _a;\n      var props = this.props,\n        context = this.context;\n      var _context$options = context.options,\n        handleCustomRendering = _context$options.handleCustomRendering,\n        customRenderingMetaMap = _context$options.customRenderingMetaMap;\n      if (handleCustomRendering) {\n        var generatorMeta = (_a = this.currentGeneratorMeta) !== null && _a !== void 0 ? _a : customRenderingMetaMap === null || customRenderingMetaMap === void 0 ? void 0 : customRenderingMetaMap[props.generatorName];\n        if (generatorMeta) {\n          handleCustomRendering(Object.assign(Object.assign({\n            id: this.id,\n            isActive: isActive,\n            containerEl: this.base,\n            reportNewContainerEl: this.updateElRef,\n            // front-end framework tells us about new container els\n            generatorMeta: generatorMeta\n          }, props), {\n            elClasses: (props.elClasses || []).filter(isTruthy)\n          }));\n        }\n      }\n    }\n  }, {\n    key: \"applyQueueudDomNodes\",\n    value: function applyQueueudDomNodes() {\n      var queuedDomNodes = this.queuedDomNodes,\n        currentDomNodes = this.currentDomNodes;\n      var el = this.base;\n      if (!isArraysEqual(queuedDomNodes, currentDomNodes)) {\n        currentDomNodes.forEach(removeElement);\n        var _iterator4 = _createForOfIteratorHelper(queuedDomNodes),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var newNode = _step4.value;\n            el.appendChild(newNode);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        this.currentDomNodes = queuedDomNodes;\n      }\n    }\n  }]);\n}(BaseComponent);\nContentInjector.addPropsEquality({\n  elClasses: isArraysEqual,\n  elStyle: isPropsEqual,\n  elAttrs: isNonHandlerPropsEqual,\n  renderProps: isPropsEqual\n});\n// Util\n/*\nDoes UI-framework provide custom way of rendering that does not use Preact VDOM\nAND does the calendar's options define custom rendering?\nAKA. Should we NOT render the default content?\n*/\nfunction hasCustomRenderingHandler(generatorName, options) {\n  var _a;\n  return Boolean(options.handleCustomRendering && generatorName && ((_a = options.customRenderingMetaMap) === null || _a === void 0 ? void 0 : _a[generatorName]));\n}\nfunction buildElAttrs(props, extraClassNames, elRef) {\n  var attrs = Object.assign(Object.assign({}, props.elAttrs), {\n    ref: elRef\n  });\n  if (props.elClasses || extraClassNames) {\n    attrs.className = (props.elClasses || []).concat(extraClassNames || []).concat(attrs.className || []).filter(Boolean).join(' ');\n  }\n  if (props.elStyle) {\n    attrs.style = props.elStyle;\n  }\n  return attrs;\n}\nfunction isTruthy(val) {\n  return Boolean(val);\n}\nvar RenderId = createContext(0);\nvar ContentContainer = /*#__PURE__*/function (_Component2) {\n  function ContentContainer() {\n    var _this7;\n    _classCallCheck(this, ContentContainer);\n    _this7 = _callSuper(this, ContentContainer, arguments);\n    _this7.InnerContent = InnerContentInjector.bind(undefined, _this7);\n    _this7.handleEl = function (el) {\n      _this7.el = el;\n      if (_this7.props.elRef) {\n        setRef(_this7.props.elRef, el);\n        if (el && _this7.didMountMisfire) {\n          _this7.componentDidMount();\n        }\n      }\n    };\n    return _this7;\n  }\n  _inherits(ContentContainer, _Component2);\n  return _createClass(ContentContainer, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var generatedClassNames = generateClassNames(props.classNameGenerator, props.renderProps);\n      if (props.children) {\n        var elAttrs = buildElAttrs(props, generatedClassNames, this.handleEl);\n        var children = props.children(this.InnerContent, props.renderProps, elAttrs);\n        if (props.elTag) {\n          return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(props.elTag, elAttrs, children);\n        } else {\n          return children;\n        }\n      } else {\n        return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentInjector, Object.assign(Object.assign({}, props), {\n          elRef: this.handleEl,\n          elTag: props.elTag || 'div',\n          elClasses: (props.elClasses || []).concat(generatedClassNames),\n          renderId: this.context\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _a, _b;\n      if (this.el) {\n        (_b = (_a = this.props).didMount) === null || _b === void 0 ? void 0 : _b.call(_a, Object.assign(Object.assign({}, this.props.renderProps), {\n          el: this.el\n        }));\n      } else {\n        this.didMountMisfire = true;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _a, _b;\n      (_b = (_a = this.props).willUnmount) === null || _b === void 0 ? void 0 : _b.call(_a, Object.assign(Object.assign({}, this.props.renderProps), {\n        el: this.el\n      }));\n    }\n  }]);\n}(preact__WEBPACK_IMPORTED_MODULE_0__.Component);\nContentContainer.contextType = RenderId;\nfunction InnerContentInjector(containerComponent, props) {\n  var parentProps = containerComponent.props;\n  return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentInjector, Object.assign({\n    renderProps: parentProps.renderProps,\n    generatorName: parentProps.generatorName,\n    customGenerator: parentProps.customGenerator,\n    defaultGenerator: parentProps.defaultGenerator,\n    renderId: containerComponent.context\n  }, props));\n}\n// Utils\nfunction generateClassNames(classNameGenerator, renderProps) {\n  var classNames = typeof classNameGenerator === 'function' ? classNameGenerator(renderProps) : classNameGenerator || [];\n  return typeof classNames === 'string' ? [classNames] : classNames;\n}\nvar ViewContainer = /*#__PURE__*/function (_BaseComponent2) {\n  function ViewContainer() {\n    _classCallCheck(this, ViewContainer);\n    return _callSuper(this, ViewContainer, arguments);\n  }\n  _inherits(ViewContainer, _BaseComponent2);\n  return _createClass(ViewContainer, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      var options = context.options;\n      var renderProps = {\n        view: context.viewApi\n      };\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentContainer, Object.assign({}, props, {\n        elTag: props.elTag || 'div',\n        elClasses: [].concat(_toConsumableArray(buildViewClassNames(props.viewSpec)), _toConsumableArray(props.elClasses || [])),\n        renderProps: renderProps,\n        classNameGenerator: options.viewClassNames,\n        generatorName: undefined,\n        didMount: options.viewDidMount,\n        willUnmount: options.viewWillUnmount\n      }), function () {\n        return props.children;\n      });\n    }\n  }]);\n}(BaseComponent);\nfunction buildViewClassNames(viewSpec) {\n  return [\"fc-\".concat(viewSpec.type, \"-view\"), 'fc-view'];\n}\nfunction parseRange(input, dateEnv) {\n  var start = null;\n  var end = null;\n  if (input.start) {\n    start = dateEnv.createMarker(input.start);\n  }\n  if (input.end) {\n    end = dateEnv.createMarker(input.end);\n  }\n  if (!start && !end) {\n    return null;\n  }\n  if (start && end && end < start) {\n    return null;\n  }\n  return {\n    start: start,\n    end: end\n  };\n}\n// SIDE-EFFECT: will mutate ranges.\n// Will return a new array result.\nfunction invertRanges(ranges, constraintRange) {\n  var invertedRanges = [];\n  var start = constraintRange.start; // the end of the previous range. the start of the new range\n  var i;\n  var dateRange;\n  // ranges need to be in order. required for our date-walking algorithm\n  ranges.sort(compareRanges);\n  for (i = 0; i < ranges.length; i += 1) {\n    dateRange = ranges[i];\n    // add the span of time before the event (if there is any)\n    if (dateRange.start > start) {\n      // compare millisecond time (skip any ambig logic)\n      invertedRanges.push({\n        start: start,\n        end: dateRange.start\n      });\n    }\n    if (dateRange.end > start) {\n      start = dateRange.end;\n    }\n  }\n  // add the span of time after the last event (if there is any)\n  if (start < constraintRange.end) {\n    // compare millisecond time (skip any ambig logic)\n    invertedRanges.push({\n      start: start,\n      end: constraintRange.end\n    });\n  }\n  return invertedRanges;\n}\nfunction compareRanges(range0, range1) {\n  return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first\n}\n\nfunction intersectRanges(range0, range1) {\n  var start = range0.start,\n    end = range0.end;\n  var newRange = null;\n  if (range1.start !== null) {\n    if (start === null) {\n      start = range1.start;\n    } else {\n      start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));\n    }\n  }\n  if (range1.end != null) {\n    if (end === null) {\n      end = range1.end;\n    } else {\n      end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));\n    }\n  }\n  if (start === null || end === null || start < end) {\n    newRange = {\n      start: start,\n      end: end\n    };\n  }\n  return newRange;\n}\nfunction rangesEqual(range0, range1) {\n  return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());\n}\nfunction rangesIntersect(range0, range1) {\n  return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);\n}\nfunction rangeContainsRange(outerRange, innerRange) {\n  return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);\n}\nfunction rangeContainsMarker(range, date) {\n  return (range.start === null || date >= range.start) && (range.end === null || date < range.end);\n}\n// If the given date is not within the given range, move it inside.\n// (If it's past the end, make it one millisecond before the end).\nfunction constrainMarkerToRange(date, range) {\n  if (range.start != null && date < range.start) {\n    return range.start;\n  }\n  if (range.end != null && date >= range.end) {\n    return new Date(range.end.valueOf() - 1);\n  }\n  return date;\n}\n\n/* Date stuff that doesn't belong in datelib core\n----------------------------------------------------------------------------------------------------------------------*/\n// given a timed range, computes an all-day range that has the same exact duration,\n// but whose start time is aligned with the start of the day.\nfunction computeAlignedDayRange(timedRange) {\n  var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;\n  var start = startOfDay(timedRange.start);\n  var end = addDays(start, dayCnt);\n  return {\n    start: start,\n    end: end\n  };\n}\n// given a timed range, computes an all-day range based on how for the end date bleeds into the next day\n// TODO: give nextDayThreshold a default arg\nfunction computeVisibleDayRange(timedRange) {\n  var nextDayThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createDuration(0);\n  var startDay = null;\n  var endDay = null;\n  if (timedRange.end) {\n    endDay = startOfDay(timedRange.end);\n    var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`\n    // If the end time is actually inclusively part of the next day and is equal to or\n    // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n    // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n    if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {\n      endDay = addDays(endDay, 1);\n    }\n  }\n  if (timedRange.start) {\n    startDay = startOfDay(timedRange.start); // the beginning of the day the range starts\n    // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.\n    if (endDay && endDay <= startDay) {\n      endDay = addDays(startDay, 1);\n    }\n  }\n  return {\n    start: startDay,\n    end: endDay\n  };\n}\n// spans from one day into another?\nfunction isMultiDayRange(range) {\n  var visibleRange = computeVisibleDayRange(range);\n  return diffDays(visibleRange.start, visibleRange.end) > 1;\n}\nfunction diffDates(date0, date1, dateEnv, largeUnit) {\n  if (largeUnit === 'year') {\n    return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');\n  }\n  if (largeUnit === 'month') {\n    return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');\n  }\n  return diffDayAndTime(date0, date1); // returns a duration\n}\n\nfunction reduceCurrentDate(currentDate, action) {\n  switch (action.type) {\n    case 'CHANGE_DATE':\n      return action.dateMarker;\n    default:\n      return currentDate;\n  }\n}\nfunction getInitialDate(options, dateEnv) {\n  var initialDateInput = options.initialDate;\n  // compute the initial ambig-timezone date\n  if (initialDateInput != null) {\n    return dateEnv.createMarker(initialDateInput);\n  }\n  return getNow(options.now, dateEnv); // getNow already returns unzoned\n}\n\nfunction getNow(nowInput, dateEnv) {\n  if (typeof nowInput === 'function') {\n    nowInput = nowInput();\n  }\n  if (nowInput == null) {\n    return dateEnv.createNowMarker();\n  }\n  return dateEnv.createMarker(nowInput);\n}\nvar DateProfileGenerator = /*#__PURE__*/function () {\n  function DateProfileGenerator(props) {\n    _classCallCheck(this, DateProfileGenerator);\n    this.props = props;\n    this.nowDate = getNow(props.nowInput, props.dateEnv);\n    this.initHiddenDays();\n  }\n  /* Date Range Computation\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Builds a structure with info about what the dates/ranges will be for the \"prev\" view.\n  return _createClass(DateProfileGenerator, [{\n    key: \"buildPrev\",\n    value: function buildPrev(currentDateProfile, currentDate, forceToValid) {\n      var dateEnv = this.props.dateEnv;\n      var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit),\n      // important for start-of-month\n      currentDateProfile.dateIncrement);\n      return this.build(prevDate, -1, forceToValid);\n    }\n    // Builds a structure with info about what the dates/ranges will be for the \"next\" view.\n  }, {\n    key: \"buildNext\",\n    value: function buildNext(currentDateProfile, currentDate, forceToValid) {\n      var dateEnv = this.props.dateEnv;\n      var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit),\n      // important for start-of-month\n      currentDateProfile.dateIncrement);\n      return this.build(nextDate, 1, forceToValid);\n    }\n    // Builds a structure holding dates/ranges for rendering around the given date.\n    // Optional direction param indicates whether the date is being incremented/decremented\n    // from its previous value. decremented = -1, incremented = 1 (default).\n  }, {\n    key: \"build\",\n    value: function build(currentDate, direction) {\n      var forceToValid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var props = this.props;\n      var validRange;\n      var currentInfo;\n      var isRangeAllDay;\n      var renderRange;\n      var activeRange;\n      var isValid;\n      validRange = this.buildValidRange();\n      validRange = this.trimHiddenDays(validRange);\n      if (forceToValid) {\n        currentDate = constrainMarkerToRange(currentDate, validRange);\n      }\n      currentInfo = this.buildCurrentRangeInfo(currentDate, direction);\n      isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);\n      renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);\n      renderRange = this.trimHiddenDays(renderRange);\n      activeRange = renderRange;\n      if (!props.showNonCurrentDates) {\n        activeRange = intersectRanges(activeRange, currentInfo.range);\n      }\n      activeRange = this.adjustActiveRange(activeRange);\n      activeRange = intersectRanges(activeRange, validRange); // might return null\n      // it's invalid if the originally requested date is not contained,\n      // or if the range is completely outside of the valid range.\n      isValid = rangesIntersect(currentInfo.range, validRange);\n      // HACK: constrain to render-range so `currentDate` is more useful to view rendering\n      if (!rangeContainsMarker(renderRange, currentDate)) {\n        currentDate = renderRange.start;\n      }\n      return {\n        currentDate: currentDate,\n        // constraint for where prev/next operations can go and where events can be dragged/resized to.\n        // an object with optional start and end properties.\n        validRange: validRange,\n        // range the view is formally responsible for.\n        // for example, a month view might have 1st-31st, excluding padded dates\n        currentRange: currentInfo.range,\n        // name of largest unit being displayed, like \"month\" or \"week\"\n        currentRangeUnit: currentInfo.unit,\n        isRangeAllDay: isRangeAllDay,\n        // dates that display events and accept drag-n-drop\n        // will be `null` if no dates accept events\n        activeRange: activeRange,\n        // date range with a rendered skeleton\n        // includes not-active days that need some sort of DOM\n        renderRange: renderRange,\n        // Duration object that denotes the first visible time of any given day\n        slotMinTime: props.slotMinTime,\n        // Duration object that denotes the exclusive visible end time of any given day\n        slotMaxTime: props.slotMaxTime,\n        isValid: isValid,\n        // how far the current date will move for a prev/next operation\n        dateIncrement: this.buildDateIncrement(currentInfo.duration)\n        // pass a fallback (might be null) ^\n      };\n    }\n    // Builds an object with optional start/end properties.\n    // Indicates the minimum/maximum dates to display.\n    // not responsible for trimming hidden days.\n  }, {\n    key: \"buildValidRange\",\n    value: function buildValidRange() {\n      var input = this.props.validRangeInput;\n      var simpleInput = typeof input === 'function' ? input.call(this.props.calendarApi, this.nowDate) : input;\n      return this.refineRange(simpleInput) || {\n        start: null,\n        end: null\n      }; // completely open-ended\n    }\n    // Builds a structure with info about the \"current\" range, the range that is\n    // highlighted as being the current month for example.\n    // See build() for a description of `direction`.\n    // Guaranteed to have `range` and `unit` properties. `duration` is optional.\n  }, {\n    key: \"buildCurrentRangeInfo\",\n    value: function buildCurrentRangeInfo(date, direction) {\n      var props = this.props;\n      var duration = null;\n      var unit = null;\n      var range = null;\n      var dayCount;\n      if (props.duration) {\n        duration = props.duration;\n        unit = props.durationUnit;\n        range = this.buildRangeFromDuration(date, direction, duration, unit);\n      } else if (dayCount = this.props.dayCount) {\n        unit = 'day';\n        range = this.buildRangeFromDayCount(date, direction, dayCount);\n      } else if (range = this.buildCustomVisibleRange(date)) {\n        unit = props.dateEnv.greatestWholeUnit(range.start, range.end).unit;\n      } else {\n        duration = this.getFallbackDuration();\n        unit = greatestDurationDenominator(duration).unit;\n        range = this.buildRangeFromDuration(date, direction, duration, unit);\n      }\n      return {\n        duration: duration,\n        unit: unit,\n        range: range\n      };\n    }\n  }, {\n    key: \"getFallbackDuration\",\n    value: function getFallbackDuration() {\n      return createDuration({\n        day: 1\n      });\n    }\n    // Returns a new activeRange to have time values (un-ambiguate)\n    // slotMinTime or slotMaxTime causes the range to expand.\n  }, {\n    key: \"adjustActiveRange\",\n    value: function adjustActiveRange(range) {\n      var _this$props = this.props,\n        dateEnv = _this$props.dateEnv,\n        usesMinMaxTime = _this$props.usesMinMaxTime,\n        slotMinTime = _this$props.slotMinTime,\n        slotMaxTime = _this$props.slotMaxTime;\n      var start = range.start,\n        end = range.end;\n      if (usesMinMaxTime) {\n        // expand active range if slotMinTime is negative (why not when positive?)\n        if (asRoughDays(slotMinTime) < 0) {\n          start = startOfDay(start); // necessary?\n          start = dateEnv.add(start, slotMinTime);\n        }\n        // expand active range if slotMaxTime is beyond one day (why not when negative?)\n        if (asRoughDays(slotMaxTime) > 1) {\n          end = startOfDay(end); // necessary?\n          end = addDays(end, -1);\n          end = dateEnv.add(end, slotMaxTime);\n        }\n      }\n      return {\n        start: start,\n        end: end\n      };\n    }\n    // Builds the \"current\" range when it is specified as an explicit duration.\n    // `unit` is the already-computed greatestDurationDenominator unit of duration.\n  }, {\n    key: \"buildRangeFromDuration\",\n    value: function buildRangeFromDuration(date, direction, duration, unit) {\n      var _this$props2 = this.props,\n        dateEnv = _this$props2.dateEnv,\n        dateAlignment = _this$props2.dateAlignment;\n      var start;\n      var end;\n      var res;\n      // compute what the alignment should be\n      if (!dateAlignment) {\n        var dateIncrement = this.props.dateIncrement;\n        if (dateIncrement) {\n          // use the smaller of the two units\n          if (asRoughMs(dateIncrement) < asRoughMs(duration)) {\n            dateAlignment = greatestDurationDenominator(dateIncrement).unit;\n          } else {\n            dateAlignment = unit;\n          }\n        } else {\n          dateAlignment = unit;\n        }\n      }\n      // if the view displays a single day or smaller\n      if (asRoughDays(duration) <= 1) {\n        if (this.isHiddenDay(start)) {\n          start = this.skipHiddenDays(start, direction);\n          start = startOfDay(start);\n        }\n      }\n      function computeRes() {\n        start = dateEnv.startOf(date, dateAlignment);\n        end = dateEnv.add(start, duration);\n        res = {\n          start: start,\n          end: end\n        };\n      }\n      computeRes();\n      // if range is completely enveloped by hidden days, go past the hidden days\n      if (!this.trimHiddenDays(res)) {\n        date = this.skipHiddenDays(date, direction);\n        computeRes();\n      }\n      return res;\n    }\n    // Builds the \"current\" range when a dayCount is specified.\n  }, {\n    key: \"buildRangeFromDayCount\",\n    value: function buildRangeFromDayCount(date, direction, dayCount) {\n      var _this$props3 = this.props,\n        dateEnv = _this$props3.dateEnv,\n        dateAlignment = _this$props3.dateAlignment;\n      var runningCount = 0;\n      var start = date;\n      var end;\n      if (dateAlignment) {\n        start = dateEnv.startOf(start, dateAlignment);\n      }\n      start = startOfDay(start);\n      start = this.skipHiddenDays(start, direction);\n      end = start;\n      do {\n        end = addDays(end, 1);\n        if (!this.isHiddenDay(end)) {\n          runningCount += 1;\n        }\n      } while (runningCount < dayCount);\n      return {\n        start: start,\n        end: end\n      };\n    }\n    // Builds a normalized range object for the \"visible\" range,\n    // which is a way to define the currentRange and activeRange at the same time.\n  }, {\n    key: \"buildCustomVisibleRange\",\n    value: function buildCustomVisibleRange(date) {\n      var props = this.props;\n      var input = props.visibleRangeInput;\n      var simpleInput = typeof input === 'function' ? input.call(props.calendarApi, props.dateEnv.toDate(date)) : input;\n      var range = this.refineRange(simpleInput);\n      if (range && (range.start == null || range.end == null)) {\n        return null;\n      }\n      return range;\n    }\n    // Computes the range that will represent the element/cells for *rendering*,\n    // but which may have voided days/times.\n    // not responsible for trimming hidden days.\n  }, {\n    key: \"buildRenderRange\",\n    value: function buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay) {\n      return currentRange;\n    }\n    // Compute the duration value that should be added/substracted to the current date\n    // when a prev/next operation happens.\n  }, {\n    key: \"buildDateIncrement\",\n    value: function buildDateIncrement(fallback) {\n      var dateIncrement = this.props.dateIncrement;\n      var customAlignment;\n      if (dateIncrement) {\n        return dateIncrement;\n      }\n      if (customAlignment = this.props.dateAlignment) {\n        return createDuration(1, customAlignment);\n      }\n      if (fallback) {\n        return fallback;\n      }\n      return createDuration({\n        days: 1\n      });\n    }\n  }, {\n    key: \"refineRange\",\n    value: function refineRange(rangeInput) {\n      if (rangeInput) {\n        var range = parseRange(rangeInput, this.props.dateEnv);\n        if (range) {\n          range = computeVisibleDayRange(range);\n        }\n        return range;\n      }\n      return null;\n    }\n    /* Hidden Days\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Initializes internal variables related to calculating hidden days-of-week\n  }, {\n    key: \"initHiddenDays\",\n    value: function initHiddenDays() {\n      var hiddenDays = this.props.hiddenDays || []; // array of day-of-week indices that are hidden\n      var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n      var dayCnt = 0;\n      var i;\n      if (this.props.weekends === false) {\n        hiddenDays.push(0, 6); // 0=sunday, 6=saturday\n      }\n\n      for (i = 0; i < 7; i += 1) {\n        if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {\n          dayCnt += 1;\n        }\n      }\n      if (!dayCnt) {\n        throw new Error('invalid hiddenDays'); // all days were hidden? bad.\n      }\n\n      this.isHiddenDayHash = isHiddenDayHash;\n    }\n    // Remove days from the beginning and end of the range that are computed as hidden.\n    // If the whole range is trimmed off, returns null\n  }, {\n    key: \"trimHiddenDays\",\n    value: function trimHiddenDays(range) {\n      var start = range.start,\n        end = range.end;\n      if (start) {\n        start = this.skipHiddenDays(start);\n      }\n      if (end) {\n        end = this.skipHiddenDays(end, -1, true);\n      }\n      if (start == null || end == null || start < end) {\n        return {\n          start: start,\n          end: end\n        };\n      }\n      return null;\n    }\n    // Is the current day hidden?\n    // `day` is a day-of-week index (0-6), or a Date (used for UTC)\n  }, {\n    key: \"isHiddenDay\",\n    value: function isHiddenDay(day) {\n      if (day instanceof Date) {\n        day = day.getUTCDay();\n      }\n      return this.isHiddenDayHash[day];\n    }\n    // Incrementing the current day until it is no longer a hidden day, returning a copy.\n    // DOES NOT CONSIDER validRange!\n    // If the initial value of `date` is not a hidden day, don't do anything.\n    // Pass `isExclusive` as `true` if you are dealing with an end date.\n    // `inc` defaults to `1` (increment one day forward each time)\n  }, {\n    key: \"skipHiddenDays\",\n    value: function skipHiddenDays(date) {\n      var inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var isExclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {\n        date = addDays(date, inc);\n      }\n      return date;\n    }\n  }]);\n}();\nfunction createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {\n  return {\n    instanceId: guid(),\n    defId: defId,\n    range: range,\n    forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,\n    forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo\n  };\n}\nfunction parseRecurring(refined, defaultAllDay, dateEnv, recurringTypes) {\n  for (var i = 0; i < recurringTypes.length; i += 1) {\n    var parsed = recurringTypes[i].parse(refined, dateEnv);\n    if (parsed) {\n      var allDay = refined.allDay;\n      if (allDay == null) {\n        allDay = defaultAllDay;\n        if (allDay == null) {\n          allDay = parsed.allDayGuess;\n          if (allDay == null) {\n            allDay = false;\n          }\n        }\n      }\n      return {\n        allDay: allDay,\n        duration: parsed.duration,\n        typeData: parsed.typeData,\n        typeId: i\n      };\n    }\n  }\n  return null;\n}\nfunction expandRecurring(eventStore, framingRange, context) {\n  var dateEnv = context.dateEnv,\n    pluginHooks = context.pluginHooks,\n    options = context.options;\n  var defs = eventStore.defs,\n    instances = eventStore.instances;\n  // remove existing recurring instances\n  // TODO: bad. always expand events as a second step\n  instances = filterHash(instances, function (instance) {\n    return !defs[instance.defId].recurringDef;\n  });\n  for (var defId in defs) {\n    var def = defs[defId];\n    if (def.recurringDef) {\n      var duration = def.recurringDef.duration;\n      if (!duration) {\n        duration = def.allDay ? options.defaultAllDayEventDuration : options.defaultTimedEventDuration;\n      }\n      var starts = expandRecurringRanges(def, duration, framingRange, dateEnv, pluginHooks.recurringTypes);\n      var _iterator5 = _createForOfIteratorHelper(starts),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var start = _step5.value;\n          var instance = createEventInstance(defId, {\n            start: start,\n            end: dateEnv.add(start, duration)\n          });\n          instances[instance.instanceId] = instance;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }\n  return {\n    defs: defs,\n    instances: instances\n  };\n}\n/*\nEvent MUST have a recurringDef\n*/\nfunction expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {\n  var typeDef = recurringTypes[eventDef.recurringDef.typeId];\n  var markers = typeDef.expand(eventDef.recurringDef.typeData, {\n    start: dateEnv.subtract(framingRange.start, duration),\n    end: framingRange.end\n  }, dateEnv);\n  // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to\n  if (eventDef.allDay) {\n    markers = markers.map(startOfDay);\n  }\n  return markers;\n}\nvar EVENT_NON_DATE_REFINERS = {\n  id: String,\n  groupId: String,\n  title: String,\n  url: String,\n  interactive: Boolean\n};\nvar EVENT_DATE_REFINERS = {\n  start: identity,\n  end: identity,\n  date: identity,\n  allDay: Boolean\n};\nvar EVENT_REFINERS = Object.assign(Object.assign(Object.assign({}, EVENT_NON_DATE_REFINERS), EVENT_DATE_REFINERS), {\n  extendedProps: identity\n});\nfunction parseEvent(raw, eventSource, context, allowOpenRange) {\n  var refiners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : buildEventRefiners(context);\n  var defIdMap = arguments.length > 5 ? arguments[5] : undefined;\n  var instanceIdMap = arguments.length > 6 ? arguments[6] : undefined;\n  var _refineEventDef = refineEventDef(raw, context, refiners),\n    refined = _refineEventDef.refined,\n    extra = _refineEventDef.extra;\n  var defaultAllDay = computeIsDefaultAllDay(eventSource, context);\n  var recurringRes = parseRecurring(refined, defaultAllDay, context.dateEnv, context.pluginHooks.recurringTypes);\n  if (recurringRes) {\n    var def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : '', recurringRes.allDay, Boolean(recurringRes.duration), context, defIdMap);\n    def.recurringDef = {\n      typeId: recurringRes.typeId,\n      typeData: recurringRes.typeData,\n      duration: recurringRes.duration\n    };\n    return {\n      def: def,\n      instance: null\n    };\n  }\n  var singleRes = parseSingle(refined, defaultAllDay, context, allowOpenRange);\n  if (singleRes) {\n    var _def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : '', singleRes.allDay, singleRes.hasEnd, context, defIdMap);\n    var instance = createEventInstance(_def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);\n    if (instanceIdMap && _def.publicId && instanceIdMap[_def.publicId]) {\n      instance.instanceId = instanceIdMap[_def.publicId];\n    }\n    return {\n      def: _def,\n      instance: instance\n    };\n  }\n  return null;\n}\nfunction refineEventDef(raw, context) {\n  var refiners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : buildEventRefiners(context);\n  return refineProps(raw, refiners);\n}\nfunction buildEventRefiners(context) {\n  return Object.assign(Object.assign(Object.assign({}, EVENT_UI_REFINERS), EVENT_REFINERS), context.pluginHooks.eventRefiners);\n}\n/*\nWill NOT populate extendedProps with the leftover properties.\nWill NOT populate date-related props.\n*/\nfunction parseEventDef(refined, extra, sourceId, allDay, hasEnd, context, defIdMap) {\n  var def = {\n    title: refined.title || '',\n    groupId: refined.groupId || '',\n    publicId: refined.id || '',\n    url: refined.url || '',\n    recurringDef: null,\n    defId: (defIdMap && refined.id ? defIdMap[refined.id] : '') || guid(),\n    sourceId: sourceId,\n    allDay: allDay,\n    hasEnd: hasEnd,\n    interactive: refined.interactive,\n    ui: createEventUi(refined, context),\n    extendedProps: Object.assign(Object.assign({}, refined.extendedProps || {}), extra)\n  };\n  var _iterator6 = _createForOfIteratorHelper(context.pluginHooks.eventDefMemberAdders),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var memberAdder = _step6.value;\n      Object.assign(def, memberAdder(refined));\n    }\n    // help out EventImpl from having user modify props\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  Object.freeze(def.ui.classNames);\n  Object.freeze(def.extendedProps);\n  return def;\n}\nfunction parseSingle(refined, defaultAllDay, context, allowOpenRange) {\n  var allDay = refined.allDay;\n  var startMeta;\n  var startMarker = null;\n  var hasEnd = false;\n  var endMeta;\n  var endMarker = null;\n  var startInput = refined.start != null ? refined.start : refined.date;\n  startMeta = context.dateEnv.createMarkerMeta(startInput);\n  if (startMeta) {\n    startMarker = startMeta.marker;\n  } else if (!allowOpenRange) {\n    return null;\n  }\n  if (refined.end != null) {\n    endMeta = context.dateEnv.createMarkerMeta(refined.end);\n  }\n  if (allDay == null) {\n    if (defaultAllDay != null) {\n      allDay = defaultAllDay;\n    } else {\n      // fall back to the date props LAST\n      allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);\n    }\n  }\n  if (allDay && startMarker) {\n    startMarker = startOfDay(startMarker);\n  }\n  if (endMeta) {\n    endMarker = endMeta.marker;\n    if (allDay) {\n      endMarker = startOfDay(endMarker);\n    }\n    if (startMarker && endMarker <= startMarker) {\n      endMarker = null;\n    }\n  }\n  if (endMarker) {\n    hasEnd = true;\n  } else if (!allowOpenRange) {\n    hasEnd = context.options.forceEventDuration || false;\n    endMarker = context.dateEnv.add(startMarker, allDay ? context.options.defaultAllDayEventDuration : context.options.defaultTimedEventDuration);\n  }\n  return {\n    allDay: allDay,\n    hasEnd: hasEnd,\n    range: {\n      start: startMarker,\n      end: endMarker\n    },\n    forcedStartTzo: startMeta ? startMeta.forcedTzo : null,\n    forcedEndTzo: endMeta ? endMeta.forcedTzo : null\n  };\n}\nfunction computeIsDefaultAllDay(eventSource, context) {\n  var res = null;\n  if (eventSource) {\n    res = eventSource.defaultAllDay;\n  }\n  if (res == null) {\n    res = context.options.defaultAllDay;\n  }\n  return res;\n}\nfunction parseEvents(rawEvents, eventSource, context, allowOpenRange, defIdMap, instanceIdMap) {\n  var eventStore = createEmptyEventStore();\n  var eventRefiners = buildEventRefiners(context);\n  var _iterator7 = _createForOfIteratorHelper(rawEvents),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var rawEvent = _step7.value;\n      var tuple = parseEvent(rawEvent, eventSource, context, allowOpenRange, eventRefiners, defIdMap, instanceIdMap);\n      if (tuple) {\n        eventTupleToStore(tuple, eventStore);\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return eventStore;\n}\nfunction eventTupleToStore(tuple) {\n  var eventStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createEmptyEventStore();\n  eventStore.defs[tuple.def.defId] = tuple.def;\n  if (tuple.instance) {\n    eventStore.instances[tuple.instance.instanceId] = tuple.instance;\n  }\n  return eventStore;\n}\n// retrieves events that have the same groupId as the instance specified by `instanceId`\n// or they are the same as the instance.\n// why might instanceId not be in the store? an event from another calendar?\nfunction getRelevantEvents(eventStore, instanceId) {\n  var instance = eventStore.instances[instanceId];\n  if (instance) {\n    var def = eventStore.defs[instance.defId];\n    // get events/instances with same group\n    var newStore = filterEventStoreDefs(eventStore, function (lookDef) {\n      return isEventDefsGrouped(def, lookDef);\n    });\n    // add the original\n    // TODO: wish we could use eventTupleToStore or something like it\n    newStore.defs[def.defId] = def;\n    newStore.instances[instance.instanceId] = instance;\n    return newStore;\n  }\n  return createEmptyEventStore();\n}\nfunction isEventDefsGrouped(def0, def1) {\n  return Boolean(def0.groupId && def0.groupId === def1.groupId);\n}\nfunction createEmptyEventStore() {\n  return {\n    defs: {},\n    instances: {}\n  };\n}\nfunction mergeEventStores(store0, store1) {\n  return {\n    defs: Object.assign(Object.assign({}, store0.defs), store1.defs),\n    instances: Object.assign(Object.assign({}, store0.instances), store1.instances)\n  };\n}\nfunction filterEventStoreDefs(eventStore, filterFunc) {\n  var defs = filterHash(eventStore.defs, filterFunc);\n  var instances = filterHash(eventStore.instances, function (instance) {\n    return defs[instance.defId] // still exists?\n    ;\n  });\n\n  return {\n    defs: defs,\n    instances: instances\n  };\n}\nfunction excludeSubEventStore(master, sub) {\n  var defs = master.defs,\n    instances = master.instances;\n  var filteredDefs = {};\n  var filteredInstances = {};\n  for (var defId in defs) {\n    if (!sub.defs[defId]) {\n      // not explicitly excluded\n      filteredDefs[defId] = defs[defId];\n    }\n  }\n  for (var instanceId in instances) {\n    if (!sub.instances[instanceId] &&\n    // not explicitly excluded\n    filteredDefs[instances[instanceId].defId] // def wasn't filtered away\n    ) {\n      filteredInstances[instanceId] = instances[instanceId];\n    }\n  }\n  return {\n    defs: filteredDefs,\n    instances: filteredInstances\n  };\n}\nfunction normalizeConstraint(input, context) {\n  if (Array.isArray(input)) {\n    return parseEvents(input, null, context, true); // allowOpenRange=true\n  }\n\n  if (_typeof(input) === 'object' && input) {\n    // non-null object\n    return parseEvents([input], null, context, true); // allowOpenRange=true\n  }\n\n  if (input != null) {\n    return String(input);\n  }\n  return null;\n}\nfunction parseClassNames(raw) {\n  if (Array.isArray(raw)) {\n    return raw;\n  }\n  if (typeof raw === 'string') {\n    return raw.split(/\\s+/);\n  }\n  return [];\n}\n\n// TODO: better called \"EventSettings\" or \"EventConfig\"\n// TODO: move this file into structs\n// TODO: separate constraint/overlap/allow, because selection uses only that, not other props\nvar EVENT_UI_REFINERS = {\n  display: String,\n  editable: Boolean,\n  startEditable: Boolean,\n  durationEditable: Boolean,\n  constraint: identity,\n  overlap: identity,\n  allow: identity,\n  className: parseClassNames,\n  classNames: parseClassNames,\n  color: String,\n  backgroundColor: String,\n  borderColor: String,\n  textColor: String\n};\nvar EMPTY_EVENT_UI = {\n  display: null,\n  startEditable: null,\n  durationEditable: null,\n  constraints: [],\n  overlap: null,\n  allows: [],\n  backgroundColor: '',\n  borderColor: '',\n  textColor: '',\n  classNames: []\n};\nfunction createEventUi(refined, context) {\n  var constraint = normalizeConstraint(refined.constraint, context);\n  return {\n    display: refined.display || null,\n    startEditable: refined.startEditable != null ? refined.startEditable : refined.editable,\n    durationEditable: refined.durationEditable != null ? refined.durationEditable : refined.editable,\n    constraints: constraint != null ? [constraint] : [],\n    overlap: refined.overlap != null ? refined.overlap : null,\n    allows: refined.allow != null ? [refined.allow] : [],\n    backgroundColor: refined.backgroundColor || refined.color || '',\n    borderColor: refined.borderColor || refined.color || '',\n    textColor: refined.textColor || '',\n    classNames: (refined.className || []).concat(refined.classNames || []) // join singular and plural\n  };\n}\n// TODO: prevent against problems with <2 args!\nfunction combineEventUis(uis) {\n  return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);\n}\nfunction combineTwoEventUis(item0, item1) {\n  return {\n    display: item1.display != null ? item1.display : item0.display,\n    startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,\n    durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,\n    constraints: item0.constraints.concat(item1.constraints),\n    overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,\n    allows: item0.allows.concat(item1.allows),\n    backgroundColor: item1.backgroundColor || item0.backgroundColor,\n    borderColor: item1.borderColor || item0.borderColor,\n    textColor: item1.textColor || item0.textColor,\n    classNames: item0.classNames.concat(item1.classNames)\n  };\n}\nvar EVENT_SOURCE_REFINERS = {\n  id: String,\n  defaultAllDay: Boolean,\n  url: String,\n  format: String,\n  events: identity,\n  eventDataTransform: identity,\n  // for any network-related sources\n  success: identity,\n  failure: identity\n};\nfunction parseEventSource(raw, context) {\n  var refiners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : buildEventSourceRefiners(context);\n  var rawObj;\n  if (typeof raw === 'string') {\n    rawObj = {\n      url: raw\n    };\n  } else if (typeof raw === 'function' || Array.isArray(raw)) {\n    rawObj = {\n      events: raw\n    };\n  } else if (_typeof(raw) === 'object' && raw) {\n    // not null\n    rawObj = raw;\n  }\n  if (rawObj) {\n    var _refineProps = refineProps(rawObj, refiners),\n      refined = _refineProps.refined,\n      extra = _refineProps.extra;\n    var metaRes = buildEventSourceMeta(refined, context);\n    if (metaRes) {\n      return {\n        _raw: raw,\n        isFetching: false,\n        latestFetchId: '',\n        fetchRange: null,\n        defaultAllDay: refined.defaultAllDay,\n        eventDataTransform: refined.eventDataTransform,\n        success: refined.success,\n        failure: refined.failure,\n        publicId: refined.id || '',\n        sourceId: guid(),\n        sourceDefId: metaRes.sourceDefId,\n        meta: metaRes.meta,\n        ui: createEventUi(refined, context),\n        extendedProps: extra\n      };\n    }\n  }\n  return null;\n}\nfunction buildEventSourceRefiners(context) {\n  return Object.assign(Object.assign(Object.assign({}, EVENT_UI_REFINERS), EVENT_SOURCE_REFINERS), context.pluginHooks.eventSourceRefiners);\n}\nfunction buildEventSourceMeta(raw, context) {\n  var defs = context.pluginHooks.eventSourceDefs;\n  for (var i = defs.length - 1; i >= 0; i -= 1) {\n    // later-added plugins take precedence\n    var def = defs[i];\n    var meta = def.parseMeta(raw);\n    if (meta) {\n      return {\n        sourceDefId: i,\n        meta: meta\n      };\n    }\n  }\n  return null;\n}\nfunction reduceEventStore(eventStore, action, eventSources, dateProfile, context) {\n  switch (action.type) {\n    case 'RECEIVE_EVENTS':\n      // raw\n      return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, context);\n    case 'RESET_RAW_EVENTS':\n      return resetRawEvents(eventStore, eventSources[action.sourceId], action.rawEvents, dateProfile.activeRange, context);\n    case 'ADD_EVENTS':\n      // already parsed, but not expanded\n      return addEvent(eventStore, action.eventStore,\n      // new ones\n      dateProfile ? dateProfile.activeRange : null, context);\n    case 'RESET_EVENTS':\n      return action.eventStore;\n    case 'MERGE_EVENTS':\n      // already parsed and expanded\n      return mergeEventStores(eventStore, action.eventStore);\n    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n    case 'NEXT':\n    case 'CHANGE_DATE':\n    case 'CHANGE_VIEW_TYPE':\n      if (dateProfile) {\n        return expandRecurring(eventStore, dateProfile.activeRange, context);\n      }\n      return eventStore;\n    case 'REMOVE_EVENTS':\n      return excludeSubEventStore(eventStore, action.eventStore);\n    case 'REMOVE_EVENT_SOURCE':\n      return excludeEventsBySourceId(eventStore, action.sourceId);\n    case 'REMOVE_ALL_EVENT_SOURCES':\n      return filterEventStoreDefs(eventStore, function (eventDef) {\n        return !eventDef.sourceId // only keep events with no source id\n        ;\n      });\n\n    case 'REMOVE_ALL_EVENTS':\n      return createEmptyEventStore();\n    default:\n      return eventStore;\n  }\n}\nfunction receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, context) {\n  if (eventSource &&\n  // not already removed\n  fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources\n  ) {\n    var subset = parseEvents(transformRawEvents(rawEvents, eventSource, context), eventSource, context);\n    if (fetchRange) {\n      subset = expandRecurring(subset, fetchRange, context);\n    }\n    return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);\n  }\n  return eventStore;\n}\nfunction resetRawEvents(existingEventStore, eventSource, rawEvents, activeRange, context) {\n  var _buildPublicIdMaps = buildPublicIdMaps(existingEventStore),\n    defIdMap = _buildPublicIdMaps.defIdMap,\n    instanceIdMap = _buildPublicIdMaps.instanceIdMap;\n  var newEventStore = parseEvents(transformRawEvents(rawEvents, eventSource, context), eventSource, context, false, defIdMap, instanceIdMap);\n  return expandRecurring(newEventStore, activeRange, context);\n}\nfunction transformRawEvents(rawEvents, eventSource, context) {\n  var calEachTransform = context.options.eventDataTransform;\n  var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;\n  if (sourceEachTransform) {\n    rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);\n  }\n  if (calEachTransform) {\n    rawEvents = transformEachRawEvent(rawEvents, calEachTransform);\n  }\n  return rawEvents;\n}\nfunction transformEachRawEvent(rawEvents, func) {\n  var refinedEvents;\n  if (!func) {\n    refinedEvents = rawEvents;\n  } else {\n    refinedEvents = [];\n    var _iterator8 = _createForOfIteratorHelper(rawEvents),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var rawEvent = _step8.value;\n        var refinedEvent = func(rawEvent);\n        if (refinedEvent) {\n          refinedEvents.push(refinedEvent);\n        } else if (refinedEvent == null) {\n          refinedEvents.push(rawEvent);\n        } // if a different falsy value, do nothing\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n  }\n  return refinedEvents;\n}\nfunction addEvent(eventStore, subset, expandRange, context) {\n  if (expandRange) {\n    subset = expandRecurring(subset, expandRange, context);\n  }\n  return mergeEventStores(eventStore, subset);\n}\nfunction rezoneEventStoreDates(eventStore, oldDateEnv, newDateEnv) {\n  var defs = eventStore.defs;\n  var instances = mapHash(eventStore.instances, function (instance) {\n    var def = defs[instance.defId];\n    if (def.allDay) {\n      return instance; // isn't dependent on timezone\n    }\n\n    return Object.assign(Object.assign({}, instance), {\n      range: {\n        start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),\n        end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))\n      },\n      forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,\n      forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo\n    });\n  });\n  return {\n    defs: defs,\n    instances: instances\n  };\n}\nfunction excludeEventsBySourceId(eventStore, sourceId) {\n  return filterEventStoreDefs(eventStore, function (eventDef) {\n    return eventDef.sourceId !== sourceId;\n  });\n}\n// QUESTION: why not just return instances? do a general object-property-exclusion util\nfunction excludeInstances(eventStore, removals) {\n  return {\n    defs: eventStore.defs,\n    instances: filterHash(eventStore.instances, function (instance) {\n      return !removals[instance.instanceId];\n    })\n  };\n}\nfunction buildPublicIdMaps(eventStore) {\n  var defs = eventStore.defs,\n    instances = eventStore.instances;\n  var defIdMap = {};\n  var instanceIdMap = {};\n  for (var defId in defs) {\n    var def = defs[defId];\n    var publicId = def.publicId;\n    if (publicId) {\n      defIdMap[publicId] = defId;\n    }\n  }\n  for (var instanceId in instances) {\n    var instance = instances[instanceId];\n    var _def2 = defs[instance.defId];\n    var _publicId = _def2.publicId;\n    if (_publicId) {\n      instanceIdMap[_publicId] = instanceId;\n    }\n  }\n  return {\n    defIdMap: defIdMap,\n    instanceIdMap: instanceIdMap\n  };\n}\nvar Emitter = /*#__PURE__*/function () {\n  function Emitter() {\n    _classCallCheck(this, Emitter);\n    this.handlers = {};\n    this.thisContext = null;\n  }\n  return _createClass(Emitter, [{\n    key: \"setThisContext\",\n    value: function setThisContext(thisContext) {\n      this.thisContext = thisContext;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, handler) {\n      addToHash(this.handlers, type, handler);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, handler) {\n      removeFromHash(this.handlers, type, handler);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(type) {\n      var attachedHandlers = this.handlers[type] || [];\n      var optionHandler = this.options && this.options[type];\n      var handlers = [].concat(optionHandler || [], attachedHandlers);\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key5 = 1; _key5 < _len2; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n      var _iterator9 = _createForOfIteratorHelper(handlers),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var handler = _step9.value;\n          handler.apply(this.thisContext, args);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"hasHandlers\",\n    value: function hasHandlers(type) {\n      return Boolean(this.handlers[type] && this.handlers[type].length || this.options && this.options[type]);\n    }\n  }]);\n}();\nfunction addToHash(hash, type, handler) {\n  (hash[type] || (hash[type] = [])).push(handler);\n}\nfunction removeFromHash(hash, type, handler) {\n  if (handler) {\n    if (hash[type]) {\n      hash[type] = hash[type].filter(function (func) {\n        return func !== handler;\n      });\n    }\n  } else {\n    delete hash[type]; // remove all handler funcs for this type\n  }\n}\n\nvar DEF_DEFAULTS = {\n  startTime: '09:00',\n  endTime: '17:00',\n  daysOfWeek: [1, 2, 3, 4, 5],\n  display: 'inverse-background',\n  classNames: 'fc-non-business',\n  groupId: '_businessHours' // so multiple defs get grouped\n};\n/*\nTODO: pass around as EventDefHash!!!\n*/\nfunction parseBusinessHours(input, context) {\n  return parseEvents(refineInputs(input), null, context);\n}\nfunction refineInputs(input) {\n  var rawDefs;\n  if (input === true) {\n    rawDefs = [{}]; // will get DEF_DEFAULTS verbatim\n  } else if (Array.isArray(input)) {\n    // if specifying an array, every sub-definition NEEDS a day-of-week\n    rawDefs = input.filter(function (rawDef) {\n      return rawDef.daysOfWeek;\n    });\n  } else if (_typeof(input) === 'object' && input) {\n    // non-null object\n    rawDefs = [input];\n  } else {\n    // is probably false\n    rawDefs = [];\n  }\n  rawDefs = rawDefs.map(function (rawDef) {\n    return Object.assign(Object.assign({}, DEF_DEFAULTS), rawDef);\n  });\n  return rawDefs;\n}\nfunction triggerDateSelect(selection, pev, context) {\n  context.emitter.trigger('select', Object.assign(Object.assign({}, buildDateSpanApiWithContext(selection, context)), {\n    jsEvent: pev ? pev.origEvent : null,\n    view: context.viewApi || context.calendarApi.view\n  }));\n}\nfunction triggerDateUnselect(pev, context) {\n  context.emitter.trigger('unselect', {\n    jsEvent: pev ? pev.origEvent : null,\n    view: context.viewApi || context.calendarApi.view\n  });\n}\nfunction buildDateSpanApiWithContext(dateSpan, context) {\n  var props = {};\n  var _iterator10 = _createForOfIteratorHelper(context.pluginHooks.dateSpanTransforms),\n    _step10;\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var transform = _step10.value;\n      Object.assign(props, transform(dateSpan, context));\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  Object.assign(props, buildDateSpanApi(dateSpan, context.dateEnv));\n  return props;\n}\n// Given an event's allDay status and start date, return what its fallback end date should be.\n// TODO: rename to computeDefaultEventEnd\nfunction getDefaultEventEnd(allDay, marker, context) {\n  var dateEnv = context.dateEnv,\n    options = context.options;\n  var end = marker;\n  if (allDay) {\n    end = startOfDay(end);\n    end = dateEnv.add(end, options.defaultAllDayEventDuration);\n  } else {\n    end = dateEnv.add(end, options.defaultTimedEventDuration);\n  }\n  return end;\n}\n\n// applies the mutation to ALL defs/instances within the event store\nfunction applyMutationToEventStore(eventStore, eventConfigBase, mutation, context) {\n  var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);\n  var dest = createEmptyEventStore();\n  for (var defId in eventStore.defs) {\n    var def = eventStore.defs[defId];\n    dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, context);\n  }\n  for (var instanceId in eventStore.instances) {\n    var instance = eventStore.instances[instanceId];\n    var _def3 = dest.defs[instance.defId]; // important to grab the newly modified def\n    dest.instances[instanceId] = applyMutationToEventInstance(instance, _def3, eventConfigs[instance.defId], mutation, context);\n  }\n  return dest;\n}\nfunction applyMutationToEventDef(eventDef, eventConfig, mutation, context) {\n  var standardProps = mutation.standardProps || {};\n  // if hasEnd has not been specified, guess a good value based on deltas.\n  // if duration will change, there's no way the default duration will persist,\n  // and thus, we need to mark the event as having a real end\n  if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) {\n    standardProps.hasEnd = true; // TODO: is this mutation okay?\n  }\n\n  var copy = Object.assign(Object.assign(Object.assign({}, eventDef), standardProps), {\n    ui: Object.assign(Object.assign({}, eventDef.ui), standardProps.ui)\n  });\n  if (mutation.extendedProps) {\n    copy.extendedProps = Object.assign(Object.assign({}, copy.extendedProps), mutation.extendedProps);\n  }\n  var _iterator11 = _createForOfIteratorHelper(context.pluginHooks.eventDefMutationAppliers),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var applier = _step11.value;\n      applier(copy, mutation, context);\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n  if (!copy.hasEnd && context.options.forceEventDuration) {\n    copy.hasEnd = true;\n  }\n  return copy;\n}\nfunction applyMutationToEventInstance(eventInstance, eventDef,\n// must first be modified by applyMutationToEventDef\neventConfig, mutation, context) {\n  var dateEnv = context.dateEnv;\n  var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;\n  var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;\n  var copy = Object.assign({}, eventInstance);\n  if (forceAllDay) {\n    copy.range = computeAlignedDayRange(copy.range);\n  }\n  if (mutation.datesDelta && eventConfig.startEditable) {\n    copy.range = {\n      start: dateEnv.add(copy.range.start, mutation.datesDelta),\n      end: dateEnv.add(copy.range.end, mutation.datesDelta)\n    };\n  }\n  if (mutation.startDelta && eventConfig.durationEditable) {\n    copy.range = {\n      start: dateEnv.add(copy.range.start, mutation.startDelta),\n      end: copy.range.end\n    };\n  }\n  if (mutation.endDelta && eventConfig.durationEditable) {\n    copy.range = {\n      start: copy.range.start,\n      end: dateEnv.add(copy.range.end, mutation.endDelta)\n    };\n  }\n  if (clearEnd) {\n    copy.range = {\n      start: copy.range.start,\n      end: getDefaultEventEnd(eventDef.allDay, copy.range.start, context)\n    };\n  }\n  // in case event was all-day but the supplied deltas were not\n  // better util for this?\n  if (eventDef.allDay) {\n    copy.range = {\n      start: startOfDay(copy.range.start),\n      end: startOfDay(copy.range.end)\n    };\n  }\n  // handle invalid durations\n  if (copy.range.end < copy.range.start) {\n    copy.range.end = getDefaultEventEnd(eventDef.allDay, copy.range.start, context);\n  }\n  return copy;\n}\nvar EventSourceImpl = /*#__PURE__*/function () {\n  function EventSourceImpl(context, internalEventSource) {\n    _classCallCheck(this, EventSourceImpl);\n    this.context = context;\n    this.internalEventSource = internalEventSource;\n  }\n  return _createClass(EventSourceImpl, [{\n    key: \"remove\",\n    value: function remove() {\n      this.context.dispatch({\n        type: 'REMOVE_EVENT_SOURCE',\n        sourceId: this.internalEventSource.sourceId\n      });\n    }\n  }, {\n    key: \"refetch\",\n    value: function refetch() {\n      this.context.dispatch({\n        type: 'FETCH_EVENT_SOURCES',\n        sourceIds: [this.internalEventSource.sourceId],\n        isRefetch: true\n      });\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.internalEventSource.publicId;\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this.internalEventSource.meta.url;\n    }\n  }, {\n    key: \"format\",\n    get: function get() {\n      return this.internalEventSource.meta.format; // TODO: bad. not guaranteed\n    }\n  }]);\n}();\nvar EventImpl = /*#__PURE__*/function () {\n  // instance will be null if expressing a recurring event that has no current instances,\n  // OR if trying to validate an incoming external event that has no dates assigned\n  function EventImpl(context, def, instance) {\n    _classCallCheck(this, EventImpl);\n    this._context = context;\n    this._def = def;\n    this._instance = instance || null;\n  }\n  /*\n  TODO: make event struct more responsible for this\n  */\n  return _createClass(EventImpl, [{\n    key: \"setProp\",\n    value: function setProp(name, val) {\n      if (name in EVENT_DATE_REFINERS) {\n        console.warn('Could not set date-related prop \\'name\\'. Use one of the date-related methods instead.');\n        // TODO: make proper aliasing system?\n      } else if (name === 'id') {\n        val = EVENT_NON_DATE_REFINERS[name](val);\n        this.mutate({\n          standardProps: {\n            publicId: val\n          } // hardcoded internal name\n        });\n      } else if (name in EVENT_NON_DATE_REFINERS) {\n        val = EVENT_NON_DATE_REFINERS[name](val);\n        this.mutate({\n          standardProps: _defineProperty({}, name, val)\n        });\n      } else if (name in EVENT_UI_REFINERS) {\n        var ui = EVENT_UI_REFINERS[name](val);\n        if (name === 'color') {\n          ui = {\n            backgroundColor: val,\n            borderColor: val\n          };\n        } else if (name === 'editable') {\n          ui = {\n            startEditable: val,\n            durationEditable: val\n          };\n        } else {\n          ui = _defineProperty({}, name, val);\n        }\n        this.mutate({\n          standardProps: {\n            ui: ui\n          }\n        });\n      } else {\n        console.warn(\"Could not set prop '\".concat(name, \"'. Use setExtendedProp instead.\"));\n      }\n    }\n  }, {\n    key: \"setExtendedProp\",\n    value: function setExtendedProp(name, val) {\n      this.mutate({\n        extendedProps: _defineProperty({}, name, val)\n      });\n    }\n  }, {\n    key: \"setStart\",\n    value: function setStart(startInput) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var dateEnv = this._context.dateEnv;\n      var start = dateEnv.createMarker(startInput);\n      if (start && this._instance) {\n        // TODO: warning if parsed bad\n        var instanceRange = this._instance.range;\n        var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?\n        if (options.maintainDuration) {\n          this.mutate({\n            datesDelta: startDelta\n          });\n        } else {\n          this.mutate({\n            startDelta: startDelta\n          });\n        }\n      }\n    }\n  }, {\n    key: \"setEnd\",\n    value: function setEnd(endInput) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var dateEnv = this._context.dateEnv;\n      var end;\n      if (endInput != null) {\n        end = dateEnv.createMarker(endInput);\n        if (!end) {\n          return; // TODO: warning if parsed bad\n        }\n      }\n\n      if (this._instance) {\n        if (end) {\n          var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);\n          this.mutate({\n            endDelta: endDelta\n          });\n        } else {\n          this.mutate({\n            standardProps: {\n              hasEnd: false\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"setDates\",\n    value: function setDates(startInput, endInput) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var dateEnv = this._context.dateEnv;\n      var standardProps = {\n        allDay: options.allDay\n      };\n      var start = dateEnv.createMarker(startInput);\n      var end;\n      if (!start) {\n        return; // TODO: warning if parsed bad\n      }\n\n      if (endInput != null) {\n        end = dateEnv.createMarker(endInput);\n        if (!end) {\n          // TODO: warning if parsed bad\n          return;\n        }\n      }\n      if (this._instance) {\n        var instanceRange = this._instance.range;\n        // when computing the diff for an event being converted to all-day,\n        // compute diff off of the all-day values the way event-mutation does.\n        if (options.allDay === true) {\n          instanceRange = computeAlignedDayRange(instanceRange);\n        }\n        var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);\n        if (end) {\n          var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);\n          if (durationsEqual(startDelta, endDelta)) {\n            this.mutate({\n              datesDelta: startDelta,\n              standardProps: standardProps\n            });\n          } else {\n            this.mutate({\n              startDelta: startDelta,\n              endDelta: endDelta,\n              standardProps: standardProps\n            });\n          }\n        } else {\n          // means \"clear the end\"\n          standardProps.hasEnd = false;\n          this.mutate({\n            datesDelta: startDelta,\n            standardProps: standardProps\n          });\n        }\n      }\n    }\n  }, {\n    key: \"moveStart\",\n    value: function moveStart(deltaInput) {\n      var delta = createDuration(deltaInput);\n      if (delta) {\n        // TODO: warning if parsed bad\n        this.mutate({\n          startDelta: delta\n        });\n      }\n    }\n  }, {\n    key: \"moveEnd\",\n    value: function moveEnd(deltaInput) {\n      var delta = createDuration(deltaInput);\n      if (delta) {\n        // TODO: warning if parsed bad\n        this.mutate({\n          endDelta: delta\n        });\n      }\n    }\n  }, {\n    key: \"moveDates\",\n    value: function moveDates(deltaInput) {\n      var delta = createDuration(deltaInput);\n      if (delta) {\n        // TODO: warning if parsed bad\n        this.mutate({\n          datesDelta: delta\n        });\n      }\n    }\n  }, {\n    key: \"setAllDay\",\n    value: function setAllDay(allDay) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var standardProps = {\n        allDay: allDay\n      };\n      var maintainDuration = options.maintainDuration;\n      if (maintainDuration == null) {\n        maintainDuration = this._context.options.allDayMaintainDuration;\n      }\n      if (this._def.allDay !== allDay) {\n        standardProps.hasEnd = maintainDuration;\n      }\n      this.mutate({\n        standardProps: standardProps\n      });\n    }\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(formatInput) {\n      var dateEnv = this._context.dateEnv;\n      var instance = this._instance;\n      var formatter = createFormatter(formatInput);\n      if (this._def.hasEnd) {\n        return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {\n          forcedStartTzo: instance.forcedStartTzo,\n          forcedEndTzo: instance.forcedEndTzo\n        });\n      }\n      return dateEnv.format(instance.range.start, formatter, {\n        forcedTzo: instance.forcedStartTzo\n      });\n    }\n  }, {\n    key: \"mutate\",\n    value: function mutate(mutation) {\n      var instance = this._instance;\n      if (instance) {\n        var def = this._def;\n        var context = this._context;\n        var _context$getCurrentDa = context.getCurrentData(),\n          eventStore = _context$getCurrentDa.eventStore;\n        var relevantEvents = getRelevantEvents(eventStore, instance.instanceId);\n        var eventConfigBase = {\n          '': {\n            display: '',\n            startEditable: true,\n            durationEditable: true,\n            constraints: [],\n            overlap: null,\n            allows: [],\n            backgroundColor: '',\n            borderColor: '',\n            textColor: '',\n            classNames: []\n          }\n        };\n        relevantEvents = applyMutationToEventStore(relevantEvents, eventConfigBase, mutation, context);\n        var oldEvent = new EventImpl(context, def, instance); // snapshot\n        this._def = relevantEvents.defs[def.defId];\n        this._instance = relevantEvents.instances[instance.instanceId];\n        context.dispatch({\n          type: 'MERGE_EVENTS',\n          eventStore: relevantEvents\n        });\n        context.emitter.trigger('eventChange', {\n          oldEvent: oldEvent,\n          event: this,\n          relatedEvents: buildEventApis(relevantEvents, context, instance),\n          revert: function revert() {\n            context.dispatch({\n              type: 'RESET_EVENTS',\n              eventStore: eventStore // the ORIGINAL store\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var context = this._context;\n      var asStore = eventApiToStore(this);\n      context.dispatch({\n        type: 'REMOVE_EVENTS',\n        eventStore: asStore\n      });\n      context.emitter.trigger('eventRemove', {\n        event: this,\n        relatedEvents: [],\n        revert: function revert() {\n          context.dispatch({\n            type: 'MERGE_EVENTS',\n            eventStore: asStore\n          });\n        }\n      });\n    }\n  }, {\n    key: \"source\",\n    get: function get() {\n      var sourceId = this._def.sourceId;\n      if (sourceId) {\n        return new EventSourceImpl(this._context, this._context.getCurrentData().eventSources[sourceId]);\n      }\n      return null;\n    }\n  }, {\n    key: \"start\",\n    get: function get() {\n      return this._instance ? this._context.dateEnv.toDate(this._instance.range.start) : null;\n    }\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this._instance && this._def.hasEnd ? this._context.dateEnv.toDate(this._instance.range.end) : null;\n    }\n  }, {\n    key: \"startStr\",\n    get: function get() {\n      var instance = this._instance;\n      if (instance) {\n        return this._context.dateEnv.formatIso(instance.range.start, {\n          omitTime: this._def.allDay,\n          forcedTzo: instance.forcedStartTzo\n        });\n      }\n      return '';\n    }\n  }, {\n    key: \"endStr\",\n    get: function get() {\n      var instance = this._instance;\n      if (instance && this._def.hasEnd) {\n        return this._context.dateEnv.formatIso(instance.range.end, {\n          omitTime: this._def.allDay,\n          forcedTzo: instance.forcedEndTzo\n        });\n      }\n      return '';\n    }\n    // computable props that all access the def\n    // TODO: find a TypeScript-compatible way to do this at scale\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._def.publicId;\n    }\n  }, {\n    key: \"groupId\",\n    get: function get() {\n      return this._def.groupId;\n    }\n  }, {\n    key: \"allDay\",\n    get: function get() {\n      return this._def.allDay;\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this._def.title;\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this._def.url;\n    }\n  }, {\n    key: \"display\",\n    get: function get() {\n      return this._def.ui.display || 'auto';\n    } // bad. just normalize the type earlier\n  }, {\n    key: \"startEditable\",\n    get: function get() {\n      return this._def.ui.startEditable;\n    }\n  }, {\n    key: \"durationEditable\",\n    get: function get() {\n      return this._def.ui.durationEditable;\n    }\n  }, {\n    key: \"constraint\",\n    get: function get() {\n      return this._def.ui.constraints[0] || null;\n    }\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._def.ui.overlap;\n    }\n  }, {\n    key: \"allow\",\n    get: function get() {\n      return this._def.ui.allows[0] || null;\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      return this._def.ui.backgroundColor;\n    }\n  }, {\n    key: \"borderColor\",\n    get: function get() {\n      return this._def.ui.borderColor;\n    }\n  }, {\n    key: \"textColor\",\n    get: function get() {\n      return this._def.ui.textColor;\n    }\n    // NOTE: user can't modify these because Object.freeze was called in event-def parsing\n  }, {\n    key: \"classNames\",\n    get: function get() {\n      return this._def.ui.classNames;\n    }\n  }, {\n    key: \"extendedProps\",\n    get: function get() {\n      return this._def.extendedProps;\n    }\n  }, {\n    key: \"toPlainObject\",\n    value: function toPlainObject() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var def = this._def;\n      var ui = def.ui;\n      var startStr = this.startStr,\n        endStr = this.endStr;\n      var res = {\n        allDay: def.allDay\n      };\n      if (def.title) {\n        res.title = def.title;\n      }\n      if (startStr) {\n        res.start = startStr;\n      }\n      if (endStr) {\n        res.end = endStr;\n      }\n      if (def.publicId) {\n        res.id = def.publicId;\n      }\n      if (def.groupId) {\n        res.groupId = def.groupId;\n      }\n      if (def.url) {\n        res.url = def.url;\n      }\n      if (ui.display && ui.display !== 'auto') {\n        res.display = ui.display;\n      }\n      // TODO: what about recurring-event properties???\n      // TODO: include startEditable/durationEditable/constraint/overlap/allow\n      if (settings.collapseColor && ui.backgroundColor && ui.backgroundColor === ui.borderColor) {\n        res.color = ui.backgroundColor;\n      } else {\n        if (ui.backgroundColor) {\n          res.backgroundColor = ui.backgroundColor;\n        }\n        if (ui.borderColor) {\n          res.borderColor = ui.borderColor;\n        }\n      }\n      if (ui.textColor) {\n        res.textColor = ui.textColor;\n      }\n      if (ui.classNames.length) {\n        res.classNames = ui.classNames;\n      }\n      if (Object.keys(def.extendedProps).length) {\n        if (settings.collapseExtendedProps) {\n          Object.assign(res, def.extendedProps);\n        } else {\n          res.extendedProps = def.extendedProps;\n        }\n      }\n      return res;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toPlainObject();\n    }\n  }]);\n}();\nfunction eventApiToStore(eventApi) {\n  var def = eventApi._def;\n  var instance = eventApi._instance;\n  return {\n    defs: _defineProperty({}, def.defId, def),\n    instances: instance ? _defineProperty({}, instance.instanceId, instance) : {}\n  };\n}\nfunction buildEventApis(eventStore, context, excludeInstance) {\n  var defs = eventStore.defs,\n    instances = eventStore.instances;\n  var eventApis = [];\n  var excludeInstanceId = excludeInstance ? excludeInstance.instanceId : '';\n  for (var id in instances) {\n    var instance = instances[id];\n    var def = defs[instance.defId];\n    if (instance.instanceId !== excludeInstanceId) {\n      eventApis.push(new EventImpl(context, def, instance));\n    }\n  }\n  return eventApis;\n}\n\n/*\nSpecifying nextDayThreshold signals that all-day ranges should be sliced.\n*/\nfunction sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {\n  var inverseBgByGroupId = {};\n  var inverseBgByDefId = {};\n  var defByGroupId = {};\n  var bgRanges = [];\n  var fgRanges = [];\n  var eventUis = compileEventUis(eventStore.defs, eventUiBases);\n  for (var defId in eventStore.defs) {\n    var def = eventStore.defs[defId];\n    var ui = eventUis[def.defId];\n    if (ui.display === 'inverse-background') {\n      if (def.groupId) {\n        inverseBgByGroupId[def.groupId] = [];\n        if (!defByGroupId[def.groupId]) {\n          defByGroupId[def.groupId] = def;\n        }\n      } else {\n        inverseBgByDefId[defId] = [];\n      }\n    }\n  }\n  for (var instanceId in eventStore.instances) {\n    var instance = eventStore.instances[instanceId];\n    var _def4 = eventStore.defs[instance.defId];\n    var _ui2 = eventUis[_def4.defId];\n    var origRange = instance.range;\n    var normalRange = !_def4.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;\n    var slicedRange = intersectRanges(normalRange, framingRange);\n    if (slicedRange) {\n      if (_ui2.display === 'inverse-background') {\n        if (_def4.groupId) {\n          inverseBgByGroupId[_def4.groupId].push(slicedRange);\n        } else {\n          inverseBgByDefId[instance.defId].push(slicedRange);\n        }\n      } else if (_ui2.display !== 'none') {\n        (_ui2.display === 'background' ? bgRanges : fgRanges).push({\n          def: _def4,\n          ui: _ui2,\n          instance: instance,\n          range: slicedRange,\n          isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),\n          isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()\n        });\n      }\n    }\n  }\n  for (var groupId in inverseBgByGroupId) {\n    // BY GROUP\n    var ranges = inverseBgByGroupId[groupId];\n    var invertedRanges = invertRanges(ranges, framingRange);\n    var _iterator12 = _createForOfIteratorHelper(invertedRanges),\n      _step12;\n    try {\n      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n        var invertedRange = _step12.value;\n        var _def5 = defByGroupId[groupId];\n        var _ui3 = eventUis[_def5.defId];\n        bgRanges.push({\n          def: _def5,\n          ui: _ui3,\n          instance: null,\n          range: invertedRange,\n          isStart: false,\n          isEnd: false\n        });\n      }\n    } catch (err) {\n      _iterator12.e(err);\n    } finally {\n      _iterator12.f();\n    }\n  }\n  for (var _defId in inverseBgByDefId) {\n    var _ranges = inverseBgByDefId[_defId];\n    var _invertedRanges = invertRanges(_ranges, framingRange);\n    var _iterator13 = _createForOfIteratorHelper(_invertedRanges),\n      _step13;\n    try {\n      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n        var _invertedRange = _step13.value;\n        bgRanges.push({\n          def: eventStore.defs[_defId],\n          ui: eventUis[_defId],\n          instance: null,\n          range: _invertedRange,\n          isStart: false,\n          isEnd: false\n        });\n      }\n    } catch (err) {\n      _iterator13.e(err);\n    } finally {\n      _iterator13.f();\n    }\n  }\n  return {\n    bg: bgRanges,\n    fg: fgRanges\n  };\n}\nfunction hasBgRendering(def) {\n  return def.ui.display === 'background' || def.ui.display === 'inverse-background';\n}\nfunction setElSeg(el, seg) {\n  el.fcSeg = seg;\n}\nfunction getElSeg(el) {\n  return el.fcSeg || el.parentNode.fcSeg ||\n  // for the harness\n  null;\n}\n// event ui computation\nfunction compileEventUis(eventDefs, eventUiBases) {\n  return mapHash(eventDefs, function (eventDef) {\n    return compileEventUi(eventDef, eventUiBases);\n  });\n}\nfunction compileEventUi(eventDef, eventUiBases) {\n  var uis = [];\n  if (eventUiBases['']) {\n    uis.push(eventUiBases['']);\n  }\n  if (eventUiBases[eventDef.defId]) {\n    uis.push(eventUiBases[eventDef.defId]);\n  }\n  uis.push(eventDef.ui);\n  return combineEventUis(uis);\n}\nfunction sortEventSegs(segs, eventOrderSpecs) {\n  var objs = segs.map(buildSegCompareObj);\n  objs.sort(function (obj0, obj1) {\n    return compareByFieldSpecs(obj0, obj1, eventOrderSpecs);\n  });\n  return objs.map(function (c) {\n    return c._seg;\n  });\n}\n// returns a object with all primitive props that can be compared\nfunction buildSegCompareObj(seg) {\n  var eventRange = seg.eventRange;\n  var eventDef = eventRange.def;\n  var range = eventRange.instance ? eventRange.instance.range : eventRange.range;\n  var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events\n  var end = range.end ? range.end.valueOf() : 0; // \"\n  return Object.assign(Object.assign(Object.assign({}, eventDef.extendedProps), eventDef), {\n    id: eventDef.publicId,\n    start: start,\n    end: end,\n    duration: end - start,\n    allDay: Number(eventDef.allDay),\n    _seg: seg\n  });\n}\nfunction computeSegDraggable(seg, context) {\n  var pluginHooks = context.pluginHooks;\n  var transformers = pluginHooks.isDraggableTransformers;\n  var _seg$eventRange = seg.eventRange,\n    def = _seg$eventRange.def,\n    ui = _seg$eventRange.ui;\n  var val = ui.startEditable;\n  var _iterator14 = _createForOfIteratorHelper(transformers),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var transformer = _step14.value;\n      val = transformer(val, def, ui, context);\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return val;\n}\nfunction computeSegStartResizable(seg, context) {\n  return seg.isStart && seg.eventRange.ui.durationEditable && context.options.eventResizableFromStart;\n}\nfunction computeSegEndResizable(seg, context) {\n  return seg.isEnd && seg.eventRange.ui.durationEditable;\n}\nfunction buildSegTimeText(seg, timeFormat, context, defaultDisplayEventTime,\n// defaults to true\ndefaultDisplayEventEnd,\n// defaults to true\nstartOverride, endOverride) {\n  var dateEnv = context.dateEnv,\n    options = context.options;\n  var displayEventTime = options.displayEventTime,\n    displayEventEnd = options.displayEventEnd;\n  var eventDef = seg.eventRange.def;\n  var eventInstance = seg.eventRange.instance;\n  if (displayEventTime == null) {\n    displayEventTime = defaultDisplayEventTime !== false;\n  }\n  if (displayEventEnd == null) {\n    displayEventEnd = defaultDisplayEventEnd !== false;\n  }\n  var wholeEventStart = eventInstance.range.start;\n  var wholeEventEnd = eventInstance.range.end;\n  var segStart = startOverride || seg.start || seg.eventRange.range.start;\n  var segEnd = endOverride || seg.end || seg.eventRange.range.end;\n  var isStartDay = startOfDay(wholeEventStart).valueOf() === startOfDay(segStart).valueOf();\n  var isEndDay = startOfDay(addMs(wholeEventEnd, -1)).valueOf() === startOfDay(addMs(segEnd, -1)).valueOf();\n  if (displayEventTime && !eventDef.allDay && (isStartDay || isEndDay)) {\n    segStart = isStartDay ? wholeEventStart : segStart;\n    segEnd = isEndDay ? wholeEventEnd : segEnd;\n    if (displayEventEnd && eventDef.hasEnd) {\n      return dateEnv.formatRange(segStart, segEnd, timeFormat, {\n        forcedStartTzo: startOverride ? null : eventInstance.forcedStartTzo,\n        forcedEndTzo: endOverride ? null : eventInstance.forcedEndTzo\n      });\n    }\n    return dateEnv.format(segStart, timeFormat, {\n      forcedTzo: startOverride ? null : eventInstance.forcedStartTzo // nooooo, same\n    });\n  }\n\n  return '';\n}\nfunction getSegMeta(seg, todayRange, nowDate) {\n  var segRange = seg.eventRange.range;\n  return {\n    isPast: segRange.end <= (nowDate || todayRange.start),\n    isFuture: segRange.start >= (nowDate || todayRange.end),\n    isToday: todayRange && rangeContainsMarker(todayRange, segRange.start)\n  };\n}\nfunction getEventClassNames(props) {\n  var classNames = ['fc-event'];\n  if (props.isMirror) {\n    classNames.push('fc-event-mirror');\n  }\n  if (props.isDraggable) {\n    classNames.push('fc-event-draggable');\n  }\n  if (props.isStartResizable || props.isEndResizable) {\n    classNames.push('fc-event-resizable');\n  }\n  if (props.isDragging) {\n    classNames.push('fc-event-dragging');\n  }\n  if (props.isResizing) {\n    classNames.push('fc-event-resizing');\n  }\n  if (props.isSelected) {\n    classNames.push('fc-event-selected');\n  }\n  if (props.isStart) {\n    classNames.push('fc-event-start');\n  }\n  if (props.isEnd) {\n    classNames.push('fc-event-end');\n  }\n  if (props.isPast) {\n    classNames.push('fc-event-past');\n  }\n  if (props.isToday) {\n    classNames.push('fc-event-today');\n  }\n  if (props.isFuture) {\n    classNames.push('fc-event-future');\n  }\n  return classNames;\n}\nfunction buildEventRangeKey(eventRange) {\n  return eventRange.instance ? eventRange.instance.instanceId : \"\".concat(eventRange.def.defId, \":\").concat(eventRange.range.start.toISOString());\n  // inverse-background events don't have specific instances. TODO: better solution\n}\n\nfunction getSegAnchorAttrs(seg, context) {\n  var _seg$eventRange2 = seg.eventRange,\n    def = _seg$eventRange2.def,\n    instance = _seg$eventRange2.instance;\n  var url = def.url;\n  if (url) {\n    return {\n      href: url\n    };\n  }\n  var emitter = context.emitter,\n    options = context.options;\n  var eventInteractive = options.eventInteractive;\n  if (eventInteractive == null) {\n    eventInteractive = def.interactive;\n    if (eventInteractive == null) {\n      eventInteractive = Boolean(emitter.hasHandlers('eventClick'));\n    }\n  }\n  // mock what happens in EventClicking\n  if (eventInteractive) {\n    // only attach keyboard-related handlers because click handler is already done in EventClicking\n    return createAriaKeyboardAttrs(function (ev) {\n      emitter.trigger('eventClick', {\n        el: ev.target,\n        event: new EventImpl(context, def, instance),\n        jsEvent: ev,\n        view: context.viewApi\n      });\n    });\n  }\n  return {};\n}\nvar STANDARD_PROPS = {\n  start: identity,\n  end: identity,\n  allDay: Boolean\n};\nfunction parseDateSpan(raw, dateEnv, defaultDuration) {\n  var span = parseOpenDateSpan(raw, dateEnv);\n  var range = span.range;\n  if (!range.start) {\n    return null;\n  }\n  if (!range.end) {\n    if (defaultDuration == null) {\n      return null;\n    }\n    range.end = dateEnv.add(range.start, defaultDuration);\n  }\n  return span;\n}\n/*\nTODO: somehow combine with parseRange?\nWill return null if the start/end props were present but parsed invalidly.\n*/\nfunction parseOpenDateSpan(raw, dateEnv) {\n  var _refineProps2 = refineProps(raw, STANDARD_PROPS),\n    standardProps = _refineProps2.refined,\n    extra = _refineProps2.extra;\n  var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;\n  var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;\n  var allDay = standardProps.allDay;\n  if (allDay == null) {\n    allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);\n  }\n  return Object.assign({\n    range: {\n      start: startMeta ? startMeta.marker : null,\n      end: endMeta ? endMeta.marker : null\n    },\n    allDay: allDay\n  }, extra);\n}\nfunction isDateSpansEqual(span0, span1) {\n  return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);\n}\n// the NON-DATE-RELATED props\nfunction isSpanPropsEqual(span0, span1) {\n  for (var propName in span1) {\n    if (propName !== 'range' && propName !== 'allDay') {\n      if (span0[propName] !== span1[propName]) {\n        return false;\n      }\n    }\n  }\n  // are there any props that span0 has that span1 DOESN'T have?\n  // both have range/allDay, so no need to special-case.\n  for (var _propName2 in span0) {\n    if (!(_propName2 in span1)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction buildDateSpanApi(span, dateEnv) {\n  return Object.assign(Object.assign({}, buildRangeApi(span.range, dateEnv, span.allDay)), {\n    allDay: span.allDay\n  });\n}\nfunction buildRangeApiWithTimeZone(range, dateEnv, omitTime) {\n  return Object.assign(Object.assign({}, buildRangeApi(range, dateEnv, omitTime)), {\n    timeZone: dateEnv.timeZone\n  });\n}\nfunction buildRangeApi(range, dateEnv, omitTime) {\n  return {\n    start: dateEnv.toDate(range.start),\n    end: dateEnv.toDate(range.end),\n    startStr: dateEnv.formatIso(range.start, {\n      omitTime: omitTime\n    }),\n    endStr: dateEnv.formatIso(range.end, {\n      omitTime: omitTime\n    })\n  };\n}\nfunction fabricateEventRange(dateSpan, eventUiBases, context) {\n  var res = refineEventDef({\n    editable: false\n  }, context);\n  var def = parseEventDef(res.refined, res.extra, '',\n  // sourceId\n  dateSpan.allDay, true,\n  // hasEnd\n  context);\n  return {\n    def: def,\n    ui: compileEventUi(def, eventUiBases),\n    instance: createEventInstance(def.defId, dateSpan.range),\n    range: dateSpan.range,\n    isStart: true,\n    isEnd: true\n  };\n}\n\n/*\ngiven a function that resolves a result asynchronously.\nthe function can either call passed-in success and failure callbacks,\nor it can return a promise.\nif you need to pass additional params to func, bind them first.\n*/\nfunction unpromisify(func, normalizedSuccessCallback, normalizedFailureCallback) {\n  // guard against success/failure callbacks being called more than once\n  // and guard against a promise AND callback being used together.\n  var isResolved = false;\n  var wrappedSuccess = function wrappedSuccess(res) {\n    if (!isResolved) {\n      isResolved = true;\n      normalizedSuccessCallback(res);\n    }\n  };\n  var wrappedFailure = function wrappedFailure(error) {\n    if (!isResolved) {\n      isResolved = true;\n      normalizedFailureCallback(error);\n    }\n  };\n  var res = func(wrappedSuccess, wrappedFailure);\n  if (res && typeof res.then === 'function') {\n    res.then(wrappedSuccess, wrappedFailure);\n  }\n}\nvar JsonRequestError = /*#__PURE__*/function (_Error) {\n  function JsonRequestError(message, response) {\n    var _this8;\n    _classCallCheck(this, JsonRequestError);\n    _this8 = _callSuper(this, JsonRequestError, [message]);\n    _this8.response = response;\n    return _this8;\n  }\n  _inherits(JsonRequestError, _Error);\n  return _createClass(JsonRequestError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nfunction requestJson(method, url, params) {\n  method = method.toUpperCase();\n  var fetchOptions = {\n    method: method\n  };\n  if (method === 'GET') {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + new URLSearchParams(params);\n  } else {\n    fetchOptions.body = new URLSearchParams(params);\n    fetchOptions.headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n  }\n  return fetch(url, fetchOptions).then(function (fetchRes) {\n    if (fetchRes.ok) {\n      return fetchRes.json().then(function (parsedResponse) {\n        return [parsedResponse, fetchRes];\n      }, function () {\n        throw new JsonRequestError('Failure parsing JSON', fetchRes);\n      });\n    } else {\n      throw new JsonRequestError('Request failed', fetchRes);\n    }\n  });\n}\nvar canVGrowWithinCell;\nfunction getCanVGrowWithinCell() {\n  if (canVGrowWithinCell == null) {\n    canVGrowWithinCell = computeCanVGrowWithinCell();\n  }\n  return canVGrowWithinCell;\n}\nfunction computeCanVGrowWithinCell() {\n  // for SSR, because this function is call immediately at top-level\n  // TODO: just make this logic execute top-level, immediately, instead of doing lazily\n  if (typeof document === 'undefined') {\n    return true;\n  }\n  var el = document.createElement('div');\n  el.style.position = 'absolute';\n  el.style.top = '0px';\n  el.style.left = '0px';\n  el.innerHTML = '<table><tr><td><div></div></td></tr></table>';\n  el.querySelector('table').style.height = '100px';\n  el.querySelector('div').style.height = '100%';\n  document.body.appendChild(el);\n  var div = el.querySelector('div');\n  var possible = div.offsetHeight > 0;\n  document.body.removeChild(el);\n  return possible;\n}\nvar CalendarRoot = /*#__PURE__*/function (_BaseComponent3) {\n  function CalendarRoot() {\n    var _this9;\n    _classCallCheck(this, CalendarRoot);\n    _this9 = _callSuper(this, CalendarRoot, arguments);\n    _this9.state = {\n      forPrint: false\n    };\n    _this9.handleBeforePrint = function () {\n      flushSync(function () {\n        _this9.setState({\n          forPrint: true\n        });\n      });\n    };\n    _this9.handleAfterPrint = function () {\n      flushSync(function () {\n        _this9.setState({\n          forPrint: false\n        });\n      });\n    };\n    return _this9;\n  }\n  _inherits(CalendarRoot, _BaseComponent3);\n  return _createClass(CalendarRoot, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var options = props.options;\n      var forPrint = this.state.forPrint;\n      var isHeightAuto = forPrint || options.height === 'auto' || options.contentHeight === 'auto';\n      var height = !isHeightAuto && options.height != null ? options.height : '';\n      var classNames = ['fc', forPrint ? 'fc-media-print' : 'fc-media-screen', \"fc-direction-\".concat(options.direction), props.theme.getClass('root')];\n      if (!getCanVGrowWithinCell()) {\n        classNames.push('fc-liquid-hack');\n      }\n      return props.children(classNames, height, isHeightAuto, forPrint);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var emitter = this.props.emitter;\n      emitter.on('_beforeprint', this.handleBeforePrint);\n      emitter.on('_afterprint', this.handleAfterPrint);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var emitter = this.props.emitter;\n      emitter.off('_beforeprint', this.handleBeforePrint);\n      emitter.off('_afterprint', this.handleAfterPrint);\n    }\n  }]);\n}(BaseComponent);\nvar Interaction = /*#__PURE__*/function () {\n  function Interaction(settings) {\n    _classCallCheck(this, Interaction);\n    this.component = settings.component;\n    this.isHitComboAllowed = settings.isHitComboAllowed || null;\n  }\n  return _createClass(Interaction, [{\n    key: \"destroy\",\n    value: function destroy() {}\n  }]);\n}();\nfunction parseInteractionSettings(component, input) {\n  return {\n    component: component,\n    el: input.el,\n    useEventCenter: input.useEventCenter != null ? input.useEventCenter : true,\n    isHitComboAllowed: input.isHitComboAllowed || null\n  };\n}\nfunction interactionSettingsToStore(settings) {\n  return _defineProperty({}, settings.component.uid, settings);\n}\n// global state\nvar interactionSettingsStore = {};\nvar CalendarImpl = /*#__PURE__*/function () {\n  function CalendarImpl() {\n    _classCallCheck(this, CalendarImpl);\n  }\n  return _createClass(CalendarImpl, [{\n    key: \"getCurrentData\",\n    value: function getCurrentData() {\n      return this.currentDataManager.getCurrentData();\n    }\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(action) {\n      this.currentDataManager.dispatch(action);\n    }\n  }, {\n    key: \"view\",\n    get: function get() {\n      return this.getCurrentData().viewApi;\n    }\n  }, {\n    key: \"batchRendering\",\n    value: function batchRendering(callback) {\n      callback();\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      this.trigger('_resize', true);\n    }\n    // Options\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"setOption\",\n    value: function setOption(name, val) {\n      this.dispatch({\n        type: 'SET_OPTION',\n        optionName: name,\n        rawOptionValue: val\n      });\n    }\n  }, {\n    key: \"getOption\",\n    value: function getOption(name) {\n      return this.currentDataManager.currentCalendarOptionsInput[name];\n    }\n  }, {\n    key: \"getAvailableLocaleCodes\",\n    value: function getAvailableLocaleCodes() {\n      return Object.keys(this.getCurrentData().availableRawLocales);\n    }\n    // Trigger\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"on\",\n    value: function on(handlerName, handler) {\n      var currentDataManager = this.currentDataManager;\n      if (currentDataManager.currentCalendarOptionsRefiners[handlerName]) {\n        currentDataManager.emitter.on(handlerName, handler);\n      } else {\n        console.warn(\"Unknown listener name '\".concat(handlerName, \"'\"));\n      }\n    }\n  }, {\n    key: \"off\",\n    value: function off(handlerName, handler) {\n      this.currentDataManager.emitter.off(handlerName, handler);\n    }\n    // not meant for public use\n  }, {\n    key: \"trigger\",\n    value: function trigger(handlerName) {\n      var _this$currentDataMana;\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key6 = 1; _key6 < _len3; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n      (_this$currentDataMana = this.currentDataManager.emitter).trigger.apply(_this$currentDataMana, [handlerName].concat(args));\n    }\n    // View\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"changeView\",\n    value: function changeView(viewType, dateOrRange) {\n      var _this10 = this;\n      this.batchRendering(function () {\n        _this10.unselect();\n        if (dateOrRange) {\n          if (dateOrRange.start && dateOrRange.end) {\n            // a range\n            _this10.dispatch({\n              type: 'CHANGE_VIEW_TYPE',\n              viewType: viewType\n            });\n            _this10.dispatch({\n              type: 'SET_OPTION',\n              optionName: 'visibleRange',\n              rawOptionValue: dateOrRange\n            });\n          } else {\n            var _this10$getCurrentDat = _this10.getCurrentData(),\n              dateEnv = _this10$getCurrentDat.dateEnv;\n            _this10.dispatch({\n              type: 'CHANGE_VIEW_TYPE',\n              viewType: viewType,\n              dateMarker: dateEnv.createMarker(dateOrRange)\n            });\n          }\n        } else {\n          _this10.dispatch({\n            type: 'CHANGE_VIEW_TYPE',\n            viewType: viewType\n          });\n        }\n      });\n    }\n    // Forces navigation to a view for the given date.\n    // `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n    // needs to change\n  }, {\n    key: \"zoomTo\",\n    value: function zoomTo(dateMarker, viewType) {\n      var state = this.getCurrentData();\n      var spec;\n      viewType = viewType || 'day'; // day is default zoom\n      spec = state.viewSpecs[viewType] || this.getUnitViewSpec(viewType);\n      this.unselect();\n      if (spec) {\n        this.dispatch({\n          type: 'CHANGE_VIEW_TYPE',\n          viewType: spec.type,\n          dateMarker: dateMarker\n        });\n      } else {\n        this.dispatch({\n          type: 'CHANGE_DATE',\n          dateMarker: dateMarker\n        });\n      }\n    }\n    // Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n    // Preference is given to views that have corresponding buttons.\n  }, {\n    key: \"getUnitViewSpec\",\n    value: function getUnitViewSpec(unit) {\n      var _this$getCurrentData = this.getCurrentData(),\n        viewSpecs = _this$getCurrentData.viewSpecs,\n        toolbarConfig = _this$getCurrentData.toolbarConfig;\n      var viewTypes = [].concat(toolbarConfig.header ? toolbarConfig.header.viewsWithButtons : [], toolbarConfig.footer ? toolbarConfig.footer.viewsWithButtons : []);\n      var i;\n      var spec;\n      for (var viewType in viewSpecs) {\n        viewTypes.push(viewType);\n      }\n      for (i = 0; i < viewTypes.length; i += 1) {\n        spec = viewSpecs[viewTypes[i]];\n        if (spec) {\n          if (spec.singleUnit === unit) {\n            return spec;\n          }\n        }\n      }\n      return null;\n    }\n    // Current Date\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"prev\",\n    value: function prev() {\n      this.unselect();\n      this.dispatch({\n        type: 'PREV'\n      });\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.unselect();\n      this.dispatch({\n        type: 'NEXT'\n      });\n    }\n  }, {\n    key: \"prevYear\",\n    value: function prevYear() {\n      var state = this.getCurrentData();\n      this.unselect();\n      this.dispatch({\n        type: 'CHANGE_DATE',\n        dateMarker: state.dateEnv.addYears(state.currentDate, -1)\n      });\n    }\n  }, {\n    key: \"nextYear\",\n    value: function nextYear() {\n      var state = this.getCurrentData();\n      this.unselect();\n      this.dispatch({\n        type: 'CHANGE_DATE',\n        dateMarker: state.dateEnv.addYears(state.currentDate, 1)\n      });\n    }\n  }, {\n    key: \"today\",\n    value: function today() {\n      var state = this.getCurrentData();\n      this.unselect();\n      this.dispatch({\n        type: 'CHANGE_DATE',\n        dateMarker: getNow(state.calendarOptions.now, state.dateEnv)\n      });\n    }\n  }, {\n    key: \"gotoDate\",\n    value: function gotoDate(zonedDateInput) {\n      var state = this.getCurrentData();\n      this.unselect();\n      this.dispatch({\n        type: 'CHANGE_DATE',\n        dateMarker: state.dateEnv.createMarker(zonedDateInput)\n      });\n    }\n  }, {\n    key: \"incrementDate\",\n    value: function incrementDate(deltaInput) {\n      var state = this.getCurrentData();\n      var delta = createDuration(deltaInput);\n      if (delta) {\n        // else, warn about invalid input?\n        this.unselect();\n        this.dispatch({\n          type: 'CHANGE_DATE',\n          dateMarker: state.dateEnv.add(state.currentDate, delta)\n        });\n      }\n    }\n  }, {\n    key: \"getDate\",\n    value: function getDate() {\n      var state = this.getCurrentData();\n      return state.dateEnv.toDate(state.currentDate);\n    }\n    // Date Formatting Utils\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(d, formatter) {\n      var _this$getCurrentData2 = this.getCurrentData(),\n        dateEnv = _this$getCurrentData2.dateEnv;\n      return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));\n    }\n    // `settings` is for formatter AND isEndExclusive\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(d0, d1, settings) {\n      var _this$getCurrentData3 = this.getCurrentData(),\n        dateEnv = _this$getCurrentData3.dateEnv;\n      return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings), settings);\n    }\n  }, {\n    key: \"formatIso\",\n    value: function formatIso(d, omitTime) {\n      var _this$getCurrentData4 = this.getCurrentData(),\n        dateEnv = _this$getCurrentData4.dateEnv;\n      return dateEnv.formatIso(dateEnv.createMarker(d), {\n        omitTime: omitTime\n      });\n    }\n    // Date Selection / Event Selection / DayClick\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"select\",\n    value: function select(dateOrObj, endDate) {\n      var selectionInput;\n      if (endDate == null) {\n        if (dateOrObj.start != null) {\n          selectionInput = dateOrObj;\n        } else {\n          selectionInput = {\n            start: dateOrObj,\n            end: null\n          };\n        }\n      } else {\n        selectionInput = {\n          start: dateOrObj,\n          end: endDate\n        };\n      }\n      var state = this.getCurrentData();\n      var selection = parseDateSpan(selectionInput, state.dateEnv, createDuration({\n        days: 1\n      }));\n      if (selection) {\n        // throw parse error otherwise?\n        this.dispatch({\n          type: 'SELECT_DATES',\n          selection: selection\n        });\n        triggerDateSelect(selection, null, state);\n      }\n    }\n  }, {\n    key: \"unselect\",\n    value: function unselect(pev) {\n      var state = this.getCurrentData();\n      if (state.dateSelection) {\n        this.dispatch({\n          type: 'UNSELECT_DATES'\n        });\n        triggerDateUnselect(pev, state);\n      }\n    }\n    // Public Events API\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"addEvent\",\n    value: function addEvent(eventInput, sourceInput) {\n      if (eventInput instanceof EventImpl) {\n        var def = eventInput._def;\n        var instance = eventInput._instance;\n        var currentData = this.getCurrentData();\n        // not already present? don't want to add an old snapshot\n        if (!currentData.eventStore.defs[def.defId]) {\n          this.dispatch({\n            type: 'ADD_EVENTS',\n            eventStore: eventTupleToStore({\n              def: def,\n              instance: instance\n            }) // TODO: better util for two args?\n          });\n\n          this.triggerEventAdd(eventInput);\n        }\n        return eventInput;\n      }\n      var state = this.getCurrentData();\n      var eventSource;\n      if (sourceInput instanceof EventSourceImpl) {\n        eventSource = sourceInput.internalEventSource;\n      } else if (typeof sourceInput === 'boolean') {\n        if (sourceInput) {\n          // true. part of the first event source\n          var _hashValuesToArray = hashValuesToArray(state.eventSources);\n          var _hashValuesToArray2 = _slicedToArray(_hashValuesToArray, 1);\n          eventSource = _hashValuesToArray2[0];\n        }\n      } else if (sourceInput != null) {\n        // an ID. accepts a number too\n        var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function\n        if (!sourceApi) {\n          console.warn(\"Could not find an event source with ID \\\"\".concat(sourceInput, \"\\\"\")); // TODO: test\n          return null;\n        }\n        eventSource = sourceApi.internalEventSource;\n      }\n      var tuple = parseEvent(eventInput, eventSource, state, false);\n      if (tuple) {\n        var newEventApi = new EventImpl(state, tuple.def, tuple.def.recurringDef ? null : tuple.instance);\n        this.dispatch({\n          type: 'ADD_EVENTS',\n          eventStore: eventTupleToStore(tuple)\n        });\n        this.triggerEventAdd(newEventApi);\n        return newEventApi;\n      }\n      return null;\n    }\n  }, {\n    key: \"triggerEventAdd\",\n    value: function triggerEventAdd(eventApi) {\n      var _this11 = this;\n      var _this$getCurrentData5 = this.getCurrentData(),\n        emitter = _this$getCurrentData5.emitter;\n      emitter.trigger('eventAdd', {\n        event: eventApi,\n        relatedEvents: [],\n        revert: function revert() {\n          _this11.dispatch({\n            type: 'REMOVE_EVENTS',\n            eventStore: eventApiToStore(eventApi)\n          });\n        }\n      });\n    }\n    // TODO: optimize\n  }, {\n    key: \"getEventById\",\n    value: function getEventById(id) {\n      var state = this.getCurrentData();\n      var _state$eventStore = state.eventStore,\n        defs = _state$eventStore.defs,\n        instances = _state$eventStore.instances;\n      id = String(id);\n      for (var defId in defs) {\n        var def = defs[defId];\n        if (def.publicId === id) {\n          if (def.recurringDef) {\n            return new EventImpl(state, def, null);\n          }\n          for (var instanceId in instances) {\n            var instance = instances[instanceId];\n            if (instance.defId === def.defId) {\n              return new EventImpl(state, def, instance);\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getEvents\",\n    value: function getEvents() {\n      var currentData = this.getCurrentData();\n      return buildEventApis(currentData.eventStore, currentData);\n    }\n  }, {\n    key: \"removeAllEvents\",\n    value: function removeAllEvents() {\n      this.dispatch({\n        type: 'REMOVE_ALL_EVENTS'\n      });\n    }\n    // Public Event Sources API\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"getEventSources\",\n    value: function getEventSources() {\n      var state = this.getCurrentData();\n      var sourceHash = state.eventSources;\n      var sourceApis = [];\n      for (var internalId in sourceHash) {\n        sourceApis.push(new EventSourceImpl(state, sourceHash[internalId]));\n      }\n      return sourceApis;\n    }\n  }, {\n    key: \"getEventSourceById\",\n    value: function getEventSourceById(id) {\n      var state = this.getCurrentData();\n      var sourceHash = state.eventSources;\n      id = String(id);\n      for (var sourceId in sourceHash) {\n        if (sourceHash[sourceId].publicId === id) {\n          return new EventSourceImpl(state, sourceHash[sourceId]);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"addEventSource\",\n    value: function addEventSource(sourceInput) {\n      var state = this.getCurrentData();\n      if (sourceInput instanceof EventSourceImpl) {\n        // not already present? don't want to add an old snapshot\n        if (!state.eventSources[sourceInput.internalEventSource.sourceId]) {\n          this.dispatch({\n            type: 'ADD_EVENT_SOURCES',\n            sources: [sourceInput.internalEventSource]\n          });\n        }\n        return sourceInput;\n      }\n      var eventSource = parseEventSource(sourceInput, state);\n      if (eventSource) {\n        // TODO: error otherwise?\n        this.dispatch({\n          type: 'ADD_EVENT_SOURCES',\n          sources: [eventSource]\n        });\n        return new EventSourceImpl(state, eventSource);\n      }\n      return null;\n    }\n  }, {\n    key: \"removeAllEventSources\",\n    value: function removeAllEventSources() {\n      this.dispatch({\n        type: 'REMOVE_ALL_EVENT_SOURCES'\n      });\n    }\n  }, {\n    key: \"refetchEvents\",\n    value: function refetchEvents() {\n      this.dispatch({\n        type: 'FETCH_EVENT_SOURCES',\n        isRefetch: true\n      });\n    }\n    // Scroll\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"scrollToTime\",\n    value: function scrollToTime(timeInput) {\n      var time = createDuration(timeInput);\n      if (time) {\n        this.trigger('_scrollRequest', {\n          time: time\n        });\n      }\n    }\n  }]);\n}();\nfunction pointInsideRect(point, rect) {\n  return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;\n}\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\nfunction intersectRects(rect1, rect2) {\n  var res = {\n    left: Math.max(rect1.left, rect2.left),\n    right: Math.min(rect1.right, rect2.right),\n    top: Math.max(rect1.top, rect2.top),\n    bottom: Math.min(rect1.bottom, rect2.bottom)\n  };\n  if (res.left < res.right && res.top < res.bottom) {\n    return res;\n  }\n  return false;\n}\nfunction translateRect(rect, deltaX, deltaY) {\n  return {\n    left: rect.left + deltaX,\n    right: rect.right + deltaX,\n    top: rect.top + deltaY,\n    bottom: rect.bottom + deltaY\n  };\n}\n// Returns a new point that will have been moved to reside within the given rectangle\nfunction constrainPoint(point, rect) {\n  return {\n    left: Math.min(Math.max(point.left, rect.left), rect.right),\n    top: Math.min(Math.max(point.top, rect.top), rect.bottom)\n  };\n}\n// Returns a point that is the center of the given rectangle\nfunction getRectCenter(rect) {\n  return {\n    left: (rect.left + rect.right) / 2,\n    top: (rect.top + rect.bottom) / 2\n  };\n}\n// Subtracts point2's coordinates from point1's coordinates, returning a delta\nfunction diffPoints(point1, point2) {\n  return {\n    left: point1.left - point2.left,\n    top: point1.top - point2.top\n  };\n}\nvar EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere\nvar Splitter = /*#__PURE__*/function () {\n  function Splitter() {\n    _classCallCheck(this, Splitter);\n    this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);\n    this.splitDateSelection = memoize(this._splitDateSpan);\n    this.splitEventStore = memoize(this._splitEventStore);\n    this.splitIndividualUi = memoize(this._splitIndividualUi);\n    this.splitEventDrag = memoize(this._splitInteraction);\n    this.splitEventResize = memoize(this._splitInteraction);\n    this.eventUiBuilders = {}; // TODO: typescript protection\n  }\n  return _createClass(Splitter, [{\n    key: \"splitProps\",\n    value: function splitProps(props) {\n      var _this12 = this;\n      var keyInfos = this.getKeyInfo(props);\n      var defKeys = this.getKeysForEventDefs(props.eventStore);\n      var dateSelections = this.splitDateSelection(props.dateSelection);\n      var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*\n      var eventStores = this.splitEventStore(props.eventStore, defKeys);\n      var eventDrags = this.splitEventDrag(props.eventDrag);\n      var eventResizes = this.splitEventResize(props.eventResize);\n      var splitProps = {};\n      this.eventUiBuilders = mapHash(keyInfos, function (info, key) {\n        return _this12.eventUiBuilders[key] || memoize(buildEventUiForKey);\n      });\n      for (var key in keyInfos) {\n        var keyInfo = keyInfos[key];\n        var eventStore = eventStores[key] || EMPTY_EVENT_STORE;\n        var buildEventUi = this.eventUiBuilders[key];\n        splitProps[key] = {\n          businessHours: keyInfo.businessHours || props.businessHours,\n          dateSelection: dateSelections[key] || null,\n          eventStore: eventStore,\n          eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),\n          eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',\n          eventDrag: eventDrags[key] || null,\n          eventResize: eventResizes[key] || null\n        };\n      }\n      return splitProps;\n    }\n  }, {\n    key: \"_splitDateSpan\",\n    value: function _splitDateSpan(dateSpan) {\n      var dateSpans = {};\n      if (dateSpan) {\n        var keys = this.getKeysForDateSpan(dateSpan);\n        var _iterator15 = _createForOfIteratorHelper(keys),\n          _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var key = _step15.value;\n            dateSpans[key] = dateSpan;\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      }\n      return dateSpans;\n    }\n  }, {\n    key: \"_getKeysForEventDefs\",\n    value: function _getKeysForEventDefs(eventStore) {\n      var _this13 = this;\n      return mapHash(eventStore.defs, function (eventDef) {\n        return _this13.getKeysForEventDef(eventDef);\n      });\n    }\n  }, {\n    key: \"_splitEventStore\",\n    value: function _splitEventStore(eventStore, defKeys) {\n      var defs = eventStore.defs,\n        instances = eventStore.instances;\n      var splitStores = {};\n      for (var defId in defs) {\n        var _iterator16 = _createForOfIteratorHelper(defKeys[defId]),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var key = _step16.value;\n            if (!splitStores[key]) {\n              splitStores[key] = createEmptyEventStore();\n            }\n            splitStores[key].defs[defId] = defs[defId];\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      }\n      for (var instanceId in instances) {\n        var instance = instances[instanceId];\n        var _iterator17 = _createForOfIteratorHelper(defKeys[instance.defId]),\n          _step17;\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var _key7 = _step17.value;\n            if (splitStores[_key7]) {\n              // must have already been created\n              splitStores[_key7].instances[instanceId] = instance;\n            }\n          }\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n      }\n      return splitStores;\n    }\n  }, {\n    key: \"_splitIndividualUi\",\n    value: function _splitIndividualUi(eventUiBases, defKeys) {\n      var splitHashes = {};\n      for (var defId in eventUiBases) {\n        if (defId) {\n          // not the '' key\n          var _iterator18 = _createForOfIteratorHelper(defKeys[defId]),\n            _step18;\n          try {\n            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n              var key = _step18.value;\n              if (!splitHashes[key]) {\n                splitHashes[key] = {};\n              }\n              splitHashes[key][defId] = eventUiBases[defId];\n            }\n          } catch (err) {\n            _iterator18.e(err);\n          } finally {\n            _iterator18.f();\n          }\n        }\n      }\n      return splitHashes;\n    }\n  }, {\n    key: \"_splitInteraction\",\n    value: function _splitInteraction(interaction) {\n      var splitStates = {};\n      if (interaction) {\n        var affectedStores = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents));\n        // can't rely on defKeys because event data is mutated\n        var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);\n        var mutatedStores = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);\n        var populate = function populate(key) {\n          if (!splitStates[key]) {\n            splitStates[key] = {\n              affectedEvents: affectedStores[key] || EMPTY_EVENT_STORE,\n              mutatedEvents: mutatedStores[key] || EMPTY_EVENT_STORE,\n              isEvent: interaction.isEvent\n            };\n          }\n        };\n        for (var key in affectedStores) {\n          populate(key);\n        }\n        for (var _key8 in mutatedStores) {\n          populate(_key8);\n        }\n      }\n      return splitStates;\n    }\n  }]);\n}();\nfunction buildEventUiForKey(allUi, eventUiForKey, individualUi) {\n  var baseParts = [];\n  if (allUi) {\n    baseParts.push(allUi);\n  }\n  if (eventUiForKey) {\n    baseParts.push(eventUiForKey);\n  }\n  var stuff = {\n    '': combineEventUis(baseParts)\n  };\n  if (individualUi) {\n    Object.assign(stuff, individualUi);\n  }\n  return stuff;\n}\nfunction getDateMeta(date, todayRange, nowDate, dateProfile) {\n  return {\n    dow: date.getUTCDay(),\n    isDisabled: Boolean(dateProfile && !rangeContainsMarker(dateProfile.activeRange, date)),\n    isOther: Boolean(dateProfile && !rangeContainsMarker(dateProfile.currentRange, date)),\n    isToday: Boolean(todayRange && rangeContainsMarker(todayRange, date)),\n    isPast: Boolean(nowDate ? date < nowDate : todayRange ? date < todayRange.start : false),\n    isFuture: Boolean(nowDate ? date > nowDate : todayRange ? date >= todayRange.end : false)\n  };\n}\nfunction getDayClassNames(meta, theme) {\n  var classNames = ['fc-day', \"fc-day-\".concat(DAY_IDS[meta.dow])];\n  if (meta.isDisabled) {\n    classNames.push('fc-day-disabled');\n  } else {\n    if (meta.isToday) {\n      classNames.push('fc-day-today');\n      classNames.push(theme.getClass('today'));\n    }\n    if (meta.isPast) {\n      classNames.push('fc-day-past');\n    }\n    if (meta.isFuture) {\n      classNames.push('fc-day-future');\n    }\n    if (meta.isOther) {\n      classNames.push('fc-day-other');\n    }\n  }\n  return classNames;\n}\nfunction getSlotClassNames(meta, theme) {\n  var classNames = ['fc-slot', \"fc-slot-\".concat(DAY_IDS[meta.dow])];\n  if (meta.isDisabled) {\n    classNames.push('fc-slot-disabled');\n  } else {\n    if (meta.isToday) {\n      classNames.push('fc-slot-today');\n      classNames.push(theme.getClass('today'));\n    }\n    if (meta.isPast) {\n      classNames.push('fc-slot-past');\n    }\n    if (meta.isFuture) {\n      classNames.push('fc-slot-future');\n    }\n  }\n  return classNames;\n}\nvar DAY_FORMAT = createFormatter({\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\nvar WEEK_FORMAT = createFormatter({\n  week: 'long'\n});\nfunction buildNavLinkAttrs(context, dateMarker) {\n  var viewType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';\n  var isTabbable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var dateEnv = context.dateEnv,\n    options = context.options,\n    calendarApi = context.calendarApi;\n  var dateStr = dateEnv.format(dateMarker, viewType === 'week' ? WEEK_FORMAT : DAY_FORMAT);\n  if (options.navLinks) {\n    var zonedDate = dateEnv.toDate(dateMarker);\n    var handleInteraction = function handleInteraction(ev) {\n      var customAction = viewType === 'day' ? options.navLinkDayClick : viewType === 'week' ? options.navLinkWeekClick : null;\n      if (typeof customAction === 'function') {\n        customAction.call(calendarApi, dateEnv.toDate(dateMarker), ev);\n      } else {\n        if (typeof customAction === 'string') {\n          viewType = customAction;\n        }\n        calendarApi.zoomTo(dateMarker, viewType);\n      }\n    };\n    return Object.assign({\n      title: formatWithOrdinals(options.navLinkHint, [dateStr, zonedDate], dateStr),\n      'data-navlink': ''\n    }, isTabbable ? createAriaClickAttrs(handleInteraction) : {\n      onClick: handleInteraction\n    });\n  }\n  return {\n    'aria-label': dateStr\n  };\n}\nvar _isRtlScrollbarOnLeft = null;\nfunction getIsRtlScrollbarOnLeft() {\n  if (_isRtlScrollbarOnLeft === null) {\n    _isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();\n  }\n  return _isRtlScrollbarOnLeft;\n}\nfunction computeIsRtlScrollbarOnLeft() {\n  var outerEl = document.createElement('div');\n  applyStyle(outerEl, {\n    position: 'absolute',\n    top: -1000,\n    left: 0,\n    border: 0,\n    padding: 0,\n    overflow: 'scroll',\n    direction: 'rtl'\n  });\n  outerEl.innerHTML = '<div></div>';\n  document.body.appendChild(outerEl);\n  var innerEl = outerEl.firstChild;\n  var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;\n  removeElement(outerEl);\n  return res;\n}\nvar _scrollbarWidths;\nfunction getScrollbarWidths() {\n  if (!_scrollbarWidths) {\n    _scrollbarWidths = computeScrollbarWidths();\n  }\n  return _scrollbarWidths;\n}\nfunction computeScrollbarWidths() {\n  var el = document.createElement('div');\n  el.style.overflow = 'scroll';\n  el.style.position = 'absolute';\n  el.style.top = '-9999px';\n  el.style.left = '-9999px';\n  document.body.appendChild(el);\n  var res = computeScrollbarWidthsForEl(el);\n  document.body.removeChild(el);\n  return res;\n}\n// WARNING: will include border\nfunction computeScrollbarWidthsForEl(el) {\n  return {\n    x: el.offsetHeight - el.clientHeight,\n    y: el.offsetWidth - el.clientWidth\n  };\n}\nfunction computeEdges(el) {\n  var getPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var computedStyle = window.getComputedStyle(el);\n  var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n  var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;\n  var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;\n  var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n  var badScrollbarWidths = computeScrollbarWidthsForEl(el); // includes border!\n  var scrollbarLeftRight = badScrollbarWidths.y - borderLeft - borderRight;\n  var scrollbarBottom = badScrollbarWidths.x - borderTop - borderBottom;\n  var res = {\n    borderLeft: borderLeft,\n    borderRight: borderRight,\n    borderTop: borderTop,\n    borderBottom: borderBottom,\n    scrollbarBottom: scrollbarBottom,\n    scrollbarLeft: 0,\n    scrollbarRight: 0\n  };\n  if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') {\n    // is the scrollbar on the left side?\n    res.scrollbarLeft = scrollbarLeftRight;\n  } else {\n    res.scrollbarRight = scrollbarLeftRight;\n  }\n  if (getPadding) {\n    res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n    res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n    res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n    res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n  }\n  return res;\n}\nfunction computeInnerRect(el) {\n  var goWithinPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var doFromWindowViewport = arguments.length > 2 ? arguments[2] : undefined;\n  var outerRect = doFromWindowViewport ? el.getBoundingClientRect() : computeRect(el);\n  var edges = computeEdges(el, goWithinPadding);\n  var res = {\n    left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,\n    right: outerRect.right - edges.borderRight - edges.scrollbarRight,\n    top: outerRect.top + edges.borderTop,\n    bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom\n  };\n  if (goWithinPadding) {\n    res.left += edges.paddingLeft;\n    res.right -= edges.paddingRight;\n    res.top += edges.paddingTop;\n    res.bottom -= edges.paddingBottom;\n  }\n  return res;\n}\nfunction computeRect(el) {\n  var rect = el.getBoundingClientRect();\n  return {\n    left: rect.left + window.scrollX,\n    top: rect.top + window.scrollY,\n    right: rect.right + window.scrollX,\n    bottom: rect.bottom + window.scrollY\n  };\n}\nfunction computeClippedClientRect(el) {\n  var clippingParents = getClippingParents(el);\n  var rect = el.getBoundingClientRect();\n  var _iterator19 = _createForOfIteratorHelper(clippingParents),\n    _step19;\n  try {\n    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n      var clippingParent = _step19.value;\n      var intersection = intersectRects(rect, clippingParent.getBoundingClientRect());\n      if (intersection) {\n        rect = intersection;\n      } else {\n        return null;\n      }\n    }\n  } catch (err) {\n    _iterator19.e(err);\n  } finally {\n    _iterator19.f();\n  }\n  return rect;\n}\n// does not return window\nfunction getClippingParents(el) {\n  var parents = [];\n  while (el instanceof HTMLElement) {\n    // will stop when gets to document or null\n    var computedStyle = window.getComputedStyle(el);\n    if (computedStyle.position === 'fixed') {\n      break;\n    }\n    if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {\n      parents.push(el);\n    }\n    el = el.parentNode;\n  }\n  return parents;\n}\n\n/*\nRecords offset information for a set of elements, relative to an origin element.\nCan record the left/right OR the top/bottom OR both.\nProvides methods for querying the cache by position.\n*/\nvar PositionCache = /*#__PURE__*/function () {\n  function PositionCache(originEl, els, isHorizontal, isVertical) {\n    _classCallCheck(this, PositionCache);\n    this.els = els;\n    var originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left\n    if (isHorizontal) {\n      this.buildElHorizontals(originClientRect.left);\n    }\n    if (isVertical) {\n      this.buildElVerticals(originClientRect.top);\n    }\n  }\n  // Populates the left/right internal coordinate arrays\n  return _createClass(PositionCache, [{\n    key: \"buildElHorizontals\",\n    value: function buildElHorizontals(originClientLeft) {\n      var lefts = [];\n      var rights = [];\n      var _iterator20 = _createForOfIteratorHelper(this.els),\n        _step20;\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var el = _step20.value;\n          var rect = el.getBoundingClientRect();\n          lefts.push(rect.left - originClientLeft);\n          rights.push(rect.right - originClientLeft);\n        }\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n      this.lefts = lefts;\n      this.rights = rights;\n    }\n    // Populates the top/bottom internal coordinate arrays\n  }, {\n    key: \"buildElVerticals\",\n    value: function buildElVerticals(originClientTop) {\n      var tops = [];\n      var bottoms = [];\n      var _iterator21 = _createForOfIteratorHelper(this.els),\n        _step21;\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var el = _step21.value;\n          var rect = el.getBoundingClientRect();\n          tops.push(rect.top - originClientTop);\n          bottoms.push(rect.bottom - originClientTop);\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n      this.tops = tops;\n      this.bottoms = bottoms;\n    }\n    // Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n    // If no intersection is made, returns undefined.\n  }, {\n    key: \"leftToIndex\",\n    value: function leftToIndex(leftPosition) {\n      var lefts = this.lefts,\n        rights = this.rights;\n      var len = lefts.length;\n      var i;\n      for (i = 0; i < len; i += 1) {\n        if (leftPosition >= lefts[i] && leftPosition < rights[i]) {\n          return i;\n        }\n      }\n      return undefined; // TODO: better\n    }\n    // Given a top offset (from document top), returns the index of the el that it vertically intersects.\n    // If no intersection is made, returns undefined.\n  }, {\n    key: \"topToIndex\",\n    value: function topToIndex(topPosition) {\n      var tops = this.tops,\n        bottoms = this.bottoms;\n      var len = tops.length;\n      var i;\n      for (i = 0; i < len; i += 1) {\n        if (topPosition >= tops[i] && topPosition < bottoms[i]) {\n          return i;\n        }\n      }\n      return undefined; // TODO: better\n    }\n    // Gets the width of the element at the given index\n  }, {\n    key: \"getWidth\",\n    value: function getWidth(leftIndex) {\n      return this.rights[leftIndex] - this.lefts[leftIndex];\n    }\n    // Gets the height of the element at the given index\n  }, {\n    key: \"getHeight\",\n    value: function getHeight(topIndex) {\n      return this.bottoms[topIndex] - this.tops[topIndex];\n    }\n  }, {\n    key: \"similarTo\",\n    value: function similarTo(otherCache) {\n      return similarNumArrays(this.tops || [], otherCache.tops || []) && similarNumArrays(this.bottoms || [], otherCache.bottoms || []) && similarNumArrays(this.lefts || [], otherCache.lefts || []) && similarNumArrays(this.rights || [], otherCache.rights || []);\n    }\n  }]);\n}();\nfunction similarNumArrays(a, b) {\n  var len = a.length;\n  if (len !== b.length) {\n    return false;\n  }\n  for (var i = 0; i < len; i++) {\n    if (Math.round(a[i]) !== Math.round(b[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/* eslint max-classes-per-file: \"off\" */\n/*\nAn object for getting/setting scroll-related information for an element.\nInternally, this is done very differently for window versus DOM element,\nso this object serves as a common interface.\n*/\nvar ScrollController = /*#__PURE__*/function () {\n  function ScrollController() {\n    _classCallCheck(this, ScrollController);\n  }\n  return _createClass(ScrollController, [{\n    key: \"getMaxScrollTop\",\n    value: function getMaxScrollTop() {\n      return this.getScrollHeight() - this.getClientHeight();\n    }\n  }, {\n    key: \"getMaxScrollLeft\",\n    value: function getMaxScrollLeft() {\n      return this.getScrollWidth() - this.getClientWidth();\n    }\n  }, {\n    key: \"canScrollVertically\",\n    value: function canScrollVertically() {\n      return this.getMaxScrollTop() > 0;\n    }\n  }, {\n    key: \"canScrollHorizontally\",\n    value: function canScrollHorizontally() {\n      return this.getMaxScrollLeft() > 0;\n    }\n  }, {\n    key: \"canScrollUp\",\n    value: function canScrollUp() {\n      return this.getScrollTop() > 0;\n    }\n  }, {\n    key: \"canScrollDown\",\n    value: function canScrollDown() {\n      return this.getScrollTop() < this.getMaxScrollTop();\n    }\n  }, {\n    key: \"canScrollLeft\",\n    value: function canScrollLeft() {\n      return this.getScrollLeft() > 0;\n    }\n  }, {\n    key: \"canScrollRight\",\n    value: function canScrollRight() {\n      return this.getScrollLeft() < this.getMaxScrollLeft();\n    }\n  }]);\n}();\nvar ElementScrollController = /*#__PURE__*/function (_ScrollController) {\n  function ElementScrollController(el) {\n    var _this14;\n    _classCallCheck(this, ElementScrollController);\n    _this14 = _callSuper(this, ElementScrollController);\n    _this14.el = el;\n    return _this14;\n  }\n  _inherits(ElementScrollController, _ScrollController);\n  return _createClass(ElementScrollController, [{\n    key: \"getScrollTop\",\n    value: function getScrollTop() {\n      return this.el.scrollTop;\n    }\n  }, {\n    key: \"getScrollLeft\",\n    value: function getScrollLeft() {\n      return this.el.scrollLeft;\n    }\n  }, {\n    key: \"setScrollTop\",\n    value: function setScrollTop(top) {\n      this.el.scrollTop = top;\n    }\n  }, {\n    key: \"setScrollLeft\",\n    value: function setScrollLeft(left) {\n      this.el.scrollLeft = left;\n    }\n  }, {\n    key: \"getScrollWidth\",\n    value: function getScrollWidth() {\n      return this.el.scrollWidth;\n    }\n  }, {\n    key: \"getScrollHeight\",\n    value: function getScrollHeight() {\n      return this.el.scrollHeight;\n    }\n  }, {\n    key: \"getClientHeight\",\n    value: function getClientHeight() {\n      return this.el.clientHeight;\n    }\n  }, {\n    key: \"getClientWidth\",\n    value: function getClientWidth() {\n      return this.el.clientWidth;\n    }\n  }]);\n}(ScrollController);\nvar WindowScrollController = /*#__PURE__*/function (_ScrollController2) {\n  function WindowScrollController() {\n    _classCallCheck(this, WindowScrollController);\n    return _callSuper(this, WindowScrollController, arguments);\n  }\n  _inherits(WindowScrollController, _ScrollController2);\n  return _createClass(WindowScrollController, [{\n    key: \"getScrollTop\",\n    value: function getScrollTop() {\n      return window.scrollY;\n    }\n  }, {\n    key: \"getScrollLeft\",\n    value: function getScrollLeft() {\n      return window.scrollX;\n    }\n  }, {\n    key: \"setScrollTop\",\n    value: function setScrollTop(n) {\n      window.scroll(window.scrollX, n);\n    }\n  }, {\n    key: \"setScrollLeft\",\n    value: function setScrollLeft(n) {\n      window.scroll(n, window.scrollY);\n    }\n  }, {\n    key: \"getScrollWidth\",\n    value: function getScrollWidth() {\n      return document.documentElement.scrollWidth;\n    }\n  }, {\n    key: \"getScrollHeight\",\n    value: function getScrollHeight() {\n      return document.documentElement.scrollHeight;\n    }\n  }, {\n    key: \"getClientHeight\",\n    value: function getClientHeight() {\n      return document.documentElement.clientHeight;\n    }\n  }, {\n    key: \"getClientWidth\",\n    value: function getClientWidth() {\n      return document.documentElement.clientWidth;\n    }\n  }]);\n}(ScrollController);\n/*\nan INTERACTABLE date component\n\nPURPOSES:\n- hook up to fg, fill, and mirror renderers\n- interface for dragging and hits\n*/\nvar DateComponent = /*#__PURE__*/function (_BaseComponent4) {\n  function DateComponent() {\n    var _this15;\n    _classCallCheck(this, DateComponent);\n    _this15 = _callSuper(this, DateComponent, arguments);\n    _this15.uid = guid();\n    return _this15;\n  }\n  // Hit System\n  // -----------------------------------------------------------------------------------------------------------------\n  _inherits(DateComponent, _BaseComponent4);\n  return _createClass(DateComponent, [{\n    key: \"prepareHits\",\n    value: function prepareHits() {}\n  }, {\n    key: \"queryHit\",\n    value: function queryHit(positionLeft, positionTop, elWidth, elHeight) {\n      return null; // this should be abstract\n    }\n    // Pointer Interaction Utils\n    // -----------------------------------------------------------------------------------------------------------------\n  }, {\n    key: \"isValidSegDownEl\",\n    value: function isValidSegDownEl(el) {\n      return !this.props.eventDrag &&\n      // HACK\n      !this.props.eventResize &&\n      // HACK\n      !elementClosest(el, '.fc-event-mirror');\n    }\n  }, {\n    key: \"isValidDateDownEl\",\n    value: function isValidDateDownEl(el) {\n      return !elementClosest(el, '.fc-event:not(.fc-bg-event)') && !elementClosest(el, '.fc-more-link') &&\n      // a \"more..\" link\n      !elementClosest(el, 'a[data-navlink]') &&\n      // a clickable nav link\n      !elementClosest(el, '.fc-popover'); // hack\n    }\n  }]);\n}(BaseComponent);\nvar NamedTimeZoneImpl = /*#__PURE__*/_createClass(function NamedTimeZoneImpl(timeZoneName) {\n  _classCallCheck(this, NamedTimeZoneImpl);\n  this.timeZoneName = timeZoneName;\n});\nvar SegHierarchy = /*#__PURE__*/function () {\n  function SegHierarchy() {\n    var getEntryThickness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (entry) {\n      // if no thickness known, assume 1 (if 0, so small it always fits)\n      return entry.thickness || 1;\n    };\n    _classCallCheck(this, SegHierarchy);\n    this.getEntryThickness = getEntryThickness;\n    // settings\n    this.strictOrder = false;\n    this.allowReslicing = false;\n    this.maxCoord = -1; // -1 means no max\n    this.maxStackCnt = -1; // -1 means no max\n    this.levelCoords = []; // ordered\n    this.entriesByLevel = []; // parallel with levelCoords\n    this.stackCnts = {}; // TODO: use better technique!?\n  }\n  return _createClass(SegHierarchy, [{\n    key: \"addSegs\",\n    value: function addSegs(inputs) {\n      var hiddenEntries = [];\n      var _iterator22 = _createForOfIteratorHelper(inputs),\n        _step22;\n      try {\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          var input = _step22.value;\n          this.insertEntry(input, hiddenEntries);\n        }\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n      return hiddenEntries;\n    }\n  }, {\n    key: \"insertEntry\",\n    value: function insertEntry(entry, hiddenEntries) {\n      var insertion = this.findInsertion(entry);\n      if (this.isInsertionValid(insertion, entry)) {\n        this.insertEntryAt(entry, insertion);\n      } else {\n        this.handleInvalidInsertion(insertion, entry, hiddenEntries);\n      }\n    }\n  }, {\n    key: \"isInsertionValid\",\n    value: function isInsertionValid(insertion, entry) {\n      return (this.maxCoord === -1 || insertion.levelCoord + this.getEntryThickness(entry) <= this.maxCoord) && (this.maxStackCnt === -1 || insertion.stackCnt < this.maxStackCnt);\n    }\n  }, {\n    key: \"handleInvalidInsertion\",\n    value: function handleInvalidInsertion(insertion, entry, hiddenEntries) {\n      if (this.allowReslicing && insertion.touchingEntry) {\n        var hiddenEntry = Object.assign(Object.assign({}, entry), {\n          span: intersectSpans(entry.span, insertion.touchingEntry.span)\n        });\n        hiddenEntries.push(hiddenEntry);\n        this.splitEntry(entry, insertion.touchingEntry, hiddenEntries);\n      } else {\n        hiddenEntries.push(entry);\n      }\n    }\n    /*\n    Does NOT add what hit the `barrier` into hiddenEntries. Should already be done.\n    */\n  }, {\n    key: \"splitEntry\",\n    value: function splitEntry(entry, barrier, hiddenEntries) {\n      var entrySpan = entry.span;\n      var barrierSpan = barrier.span;\n      if (entrySpan.start < barrierSpan.start) {\n        this.insertEntry({\n          index: entry.index,\n          thickness: entry.thickness,\n          span: {\n            start: entrySpan.start,\n            end: barrierSpan.start\n          }\n        }, hiddenEntries);\n      }\n      if (entrySpan.end > barrierSpan.end) {\n        this.insertEntry({\n          index: entry.index,\n          thickness: entry.thickness,\n          span: {\n            start: barrierSpan.end,\n            end: entrySpan.end\n          }\n        }, hiddenEntries);\n      }\n    }\n  }, {\n    key: \"insertEntryAt\",\n    value: function insertEntryAt(entry, insertion) {\n      var entriesByLevel = this.entriesByLevel,\n        levelCoords = this.levelCoords;\n      if (insertion.lateral === -1) {\n        // create a new level\n        insertAt(levelCoords, insertion.level, insertion.levelCoord);\n        insertAt(entriesByLevel, insertion.level, [entry]);\n      } else {\n        // insert into existing level\n        insertAt(entriesByLevel[insertion.level], insertion.lateral, entry);\n      }\n      this.stackCnts[buildEntryKey(entry)] = insertion.stackCnt;\n    }\n    /*\n    does not care about limits\n    */\n  }, {\n    key: \"findInsertion\",\n    value: function findInsertion(newEntry) {\n      var levelCoords = this.levelCoords,\n        entriesByLevel = this.entriesByLevel,\n        strictOrder = this.strictOrder,\n        stackCnts = this.stackCnts;\n      var levelCnt = levelCoords.length;\n      var candidateCoord = 0;\n      var touchingLevel = -1;\n      var touchingLateral = -1;\n      var touchingEntry = null;\n      var stackCnt = 0;\n      for (var trackingLevel = 0; trackingLevel < levelCnt; trackingLevel += 1) {\n        var trackingCoord = levelCoords[trackingLevel];\n        // if the current level is past the placed entry, we have found a good empty space and can stop.\n        // if strictOrder, keep finding more lateral intersections.\n        if (!strictOrder && trackingCoord >= candidateCoord + this.getEntryThickness(newEntry)) {\n          break;\n        }\n        var trackingEntries = entriesByLevel[trackingLevel];\n        var trackingEntry = void 0;\n        var searchRes = binarySearch(trackingEntries, newEntry.span.start, getEntrySpanEnd); // find first entry after newEntry's end\n        var lateralIndex = searchRes[0] + searchRes[1]; // if exact match (which doesn't collide), go to next one\n        while (\n        // loop through entries that horizontally intersect\n        (trackingEntry = trackingEntries[lateralIndex]) &&\n        // but not past the whole entry list\n        trackingEntry.span.start < newEntry.span.end // and not entirely past newEntry\n        ) {\n          var trackingEntryBottom = trackingCoord + this.getEntryThickness(trackingEntry);\n          // intersects into the top of the candidate?\n          if (trackingEntryBottom > candidateCoord) {\n            candidateCoord = trackingEntryBottom;\n            touchingEntry = trackingEntry;\n            touchingLevel = trackingLevel;\n            touchingLateral = lateralIndex;\n          }\n          // butts up against top of candidate? (will happen if just intersected as well)\n          if (trackingEntryBottom === candidateCoord) {\n            // accumulate the highest possible stackCnt of the trackingEntries that butt up\n            stackCnt = Math.max(stackCnt, stackCnts[buildEntryKey(trackingEntry)] + 1);\n          }\n          lateralIndex += 1;\n        }\n      }\n      // the destination level will be after touchingEntry's level. find it\n      var destLevel = 0;\n      if (touchingEntry) {\n        destLevel = touchingLevel + 1;\n        while (destLevel < levelCnt && levelCoords[destLevel] < candidateCoord) {\n          destLevel += 1;\n        }\n      }\n      // if adding to an existing level, find where to insert\n      var destLateral = -1;\n      if (destLevel < levelCnt && levelCoords[destLevel] === candidateCoord) {\n        destLateral = binarySearch(entriesByLevel[destLevel], newEntry.span.end, getEntrySpanEnd)[0];\n      }\n      return {\n        touchingLevel: touchingLevel,\n        touchingLateral: touchingLateral,\n        touchingEntry: touchingEntry,\n        stackCnt: stackCnt,\n        levelCoord: candidateCoord,\n        level: destLevel,\n        lateral: destLateral\n      };\n    }\n    // sorted by levelCoord (lowest to highest)\n  }, {\n    key: \"toRects\",\n    value: function toRects() {\n      var entriesByLevel = this.entriesByLevel,\n        levelCoords = this.levelCoords;\n      var levelCnt = entriesByLevel.length;\n      var rects = [];\n      for (var level = 0; level < levelCnt; level += 1) {\n        var entries = entriesByLevel[level];\n        var levelCoord = levelCoords[level];\n        var _iterator23 = _createForOfIteratorHelper(entries),\n          _step23;\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var entry = _step23.value;\n            rects.push(Object.assign(Object.assign({}, entry), {\n              thickness: this.getEntryThickness(entry),\n              levelCoord: levelCoord\n            }));\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n      }\n      return rects;\n    }\n  }]);\n}();\nfunction getEntrySpanEnd(entry) {\n  return entry.span.end;\n}\nfunction buildEntryKey(entry) {\n  return entry.index + ':' + entry.span.start;\n}\n// returns groups with entries sorted by input order\nfunction groupIntersectingEntries(entries) {\n  var merges = [];\n  var _iterator24 = _createForOfIteratorHelper(entries),\n    _step24;\n  try {\n    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n      var entry = _step24.value;\n      var filteredMerges = [];\n      var hungryMerge = {\n        span: entry.span,\n        entries: [entry]\n      };\n      var _iterator25 = _createForOfIteratorHelper(merges),\n        _step25;\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var merge = _step25.value;\n          if (intersectSpans(merge.span, hungryMerge.span)) {\n            hungryMerge = {\n              entries: merge.entries.concat(hungryMerge.entries),\n              span: joinSpans(merge.span, hungryMerge.span)\n            };\n          } else {\n            filteredMerges.push(merge);\n          }\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n      filteredMerges.push(hungryMerge);\n      merges = filteredMerges;\n    }\n  } catch (err) {\n    _iterator24.e(err);\n  } finally {\n    _iterator24.f();\n  }\n  return merges;\n}\nfunction joinSpans(span0, span1) {\n  return {\n    start: Math.min(span0.start, span1.start),\n    end: Math.max(span0.end, span1.end)\n  };\n}\nfunction intersectSpans(span0, span1) {\n  var start = Math.max(span0.start, span1.start);\n  var end = Math.min(span0.end, span1.end);\n  if (start < end) {\n    return {\n      start: start,\n      end: end\n    };\n  }\n  return null;\n}\n// general util\n// ---------------------------------------------------------------------------------------------------------------------\nfunction insertAt(arr, index, item) {\n  arr.splice(index, 0, item);\n}\nfunction binarySearch(a, searchVal, getItemVal) {\n  var startIndex = 0;\n  var endIndex = a.length; // exclusive\n  if (!endIndex || searchVal < getItemVal(a[startIndex])) {\n    // no items OR before first item\n    return [0, 0];\n  }\n  if (searchVal > getItemVal(a[endIndex - 1])) {\n    // after last item\n    return [endIndex, 0];\n  }\n  while (startIndex < endIndex) {\n    var middleIndex = Math.floor(startIndex + (endIndex - startIndex) / 2);\n    var middleVal = getItemVal(a[middleIndex]);\n    if (searchVal < middleVal) {\n      endIndex = middleIndex;\n    } else if (searchVal > middleVal) {\n      startIndex = middleIndex + 1;\n    } else {\n      // equal!\n      return [middleIndex, 1];\n    }\n  }\n  return [startIndex, 0];\n}\n\n/*\nAn abstraction for a dragging interaction originating on an event.\nDoes higher-level things than PointerDragger, such as possibly:\n- a \"mirror\" that moves with the pointer\n- a minimum number of pixels or other criteria for a true drag to begin\n\nsubclasses must emit:\n- pointerdown\n- dragstart\n- dragmove\n- pointerup\n- dragend\n*/\nvar ElementDragging = /*#__PURE__*/function () {\n  function ElementDragging(el, selector) {\n    _classCallCheck(this, ElementDragging);\n    this.emitter = new Emitter();\n  }\n  return _createClass(ElementDragging, [{\n    key: \"destroy\",\n    value: function destroy() {}\n  }, {\n    key: \"setMirrorIsVisible\",\n    value: function setMirrorIsVisible(bool) {\n      // optional if subclass doesn't want to support a mirror\n    }\n  }, {\n    key: \"setMirrorNeedsRevert\",\n    value: function setMirrorNeedsRevert(bool) {\n      // optional if subclass doesn't want to support a mirror\n    }\n  }, {\n    key: \"setAutoScrollEnabled\",\n    value: function setAutoScrollEnabled(bool) {\n      // optional\n    }\n  }]);\n}(); // TODO: get rid of this in favor of options system,\n// tho it's really easy to access this globally rather than pass thru options.\nvar config = {};\n\n/*\nInformation about what will happen when an external element is dragged-and-dropped\nonto a calendar. Contains information for creating an event.\n*/\nvar DRAG_META_REFINERS = {\n  startTime: createDuration,\n  duration: createDuration,\n  create: Boolean,\n  sourceId: String\n};\nfunction parseDragMeta(raw) {\n  var _refineProps3 = refineProps(raw, DRAG_META_REFINERS),\n    refined = _refineProps3.refined,\n    extra = _refineProps3.extra;\n  return {\n    startTime: refined.startTime || null,\n    duration: refined.duration || null,\n    create: refined.create != null ? refined.create : true,\n    sourceId: refined.sourceId,\n    leftoverProps: extra\n  };\n}\n\n// Computes a default column header formatting string if `colFormat` is not explicitly defined\nfunction computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {\n  // if more than one week row, or if there are a lot of columns with not much space,\n  // put just the day numbers will be in each cell\n  if (!datesRepDistinctDays || dayCnt > 10) {\n    return createFormatter({\n      weekday: 'short'\n    }); // \"Sat\"\n  }\n\n  if (dayCnt > 1) {\n    return createFormatter({\n      weekday: 'short',\n      month: 'numeric',\n      day: 'numeric',\n      omitCommas: true\n    }); // \"Sat 11/12\"\n  }\n\n  return createFormatter({\n    weekday: 'long'\n  }); // \"Saturday\"\n}\n\nvar CLASS_NAME = 'fc-col-header-cell'; // do the cushion too? no\nfunction renderInner$1(renderProps) {\n  return renderProps.text;\n}\n\n// BAD name for this class now. used in the Header\nvar TableDateCell = /*#__PURE__*/function (_BaseComponent5) {\n  function TableDateCell() {\n    _classCallCheck(this, TableDateCell);\n    return _callSuper(this, TableDateCell, arguments);\n  }\n  _inherits(TableDateCell, _BaseComponent5);\n  return _createClass(TableDateCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$context = this.context,\n        dateEnv = _this$context.dateEnv,\n        options = _this$context.options,\n        theme = _this$context.theme,\n        viewApi = _this$context.viewApi;\n      var props = this.props;\n      var date = props.date,\n        dateProfile = props.dateProfile;\n      var dayMeta = getDateMeta(date, props.todayRange, null, dateProfile);\n      var classNames = [CLASS_NAME].concat(getDayClassNames(dayMeta, theme));\n      var text = dateEnv.format(date, props.dayHeaderFormat);\n      // if colCnt is 1, we are already in a day-view and don't need a navlink\n      var navLinkAttrs = !dayMeta.isDisabled && props.colCnt > 1 ? buildNavLinkAttrs(this.context, date) : {};\n      var renderProps = Object.assign(Object.assign(Object.assign({\n        date: dateEnv.toDate(date),\n        view: viewApi\n      }, props.extraRenderProps), {\n        text: text\n      }), dayMeta);\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentContainer, {\n        elTag: \"th\",\n        elClasses: classNames,\n        elAttrs: Object.assign({\n          role: 'columnheader',\n          colSpan: props.colSpan,\n          'data-date': !dayMeta.isDisabled ? formatDayString(date) : undefined\n        }, props.extraDataAttrs),\n        renderProps: renderProps,\n        generatorName: \"dayHeaderContent\",\n        customGenerator: options.dayHeaderContent,\n        defaultGenerator: renderInner$1,\n        classNameGenerator: options.dayHeaderClassNames,\n        didMount: options.dayHeaderDidMount,\n        willUnmount: options.dayHeaderWillUnmount\n      }, function (InnerContainer) {\n        return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-scrollgrid-sync-inner\"\n        }, !dayMeta.isDisabled && (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(InnerContainer, {\n          elTag: \"a\",\n          elAttrs: navLinkAttrs,\n          elClasses: ['fc-col-header-cell-cushion', props.isSticky && 'fc-sticky']\n        }));\n      });\n    }\n  }]);\n}(BaseComponent);\nvar WEEKDAY_FORMAT = createFormatter({\n  weekday: 'long'\n});\nvar TableDowCell = /*#__PURE__*/function (_BaseComponent6) {\n  function TableDowCell() {\n    _classCallCheck(this, TableDowCell);\n    return _callSuper(this, TableDowCell, arguments);\n  }\n  _inherits(TableDowCell, _BaseComponent6);\n  return _createClass(TableDowCell, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var _this$context2 = this.context,\n        dateEnv = _this$context2.dateEnv,\n        theme = _this$context2.theme,\n        viewApi = _this$context2.viewApi,\n        options = _this$context2.options;\n      var date = addDays(new Date(259200000), props.dow); // start with Sun, 04 Jan 1970 00:00:00 GMT\n      var dateMeta = {\n        dow: props.dow,\n        isDisabled: false,\n        isFuture: false,\n        isPast: false,\n        isToday: false,\n        isOther: false\n      };\n      var text = dateEnv.format(date, props.dayHeaderFormat);\n      var renderProps = Object.assign(Object.assign(Object.assign(Object.assign({\n        // TODO: make this public?\n        date: date\n      }, dateMeta), {\n        view: viewApi\n      }), props.extraRenderProps), {\n        text: text\n      });\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentContainer, {\n        elTag: \"th\",\n        elClasses: [CLASS_NAME].concat(_toConsumableArray(getDayClassNames(dateMeta, theme)), _toConsumableArray(props.extraClassNames || [])),\n        elAttrs: Object.assign({\n          role: 'columnheader',\n          colSpan: props.colSpan\n        }, props.extraDataAttrs),\n        renderProps: renderProps,\n        generatorName: \"dayHeaderContent\",\n        customGenerator: options.dayHeaderContent,\n        defaultGenerator: renderInner$1,\n        classNameGenerator: options.dayHeaderClassNames,\n        didMount: options.dayHeaderDidMount,\n        willUnmount: options.dayHeaderWillUnmount\n      }, function (InnerContent) {\n        return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-scrollgrid-sync-inner\"\n        }, (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(InnerContent, {\n          elTag: \"a\",\n          elClasses: ['fc-col-header-cell-cushion', props.isSticky && 'fc-sticky'],\n          elAttrs: {\n            'aria-label': dateEnv.format(date, WEEKDAY_FORMAT)\n          }\n        }));\n      });\n    }\n  }]);\n}(BaseComponent);\nvar NowTimer = /*#__PURE__*/function (_Component3) {\n  function NowTimer(props, context) {\n    var _this16;\n    _classCallCheck(this, NowTimer);\n    _this16 = _callSuper(this, NowTimer, [props, context]);\n    _this16.initialNowDate = getNow(context.options.now, context.dateEnv);\n    _this16.initialNowQueriedMs = new Date().valueOf();\n    _this16.state = _this16.computeTiming().currentState;\n    return _this16;\n  }\n  _inherits(NowTimer, _Component3);\n  return _createClass(NowTimer, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        state = this.state;\n      return props.children(state.nowDate, state.todayRange);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setTimeout();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.unit !== this.props.unit) {\n        this.clearTimeout();\n        this.setTimeout();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearTimeout();\n    }\n  }, {\n    key: \"computeTiming\",\n    value: function computeTiming() {\n      var props = this.props,\n        context = this.context;\n      var unroundedNow = addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs);\n      var currentUnitStart = context.dateEnv.startOf(unroundedNow, props.unit);\n      var nextUnitStart = context.dateEnv.add(currentUnitStart, createDuration(1, props.unit));\n      var waitMs = nextUnitStart.valueOf() - unroundedNow.valueOf();\n      // there is a max setTimeout ms value (https://stackoverflow.com/a/3468650/96342)\n      // ensure no longer than a day\n      waitMs = Math.min(1000 * 60 * 60 * 24, waitMs);\n      return {\n        currentState: {\n          nowDate: currentUnitStart,\n          todayRange: buildDayRange(currentUnitStart)\n        },\n        nextState: {\n          nowDate: nextUnitStart,\n          todayRange: buildDayRange(nextUnitStart)\n        },\n        waitMs: waitMs\n      };\n    }\n  }, {\n    key: \"setTimeout\",\n    value: function (_setTimeout) {\n      function setTimeout() {\n        return _setTimeout.apply(this, arguments);\n      }\n      setTimeout.toString = function () {\n        return _setTimeout.toString();\n      };\n      return setTimeout;\n    }(function () {\n      var _this17 = this;\n      var _this$computeTiming = this.computeTiming(),\n        nextState = _this$computeTiming.nextState,\n        waitMs = _this$computeTiming.waitMs;\n      this.timeoutId = setTimeout(function () {\n        _this17.setState(nextState, function () {\n          _this17.setTimeout();\n        });\n      }, waitMs);\n    })\n  }, {\n    key: \"clearTimeout\",\n    value: function (_clearTimeout2) {\n      function clearTimeout() {\n        return _clearTimeout2.apply(this, arguments);\n      }\n      clearTimeout.toString = function () {\n        return _clearTimeout2.toString();\n      };\n      return clearTimeout;\n    }(function () {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n      }\n    })\n  }]);\n}(preact__WEBPACK_IMPORTED_MODULE_0__.Component);\nNowTimer.contextType = ViewContextType;\nfunction buildDayRange(date) {\n  var start = startOfDay(date);\n  var end = addDays(start, 1);\n  return {\n    start: start,\n    end: end\n  };\n}\nvar DayHeader = /*#__PURE__*/function (_BaseComponent7) {\n  function DayHeader() {\n    var _this18;\n    _classCallCheck(this, DayHeader);\n    _this18 = _callSuper(this, DayHeader, arguments);\n    _this18.createDayHeaderFormatter = memoize(createDayHeaderFormatter);\n    return _this18;\n  }\n  _inherits(DayHeader, _BaseComponent7);\n  return _createClass(DayHeader, [{\n    key: \"render\",\n    value: function render() {\n      var context = this.context;\n      var _this$props4 = this.props,\n        dates = _this$props4.dates,\n        dateProfile = _this$props4.dateProfile,\n        datesRepDistinctDays = _this$props4.datesRepDistinctDays,\n        renderIntro = _this$props4.renderIntro;\n      var dayHeaderFormat = this.createDayHeaderFormatter(context.options.dayHeaderFormat, datesRepDistinctDays, dates.length);\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(NowTimer, {\n        unit: \"day\"\n      }, function (nowDate, todayRange) {\n        return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"tr\", {\n          role: \"row\"\n        }, renderIntro && renderIntro('day'), dates.map(function (date) {\n          return datesRepDistinctDays ? (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableDateCell, {\n            key: date.toISOString(),\n            date: date,\n            dateProfile: dateProfile,\n            todayRange: todayRange,\n            colCnt: dates.length,\n            dayHeaderFormat: dayHeaderFormat\n          }) : (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableDowCell, {\n            key: date.getUTCDay(),\n            dow: date.getUTCDay(),\n            dayHeaderFormat: dayHeaderFormat\n          });\n        }));\n      });\n    }\n  }]);\n}(BaseComponent);\nfunction createDayHeaderFormatter(explicitFormat, datesRepDistinctDays, dateCnt) {\n  return explicitFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dateCnt);\n}\nvar DaySeriesModel = /*#__PURE__*/function () {\n  function DaySeriesModel(range, dateProfileGenerator) {\n    _classCallCheck(this, DaySeriesModel);\n    var date = range.start;\n    var end = range.end;\n    var indices = [];\n    var dates = [];\n    var dayIndex = -1;\n    while (date < end) {\n      // loop each day from start to end\n      if (dateProfileGenerator.isHiddenDay(date)) {\n        indices.push(dayIndex + 0.5); // mark that it's between indices\n      } else {\n        dayIndex += 1;\n        indices.push(dayIndex);\n        dates.push(date);\n      }\n      date = addDays(date, 1);\n    }\n    this.dates = dates;\n    this.indices = indices;\n    this.cnt = dates.length;\n  }\n  return _createClass(DaySeriesModel, [{\n    key: \"sliceRange\",\n    value: function sliceRange(range) {\n      var firstIndex = this.getDateDayIndex(range.start); // inclusive first index\n      var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index\n      var clippedFirstIndex = Math.max(0, firstIndex);\n      var clippedLastIndex = Math.min(this.cnt - 1, lastIndex);\n      // deal with in-between indices\n      clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell\n      clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell\n      if (clippedFirstIndex <= clippedLastIndex) {\n        return {\n          firstIndex: clippedFirstIndex,\n          lastIndex: clippedLastIndex,\n          isStart: firstIndex === clippedFirstIndex,\n          isEnd: lastIndex === clippedLastIndex\n        };\n      }\n      return null;\n    }\n    // Given a date, returns its chronolocial cell-index from the first cell of the grid.\n    // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n    // If before the first offset, returns a negative number.\n    // If after the last offset, returns an offset past the last cell offset.\n    // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n  }, {\n    key: \"getDateDayIndex\",\n    value: function getDateDayIndex(date) {\n      var indices = this.indices;\n      var dayOffset = Math.floor(diffDays(this.dates[0], date));\n      if (dayOffset < 0) {\n        return indices[0] - 1;\n      }\n      if (dayOffset >= indices.length) {\n        return indices[indices.length - 1] + 1;\n      }\n      return indices[dayOffset];\n    }\n  }]);\n}();\nvar DayTableModel = /*#__PURE__*/function () {\n  function DayTableModel(daySeries, breakOnWeeks) {\n    _classCallCheck(this, DayTableModel);\n    var dates = daySeries.dates;\n    var daysPerRow;\n    var firstDay;\n    var rowCnt;\n    if (breakOnWeeks) {\n      // count columns until the day-of-week repeats\n      firstDay = dates[0].getUTCDay();\n      for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow += 1) {\n        if (dates[daysPerRow].getUTCDay() === firstDay) {\n          break;\n        }\n      }\n      rowCnt = Math.ceil(dates.length / daysPerRow);\n    } else {\n      rowCnt = 1;\n      daysPerRow = dates.length;\n    }\n    this.rowCnt = rowCnt;\n    this.colCnt = daysPerRow;\n    this.daySeries = daySeries;\n    this.cells = this.buildCells();\n    this.headerDates = this.buildHeaderDates();\n  }\n  return _createClass(DayTableModel, [{\n    key: \"buildCells\",\n    value: function buildCells() {\n      var rows = [];\n      for (var row = 0; row < this.rowCnt; row += 1) {\n        var cells = [];\n        for (var col = 0; col < this.colCnt; col += 1) {\n          cells.push(this.buildCell(row, col));\n        }\n        rows.push(cells);\n      }\n      return rows;\n    }\n  }, {\n    key: \"buildCell\",\n    value: function buildCell(row, col) {\n      var date = this.daySeries.dates[row * this.colCnt + col];\n      return {\n        key: date.toISOString(),\n        date: date\n      };\n    }\n  }, {\n    key: \"buildHeaderDates\",\n    value: function buildHeaderDates() {\n      var dates = [];\n      for (var col = 0; col < this.colCnt; col += 1) {\n        dates.push(this.cells[0][col].date);\n      }\n      return dates;\n    }\n  }, {\n    key: \"sliceRange\",\n    value: function sliceRange(range) {\n      var colCnt = this.colCnt;\n      var seriesSeg = this.daySeries.sliceRange(range);\n      var segs = [];\n      if (seriesSeg) {\n        var firstIndex = seriesSeg.firstIndex,\n          lastIndex = seriesSeg.lastIndex;\n        var index = firstIndex;\n        while (index <= lastIndex) {\n          var row = Math.floor(index / colCnt);\n          var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);\n          segs.push({\n            row: row,\n            firstCol: index % colCnt,\n            lastCol: (nextIndex - 1) % colCnt,\n            isStart: seriesSeg.isStart && index === firstIndex,\n            isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex\n          });\n          index = nextIndex;\n        }\n      }\n      return segs;\n    }\n  }]);\n}();\nvar Slicer = /*#__PURE__*/function () {\n  function Slicer() {\n    _classCallCheck(this, Slicer);\n    this.sliceBusinessHours = memoize(this._sliceBusinessHours);\n    this.sliceDateSelection = memoize(this._sliceDateSpan);\n    this.sliceEventStore = memoize(this._sliceEventStore);\n    this.sliceEventDrag = memoize(this._sliceInteraction);\n    this.sliceEventResize = memoize(this._sliceInteraction);\n    this.forceDayIfListItem = false; // hack\n  }\n  return _createClass(Slicer, [{\n    key: \"sliceProps\",\n    value: function sliceProps(props, dateProfile, nextDayThreshold, context) {\n      var eventUiBases = props.eventUiBases;\n      for (var _len4 = arguments.length, extraArgs = new Array(_len4 > 4 ? _len4 - 4 : 0), _key9 = 4; _key9 < _len4; _key9++) {\n        extraArgs[_key9 - 4] = arguments[_key9];\n      }\n      var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold].concat(extraArgs));\n      return {\n        dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, dateProfile, nextDayThreshold, eventUiBases, context].concat(extraArgs)),\n        businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, context].concat(extraArgs)),\n        fgEventSegs: eventSegs.fg,\n        bgEventSegs: eventSegs.bg,\n        eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold].concat(extraArgs)),\n        eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold].concat(extraArgs)),\n        eventSelection: props.eventSelection\n      }; // TODO: give interactionSegs?\n    }\n  }, {\n    key: \"sliceNowDate\",\n    value: function sliceNowDate(\n    // does not memoize\n    date, dateProfile, nextDayThreshold, context) {\n      for (var _len5 = arguments.length, extraArgs = new Array(_len5 > 4 ? _len5 - 4 : 0), _key10 = 4; _key10 < _len5; _key10++) {\n        extraArgs[_key10 - 4] = arguments[_key10];\n      }\n      return this._sliceDateSpan.apply(this, [{\n        range: {\n          start: date,\n          end: addMs(date, 1)\n        },\n        allDay: false\n      },\n      // add 1 ms, protect against null range\n      dateProfile, nextDayThreshold, {}, context].concat(extraArgs));\n    }\n  }, {\n    key: \"_sliceBusinessHours\",\n    value: function _sliceBusinessHours(businessHours, dateProfile, nextDayThreshold, context) {\n      if (!businessHours) {\n        return [];\n      }\n      for (var _len6 = arguments.length, extraArgs = new Array(_len6 > 4 ? _len6 - 4 : 0), _key11 = 4; _key11 < _len6; _key11++) {\n        extraArgs[_key11 - 4] = arguments[_key11];\n      }\n      return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), context), {}, dateProfile, nextDayThreshold].concat(extraArgs)).bg;\n    }\n  }, {\n    key: \"_sliceEventStore\",\n    value: function _sliceEventStore(eventStore, eventUiBases, dateProfile, nextDayThreshold) {\n      if (eventStore) {\n        var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n        for (var _len7 = arguments.length, extraArgs = new Array(_len7 > 4 ? _len7 - 4 : 0), _key12 = 4; _key12 < _len7; _key12++) {\n          extraArgs[_key12 - 4] = arguments[_key12];\n        }\n        return {\n          bg: this.sliceEventRanges(rangeRes.bg, extraArgs),\n          fg: this.sliceEventRanges(rangeRes.fg, extraArgs)\n        };\n      }\n      return {\n        bg: [],\n        fg: []\n      };\n    }\n  }, {\n    key: \"_sliceInteraction\",\n    value: function _sliceInteraction(interaction, eventUiBases, dateProfile, nextDayThreshold) {\n      if (!interaction) {\n        return null;\n      }\n      var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n      for (var _len8 = arguments.length, extraArgs = new Array(_len8 > 4 ? _len8 - 4 : 0), _key13 = 4; _key13 < _len8; _key13++) {\n        extraArgs[_key13 - 4] = arguments[_key13];\n      }\n      return {\n        segs: this.sliceEventRanges(rangeRes.fg, extraArgs),\n        affectedInstances: interaction.affectedEvents.instances,\n        isEvent: interaction.isEvent\n      };\n    }\n  }, {\n    key: \"_sliceDateSpan\",\n    value: function _sliceDateSpan(dateSpan, dateProfile, nextDayThreshold, eventUiBases, context) {\n      if (!dateSpan) {\n        return [];\n      }\n      var activeRange = computeActiveRange(dateProfile, Boolean(nextDayThreshold));\n      var activeDateSpanRange = intersectRanges(dateSpan.range, activeRange);\n      if (activeDateSpanRange) {\n        dateSpan = Object.assign(Object.assign({}, dateSpan), {\n          range: activeDateSpanRange\n        });\n        var eventRange = fabricateEventRange(dateSpan, eventUiBases, context);\n        for (var _len9 = arguments.length, extraArgs = new Array(_len9 > 5 ? _len9 - 5 : 0), _key14 = 5; _key14 < _len9; _key14++) {\n          extraArgs[_key14 - 5] = arguments[_key14];\n        }\n        var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));\n        var _iterator26 = _createForOfIteratorHelper(segs),\n          _step26;\n        try {\n          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n            var seg = _step26.value;\n            seg.eventRange = eventRange;\n          }\n        } catch (err) {\n          _iterator26.e(err);\n        } finally {\n          _iterator26.f();\n        }\n        return segs;\n      }\n      return [];\n    }\n    /*\n    \"complete\" seg means it has component and eventRange\n    */\n  }, {\n    key: \"sliceEventRanges\",\n    value: function sliceEventRanges(eventRanges, extraArgs) {\n      var segs = [];\n      var _iterator27 = _createForOfIteratorHelper(eventRanges),\n        _step27;\n      try {\n        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n          var eventRange = _step27.value;\n          segs.push.apply(segs, _toConsumableArray(this.sliceEventRange(eventRange, extraArgs)));\n        }\n      } catch (err) {\n        _iterator27.e(err);\n      } finally {\n        _iterator27.f();\n      }\n      return segs;\n    }\n    /*\n    \"complete\" seg means it has component and eventRange\n    */\n  }, {\n    key: \"sliceEventRange\",\n    value: function sliceEventRange(eventRange, extraArgs) {\n      var dateRange = eventRange.range;\n      // hack to make multi-day events that are being force-displayed as list-items to take up only one day\n      if (this.forceDayIfListItem && eventRange.ui.display === 'list-item') {\n        dateRange = {\n          start: dateRange.start,\n          end: addDays(dateRange.start, 1)\n        };\n      }\n      var segs = this.sliceRange.apply(this, [dateRange].concat(_toConsumableArray(extraArgs)));\n      var _iterator28 = _createForOfIteratorHelper(segs),\n        _step28;\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var seg = _step28.value;\n          seg.eventRange = eventRange;\n          seg.isStart = eventRange.isStart && seg.isStart;\n          seg.isEnd = eventRange.isEnd && seg.isEnd;\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n      return segs;\n    }\n  }]);\n}();\n/*\nfor incorporating slotMinTime/slotMaxTime if appropriate\nTODO: should be part of DateProfile!\nTimelineDateProfile already does this btw\n*/\nfunction computeActiveRange(dateProfile, isComponentAllDay) {\n  var range = dateProfile.activeRange;\n  if (isComponentAllDay) {\n    return range;\n  }\n  return {\n    start: addMs(range.start, dateProfile.slotMinTime.milliseconds),\n    end: addMs(range.end, dateProfile.slotMaxTime.milliseconds - 864e5) // 864e5 = ms in a day\n  };\n}\n\n// high-level segmenting-aware tester functions\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isInteractionValid(interaction, dateProfile, context) {\n  var instances = interaction.mutatedEvents.instances;\n  for (var instanceId in instances) {\n    if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {\n      return false;\n    }\n  }\n  return isNewPropsValid({\n    eventDrag: interaction\n  }, context); // HACK: the eventDrag props is used for ALL interactions\n}\n\nfunction isDateSelectionValid(dateSelection, dateProfile, context) {\n  if (!rangeContainsRange(dateProfile.validRange, dateSelection.range)) {\n    return false;\n  }\n  return isNewPropsValid({\n    dateSelection: dateSelection\n  }, context);\n}\nfunction isNewPropsValid(newProps, context) {\n  var calendarState = context.getCurrentData();\n  var props = Object.assign({\n    businessHours: calendarState.businessHours,\n    dateSelection: '',\n    eventStore: calendarState.eventStore,\n    eventUiBases: calendarState.eventUiBases,\n    eventSelection: '',\n    eventDrag: null,\n    eventResize: null\n  }, newProps);\n  return (context.pluginHooks.isPropsValid || isPropsValid)(props, context);\n}\nfunction isPropsValid(state, context) {\n  var dateSpanMeta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var filterConfig = arguments.length > 3 ? arguments[3] : undefined;\n  if (state.eventDrag && !isInteractionPropsValid(state, context, dateSpanMeta, filterConfig)) {\n    return false;\n  }\n  if (state.dateSelection && !isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig)) {\n    return false;\n  }\n  return true;\n}\n// Moving Event Validation\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isInteractionPropsValid(state, context, dateSpanMeta, filterConfig) {\n  var currentState = context.getCurrentData();\n  var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions\n  var subjectEventStore = interaction.mutatedEvents;\n  var subjectDefs = subjectEventStore.defs;\n  var subjectInstances = subjectEventStore.instances;\n  var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {\n    '': currentState.selectionConfig\n  });\n  if (filterConfig) {\n    subjectConfigs = mapHash(subjectConfigs, filterConfig);\n  }\n  // exclude the subject events. TODO: exclude defs too?\n  var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances);\n  var otherDefs = otherEventStore.defs;\n  var otherInstances = otherEventStore.instances;\n  var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);\n  for (var subjectInstanceId in subjectInstances) {\n    var subjectInstance = subjectInstances[subjectInstanceId];\n    var subjectRange = subjectInstance.range;\n    var subjectConfig = subjectConfigs[subjectInstance.defId];\n    var subjectDef = subjectDefs[subjectInstance.defId];\n    // constraint\n    if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, context)) {\n      return false;\n    }\n    // overlap\n    var eventOverlap = context.options.eventOverlap;\n    var eventOverlapFunc = typeof eventOverlap === 'function' ? eventOverlap : null;\n    for (var otherInstanceId in otherInstances) {\n      var otherInstance = otherInstances[otherInstanceId];\n      // intersect! evaluate\n      if (rangesIntersect(subjectRange, otherInstance.range)) {\n        var otherOverlap = otherConfigs[otherInstance.defId].overlap;\n        // consider the other event's overlap. only do this if the subject event is a \"real\" event\n        if (otherOverlap === false && interaction.isEvent) {\n          return false;\n        }\n        if (subjectConfig.overlap === false) {\n          return false;\n        }\n        if (eventOverlapFunc && !eventOverlapFunc(new EventImpl(context, otherDefs[otherInstance.defId], otherInstance),\n        // still event\n        new EventImpl(context, subjectDef, subjectInstance))) {\n          return false;\n        }\n      }\n    }\n    // allow (a function)\n    var calendarEventStore = currentState.eventStore; // need global-to-calendar, not local to component (splittable)state\n    var _iterator29 = _createForOfIteratorHelper(subjectConfig.allows),\n      _step29;\n    try {\n      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n        var subjectAllow = _step29.value;\n        var subjectDateSpan = Object.assign(Object.assign({}, dateSpanMeta), {\n          range: subjectInstance.range,\n          allDay: subjectDef.allDay\n        });\n        var origDef = calendarEventStore.defs[subjectDef.defId];\n        var origInstance = calendarEventStore.instances[subjectInstanceId];\n        var eventApi = void 0;\n        if (origDef) {\n          // was previously in the calendar\n          eventApi = new EventImpl(context, origDef, origInstance);\n        } else {\n          // was an external event\n          eventApi = new EventImpl(context, subjectDef); // no instance, because had no dates\n        }\n\n        if (!subjectAllow(buildDateSpanApiWithContext(subjectDateSpan, context), eventApi)) {\n          return false;\n        }\n      }\n    } catch (err) {\n      _iterator29.e(err);\n    } finally {\n      _iterator29.f();\n    }\n  }\n  return true;\n}\n// Date Selection Validation\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig) {\n  var relevantEventStore = state.eventStore;\n  var relevantDefs = relevantEventStore.defs;\n  var relevantInstances = relevantEventStore.instances;\n  var selection = state.dateSelection;\n  var selectionRange = selection.range;\n  var _context$getCurrentDa2 = context.getCurrentData(),\n    selectionConfig = _context$getCurrentDa2.selectionConfig;\n  if (filterConfig) {\n    selectionConfig = filterConfig(selectionConfig);\n  }\n  // constraint\n  if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, context)) {\n    return false;\n  }\n  // overlap\n  var selectOverlap = context.options.selectOverlap;\n  var selectOverlapFunc = typeof selectOverlap === 'function' ? selectOverlap : null;\n  for (var relevantInstanceId in relevantInstances) {\n    var relevantInstance = relevantInstances[relevantInstanceId];\n    // intersect! evaluate\n    if (rangesIntersect(selectionRange, relevantInstance.range)) {\n      if (selectionConfig.overlap === false) {\n        return false;\n      }\n      if (selectOverlapFunc && !selectOverlapFunc(new EventImpl(context, relevantDefs[relevantInstance.defId], relevantInstance), null)) {\n        return false;\n      }\n    }\n  }\n  // allow (a function)\n  var _iterator30 = _createForOfIteratorHelper(selectionConfig.allows),\n    _step30;\n  try {\n    for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n      var selectionAllow = _step30.value;\n      var fullDateSpan = Object.assign(Object.assign({}, dateSpanMeta), selection);\n      if (!selectionAllow(buildDateSpanApiWithContext(fullDateSpan, context), null)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator30.e(err);\n  } finally {\n    _iterator30.f();\n  }\n  return true;\n}\n// Constraint Utils\n// ------------------------------------------------------------------------------------------------------------------------\nfunction allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, context) {\n  var _iterator31 = _createForOfIteratorHelper(constraints),\n    _step31;\n  try {\n    for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n      var constraint = _step31.value;\n      if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context), subjectRange)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator31.e(err);\n  } finally {\n    _iterator31.f();\n  }\n  return true;\n}\nfunction constraintToRanges(constraint, subjectRange,\n// for expanding a recurring constraint, or expanding business hours\notherEventStore,\n// for if constraint is an even group ID\nbusinessHoursUnexpanded,\n// for if constraint is 'businessHours'\ncontext) {\n  if (constraint === 'businessHours') {\n    return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, context));\n  }\n  if (typeof constraint === 'string') {\n    // an group ID\n    return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {\n      return eventDef.groupId === constraint;\n    }));\n  }\n  if (_typeof(constraint) === 'object' && constraint) {\n    // non-null object\n    return eventStoreToRanges(expandRecurring(constraint, subjectRange, context));\n  }\n  return []; // if it's false\n}\n// TODO: move to event-store file?\nfunction eventStoreToRanges(eventStore) {\n  var instances = eventStore.instances;\n  var ranges = [];\n  for (var instanceId in instances) {\n    ranges.push(instances[instanceId].range);\n  }\n  return ranges;\n}\n// TODO: move to geom file?\nfunction anyRangesContainRange(outerRanges, innerRange) {\n  var _iterator32 = _createForOfIteratorHelper(outerRanges),\n    _step32;\n  try {\n    for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n      var outerRange = _step32.value;\n      if (rangeContainsRange(outerRange, innerRange)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator32.e(err);\n  } finally {\n    _iterator32.f();\n  }\n  return false;\n}\nvar VISIBLE_HIDDEN_RE = /^(visible|hidden)$/;\nvar Scroller = /*#__PURE__*/function (_BaseComponent8) {\n  function Scroller() {\n    var _this19;\n    _classCallCheck(this, Scroller);\n    _this19 = _callSuper(this, Scroller, arguments);\n    _this19.handleEl = function (el) {\n      _this19.el = el;\n      setRef(_this19.props.elRef, el);\n    };\n    return _this19;\n  }\n  _inherits(Scroller, _BaseComponent8);\n  return _createClass(Scroller, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var liquid = props.liquid,\n        liquidIsAbsolute = props.liquidIsAbsolute;\n      var isAbsolute = liquid && liquidIsAbsolute;\n      var className = ['fc-scroller'];\n      if (liquid) {\n        if (liquidIsAbsolute) {\n          className.push('fc-scroller-liquid-absolute');\n        } else {\n          className.push('fc-scroller-liquid');\n        }\n      }\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n        ref: this.handleEl,\n        className: className.join(' '),\n        style: {\n          overflowX: props.overflowX,\n          overflowY: props.overflowY,\n          left: isAbsolute && -(props.overcomeLeft || 0) || '',\n          right: isAbsolute && -(props.overcomeRight || 0) || '',\n          bottom: isAbsolute && -(props.overcomeBottom || 0) || '',\n          marginLeft: !isAbsolute && -(props.overcomeLeft || 0) || '',\n          marginRight: !isAbsolute && -(props.overcomeRight || 0) || '',\n          marginBottom: !isAbsolute && -(props.overcomeBottom || 0) || '',\n          maxHeight: props.maxHeight || ''\n        }\n      }, props.children);\n    }\n  }, {\n    key: \"needsXScrolling\",\n    value: function needsXScrolling() {\n      if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) {\n        return false;\n      }\n      // testing scrollWidth>clientWidth is unreliable cross-browser when pixel heights aren't integers.\n      // much more reliable to see if children are taller than the scroller, even tho doesn't account for\n      // inner-child margins and absolute positioning\n      var el = this.el;\n      var realClientWidth = this.el.getBoundingClientRect().width - this.getYScrollbarWidth();\n      var children = el.children;\n      for (var i = 0; i < children.length; i += 1) {\n        var childEl = children[i];\n        if (childEl.getBoundingClientRect().width > realClientWidth) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"needsYScrolling\",\n    value: function needsYScrolling() {\n      if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) {\n        return false;\n      }\n      // testing scrollHeight>clientHeight is unreliable cross-browser when pixel heights aren't integers.\n      // much more reliable to see if children are taller than the scroller, even tho doesn't account for\n      // inner-child margins and absolute positioning\n      var el = this.el;\n      var realClientHeight = this.el.getBoundingClientRect().height - this.getXScrollbarWidth();\n      var children = el.children;\n      for (var i = 0; i < children.length; i += 1) {\n        var childEl = children[i];\n        if (childEl.getBoundingClientRect().height > realClientHeight) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"getXScrollbarWidth\",\n    value: function getXScrollbarWidth() {\n      if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) {\n        return 0;\n      }\n      return this.el.offsetHeight - this.el.clientHeight; // only works because we guarantee no borders. TODO: add to CSS with important?\n    }\n  }, {\n    key: \"getYScrollbarWidth\",\n    value: function getYScrollbarWidth() {\n      if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) {\n        return 0;\n      }\n      return this.el.offsetWidth - this.el.clientWidth; // only works because we guarantee no borders. TODO: add to CSS with important?\n    }\n  }]);\n}(BaseComponent);\n/*\nTODO: somehow infer OtherArgs from masterCallback?\nTODO: infer RefType from masterCallback if provided\n*/\nvar RefMap = /*#__PURE__*/function () {\n  function RefMap(masterCallback) {\n    var _this20 = this;\n    _classCallCheck(this, RefMap);\n    this.masterCallback = masterCallback;\n    this.currentMap = {};\n    this.depths = {};\n    this.callbackMap = {};\n    this.handleValue = function (val, key) {\n      var depths = _this20.depths,\n        currentMap = _this20.currentMap;\n      var removed = false;\n      var added = false;\n      if (val !== null) {\n        // for bug... ACTUALLY: can probably do away with this now that callers don't share numeric indices anymore\n        removed = key in currentMap;\n        currentMap[key] = val;\n        depths[key] = (depths[key] || 0) + 1;\n        added = true;\n      } else {\n        depths[key] -= 1;\n        if (!depths[key]) {\n          delete currentMap[key];\n          delete _this20.callbackMap[key];\n          removed = true;\n        }\n      }\n      if (_this20.masterCallback) {\n        if (removed) {\n          _this20.masterCallback(null, String(key));\n        }\n        if (added) {\n          _this20.masterCallback(val, String(key));\n        }\n      }\n    };\n  }\n  return _createClass(RefMap, [{\n    key: \"createRef\",\n    value: function createRef(key) {\n      var _this21 = this;\n      var refCallback = this.callbackMap[key];\n      if (!refCallback) {\n        refCallback = this.callbackMap[key] = function (val) {\n          _this21.handleValue(val, String(key));\n        };\n      }\n      return refCallback;\n    }\n    // TODO: check callers that don't care about order. should use getAll instead\n    // NOTE: this method has become less valuable now that we are encouraged to map order by some other index\n    // TODO: provide ONE array-export function, buildArray, which fails on non-numeric indexes. caller can manipulate and \"collect\"\n  }, {\n    key: \"collect\",\n    value: function collect(startIndex, endIndex, step) {\n      return collectFromHash(this.currentMap, startIndex, endIndex, step);\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return hashValuesToArray(this.currentMap);\n    }\n  }]);\n}();\nfunction _computeShrinkWidth(chunkEls) {\n  var shrinkCells = findElements(chunkEls, '.fc-scrollgrid-shrink');\n  var largestWidth = 0;\n  var _iterator33 = _createForOfIteratorHelper(shrinkCells),\n    _step33;\n  try {\n    for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n      var shrinkCell = _step33.value;\n      largestWidth = Math.max(largestWidth, computeSmallestCellWidth(shrinkCell));\n    }\n  } catch (err) {\n    _iterator33.e(err);\n  } finally {\n    _iterator33.f();\n  }\n  return Math.ceil(largestWidth); // <table> elements work best with integers. round up to ensure contents fits\n}\n\nfunction getSectionHasLiquidHeight(props, sectionConfig) {\n  return props.liquid && sectionConfig.liquid; // does the section do liquid-height? (need to have whole scrollgrid liquid-height as well)\n}\n\nfunction getAllowYScrolling(props, sectionConfig) {\n  return sectionConfig.maxHeight != null ||\n  // if its possible for the height to max out, we might need scrollbars\n  getSectionHasLiquidHeight(props, sectionConfig); // if the section is liquid height, it might condense enough to require scrollbars\n}\n// TODO: ONLY use `arg`. force out internal function to use same API\nfunction renderChunkContent(sectionConfig, chunkConfig, arg, isHeader) {\n  var expandRows = arg.expandRows;\n  var content = typeof chunkConfig.content === 'function' ? chunkConfig.content(arg) : (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)('table', {\n    role: 'presentation',\n    className: [chunkConfig.tableClassName, sectionConfig.syncRowHeights ? 'fc-scrollgrid-sync-table' : ''].join(' '),\n    style: {\n      minWidth: arg.tableMinWidth,\n      width: arg.clientWidth,\n      height: expandRows ? arg.clientHeight : '' // css `height` on a <table> serves as a min-height\n    }\n  }, arg.tableColGroupNode, (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(isHeader ? 'thead' : 'tbody', {\n    role: 'presentation'\n  }, typeof chunkConfig.rowContent === 'function' ? chunkConfig.rowContent(arg) : chunkConfig.rowContent));\n  return content;\n}\nfunction isColPropsEqual(cols0, cols1) {\n  return isArraysEqual(cols0, cols1, isPropsEqual);\n}\nfunction renderMicroColGroup(cols, shrinkWidth) {\n  var colNodes = [];\n  /*\n  for ColProps with spans, it would have been great to make a single <col span=\"\">\n  HOWEVER, Chrome was getting messing up distributing the width to <td>/<th> elements with colspans.\n  SOLUTION: making individual <col> elements makes Chrome behave.\n  */\n  var _iterator34 = _createForOfIteratorHelper(cols),\n    _step34;\n  try {\n    for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n      var colProps = _step34.value;\n      var span = colProps.span || 1;\n      for (var i = 0; i < span; i += 1) {\n        colNodes.push((0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"col\", {\n          style: {\n            width: colProps.width === 'shrink' ? sanitizeShrinkWidth(shrinkWidth) : colProps.width || '',\n            minWidth: colProps.minWidth || ''\n          }\n        }));\n      }\n    }\n  } catch (err) {\n    _iterator34.e(err);\n  } finally {\n    _iterator34.f();\n  }\n  return preact__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(void 0, ['colgroup', {}].concat(colNodes));\n}\nfunction sanitizeShrinkWidth(shrinkWidth) {\n  /* why 4? if we do 0, it will kill any border, which are needed for computeSmallestCellWidth\n  4 accounts for 2 2-pixel borders. TODO: better solution? */\n  return shrinkWidth == null ? 4 : shrinkWidth;\n}\nfunction hasShrinkWidth(cols) {\n  var _iterator35 = _createForOfIteratorHelper(cols),\n    _step35;\n  try {\n    for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n      var col = _step35.value;\n      if (col.width === 'shrink') {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator35.e(err);\n  } finally {\n    _iterator35.f();\n  }\n  return false;\n}\nfunction getScrollGridClassNames(liquid, context) {\n  var classNames = ['fc-scrollgrid', context.theme.getClass('table')];\n  if (liquid) {\n    classNames.push('fc-scrollgrid-liquid');\n  }\n  return classNames;\n}\nfunction getSectionClassNames(sectionConfig, wholeTableVGrow) {\n  var classNames = ['fc-scrollgrid-section', \"fc-scrollgrid-section-\".concat(sectionConfig.type), sectionConfig.className // used?\n  ];\n\n  if (wholeTableVGrow && sectionConfig.liquid && sectionConfig.maxHeight == null) {\n    classNames.push('fc-scrollgrid-section-liquid');\n  }\n  if (sectionConfig.isSticky) {\n    classNames.push('fc-scrollgrid-section-sticky');\n  }\n  return classNames;\n}\nfunction renderScrollShim(arg) {\n  return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-scrollgrid-sticky-shim\",\n    style: {\n      width: arg.clientWidth,\n      minWidth: arg.tableMinWidth\n    }\n  });\n}\nfunction getStickyHeaderDates(options) {\n  var stickyHeaderDates = options.stickyHeaderDates;\n  if (stickyHeaderDates == null || stickyHeaderDates === 'auto') {\n    stickyHeaderDates = options.height === 'auto' || options.viewHeight === 'auto';\n  }\n  return stickyHeaderDates;\n}\nfunction getStickyFooterScrollbar(options) {\n  var stickyFooterScrollbar = options.stickyFooterScrollbar;\n  if (stickyFooterScrollbar == null || stickyFooterScrollbar === 'auto') {\n    stickyFooterScrollbar = options.height === 'auto' || options.viewHeight === 'auto';\n  }\n  return stickyFooterScrollbar;\n}\nvar SimpleScrollGrid = /*#__PURE__*/function (_BaseComponent9) {\n  function SimpleScrollGrid() {\n    var _this22;\n    _classCallCheck(this, SimpleScrollGrid);\n    _this22 = _callSuper(this, SimpleScrollGrid, arguments);\n    _this22.processCols = memoize(function (a) {\n      return a;\n    }, isColPropsEqual); // so we get same `cols` props every time\n    // yucky to memoize VNodes, but much more efficient for consumers\n    _this22.renderMicroColGroup = memoize(renderMicroColGroup);\n    _this22.scrollerRefs = new RefMap();\n    _this22.scrollerElRefs = new RefMap(_this22._handleScrollerEl.bind(_this22));\n    _this22.state = {\n      shrinkWidth: null,\n      forceYScrollbars: false,\n      scrollerClientWidths: {},\n      scrollerClientHeights: {}\n    };\n    // TODO: can do a really simple print-view. dont need to join rows\n    _this22.handleSizing = function () {\n      _this22.safeSetState(Object.assign({\n        shrinkWidth: _this22.computeShrinkWidth()\n      }, _this22.computeScrollerDims()));\n    };\n    return _this22;\n  }\n  _inherits(SimpleScrollGrid, _BaseComponent9);\n  return _createClass(SimpleScrollGrid, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        state = this.state,\n        context = this.context;\n      var sectionConfigs = props.sections || [];\n      var cols = this.processCols(props.cols);\n      var microColGroupNode = this.renderMicroColGroup(cols, state.shrinkWidth);\n      var classNames = getScrollGridClassNames(props.liquid, context);\n      if (props.collapsibleWidth) {\n        classNames.push('fc-scrollgrid-collapsible');\n      }\n      // TODO: make DRY\n      var configCnt = sectionConfigs.length;\n      var configI = 0;\n      var currentConfig;\n      var headSectionNodes = [];\n      var bodySectionNodes = [];\n      var footSectionNodes = [];\n      while (configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'header') {\n        headSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));\n        configI += 1;\n      }\n      while (configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'body') {\n        bodySectionNodes.push(this.renderSection(currentConfig, microColGroupNode, false));\n        configI += 1;\n      }\n      while (configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'footer') {\n        footSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));\n        configI += 1;\n      }\n      // firefox bug: when setting height on table and there is a thead or tfoot,\n      // the necessary height:100% on the liquid-height body section forces the *whole* table to be taller. (bug #5524)\n      // use getCanVGrowWithinCell as a way to detect table-stupid firefox.\n      // if so, use a simpler dom structure, jam everything into a lone tbody.\n      var isBuggy = !getCanVGrowWithinCell();\n      var roleAttrs = {\n        role: 'rowgroup'\n      };\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)('table', {\n        role: 'grid',\n        className: classNames.join(' '),\n        style: {\n          height: props.height\n        }\n      }, Boolean(!isBuggy && headSectionNodes.length) && preact__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(void 0, ['thead', roleAttrs].concat(headSectionNodes)), Boolean(!isBuggy && bodySectionNodes.length) && preact__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(void 0, ['tbody', roleAttrs].concat(bodySectionNodes)), Boolean(!isBuggy && footSectionNodes.length) && preact__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(void 0, ['tfoot', roleAttrs].concat(footSectionNodes)), isBuggy && preact__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(void 0, ['tbody', roleAttrs].concat(headSectionNodes, bodySectionNodes, footSectionNodes)));\n    }\n  }, {\n    key: \"renderSection\",\n    value: function renderSection(sectionConfig, microColGroupNode, isHeader) {\n      if ('outerContent' in sectionConfig) {\n        return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(preact__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n          key: sectionConfig.key\n        }, sectionConfig.outerContent);\n      }\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"tr\", {\n        key: sectionConfig.key,\n        role: \"presentation\",\n        className: getSectionClassNames(sectionConfig, this.props.liquid).join(' ')\n      }, this.renderChunkTd(sectionConfig, microColGroupNode, sectionConfig.chunk, isHeader));\n    }\n  }, {\n    key: \"renderChunkTd\",\n    value: function renderChunkTd(sectionConfig, microColGroupNode, chunkConfig, isHeader) {\n      if ('outerContent' in chunkConfig) {\n        return chunkConfig.outerContent;\n      }\n      var props = this.props;\n      var _this$state = this.state,\n        forceYScrollbars = _this$state.forceYScrollbars,\n        scrollerClientWidths = _this$state.scrollerClientWidths,\n        scrollerClientHeights = _this$state.scrollerClientHeights;\n      var needsYScrolling = getAllowYScrolling(props, sectionConfig); // TODO: do lazily. do in section config?\n      var isLiquid = getSectionHasLiquidHeight(props, sectionConfig);\n      // for `!props.liquid` - is WHOLE scrollgrid natural height?\n      // TODO: do same thing in advanced scrollgrid? prolly not b/c always has horizontal scrollbars\n      var overflowY = !props.liquid ? 'visible' : forceYScrollbars ? 'scroll' : !needsYScrolling ? 'hidden' : 'auto';\n      var sectionKey = sectionConfig.key;\n      var content = renderChunkContent(sectionConfig, chunkConfig, {\n        tableColGroupNode: microColGroupNode,\n        tableMinWidth: '',\n        clientWidth: !props.collapsibleWidth && scrollerClientWidths[sectionKey] !== undefined ? scrollerClientWidths[sectionKey] : null,\n        clientHeight: scrollerClientHeights[sectionKey] !== undefined ? scrollerClientHeights[sectionKey] : null,\n        expandRows: sectionConfig.expandRows,\n        syncRowHeights: false,\n        rowSyncHeights: [],\n        reportRowHeightChange: function reportRowHeightChange() {}\n      }, isHeader);\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(isHeader ? 'th' : 'td', {\n        ref: chunkConfig.elRef,\n        role: 'presentation'\n      }, (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n        className: \"fc-scroller-harness\".concat(isLiquid ? ' fc-scroller-harness-liquid' : '')\n      }, (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(Scroller, {\n        ref: this.scrollerRefs.createRef(sectionKey),\n        elRef: this.scrollerElRefs.createRef(sectionKey),\n        overflowY: overflowY,\n        overflowX: !props.liquid ? 'visible' : 'hidden' /* natural height? */,\n        maxHeight: sectionConfig.maxHeight,\n        liquid: isLiquid,\n        liquidIsAbsolute // because its within a harness\n        : true\n      }, content)));\n    }\n  }, {\n    key: \"_handleScrollerEl\",\n    value: function _handleScrollerEl(scrollerEl, key) {\n      var section = getSectionByKey(this.props.sections, key);\n      if (section) {\n        setRef(section.chunk.scrollerElRef, scrollerEl);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleSizing();\n      this.context.addResizeHandler(this.handleSizing);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // TODO: need better solution when state contains non-sizing things\n      this.handleSizing();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.removeResizeHandler(this.handleSizing);\n    }\n  }, {\n    key: \"computeShrinkWidth\",\n    value: function computeShrinkWidth() {\n      return hasShrinkWidth(this.props.cols) ? _computeShrinkWidth(this.scrollerElRefs.getAll()) : 0;\n    }\n  }, {\n    key: \"computeScrollerDims\",\n    value: function computeScrollerDims() {\n      var scrollbarWidth = getScrollbarWidths();\n      var scrollerRefs = this.scrollerRefs,\n        scrollerElRefs = this.scrollerElRefs;\n      var forceYScrollbars = false;\n      var scrollerClientWidths = {};\n      var scrollerClientHeights = {};\n      for (var sectionKey in scrollerRefs.currentMap) {\n        var scroller = scrollerRefs.currentMap[sectionKey];\n        if (scroller && scroller.needsYScrolling()) {\n          forceYScrollbars = true;\n          break;\n        }\n      }\n      var _iterator36 = _createForOfIteratorHelper(this.props.sections),\n        _step36;\n      try {\n        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n          var section = _step36.value;\n          var _sectionKey = section.key;\n          var scrollerEl = scrollerElRefs.currentMap[_sectionKey];\n          if (scrollerEl) {\n            var harnessEl = scrollerEl.parentNode; // TODO: weird way to get this. need harness b/c doesn't include table borders\n            scrollerClientWidths[_sectionKey] = Math.floor(harnessEl.getBoundingClientRect().width - (forceYScrollbars ? scrollbarWidth.y // use global because scroller might not have scrollbars yet but will need them in future\n            : 0));\n            scrollerClientHeights[_sectionKey] = Math.floor(harnessEl.getBoundingClientRect().height);\n          }\n        }\n      } catch (err) {\n        _iterator36.e(err);\n      } finally {\n        _iterator36.f();\n      }\n      return {\n        forceYScrollbars: forceYScrollbars,\n        scrollerClientWidths: scrollerClientWidths,\n        scrollerClientHeights: scrollerClientHeights\n      };\n    }\n  }]);\n}(BaseComponent);\nSimpleScrollGrid.addStateEquality({\n  scrollerClientWidths: isPropsEqual,\n  scrollerClientHeights: isPropsEqual\n});\nfunction getSectionByKey(sections, key) {\n  var _iterator37 = _createForOfIteratorHelper(sections),\n    _step37;\n  try {\n    for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n      var section = _step37.value;\n      if (section.key === key) {\n        return section;\n      }\n    }\n  } catch (err) {\n    _iterator37.e(err);\n  } finally {\n    _iterator37.f();\n  }\n  return null;\n}\nvar EventContainer = /*#__PURE__*/function (_BaseComponent10) {\n  function EventContainer() {\n    var _this23;\n    _classCallCheck(this, EventContainer);\n    _this23 = _callSuper(this, EventContainer, arguments);\n    _this23.handleEl = function (el) {\n      _this23.el = el;\n      if (el) {\n        setElSeg(el, _this23.props.seg);\n      }\n    };\n    return _this23;\n  }\n  _inherits(EventContainer, _BaseComponent10);\n  return _createClass(EventContainer, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      var options = context.options;\n      var seg = props.seg;\n      var eventRange = seg.eventRange;\n      var ui = eventRange.ui;\n      var renderProps = {\n        event: new EventImpl(context, eventRange.def, eventRange.instance),\n        view: context.viewApi,\n        timeText: props.timeText,\n        textColor: ui.textColor,\n        backgroundColor: ui.backgroundColor,\n        borderColor: ui.borderColor,\n        isDraggable: !props.disableDragging && computeSegDraggable(seg, context),\n        isStartResizable: !props.disableResizing && computeSegStartResizable(seg, context),\n        isEndResizable: !props.disableResizing && computeSegEndResizable(seg),\n        isMirror: Boolean(props.isDragging || props.isResizing || props.isDateSelecting),\n        isStart: Boolean(seg.isStart),\n        isEnd: Boolean(seg.isEnd),\n        isPast: Boolean(props.isPast),\n        isFuture: Boolean(props.isFuture),\n        isToday: Boolean(props.isToday),\n        isSelected: Boolean(props.isSelected),\n        isDragging: Boolean(props.isDragging),\n        isResizing: Boolean(props.isResizing)\n      };\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentContainer, Object.assign({}, props /* contains children */, {\n        elRef: this.handleEl,\n        elClasses: [].concat(_toConsumableArray(getEventClassNames(renderProps)), _toConsumableArray(seg.eventRange.ui.classNames), _toConsumableArray(props.elClasses || [])),\n        renderProps: renderProps,\n        generatorName: \"eventContent\",\n        customGenerator: options.eventContent,\n        defaultGenerator: props.defaultGenerator,\n        classNameGenerator: options.eventClassNames,\n        didMount: options.eventDidMount,\n        willUnmount: options.eventWillUnmount\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.el && this.props.seg !== prevProps.seg) {\n        setElSeg(this.el, this.props.seg);\n      }\n    }\n  }]);\n}(BaseComponent); // should not be a purecomponent\nvar StandardEvent = /*#__PURE__*/function (_BaseComponent11) {\n  function StandardEvent() {\n    _classCallCheck(this, StandardEvent);\n    return _callSuper(this, StandardEvent, arguments);\n  }\n  _inherits(StandardEvent, _BaseComponent11);\n  return _createClass(StandardEvent, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      var options = context.options;\n      var seg = props.seg;\n      var ui = seg.eventRange.ui;\n      var timeFormat = options.eventTimeFormat || props.defaultTimeFormat;\n      var timeText = buildSegTimeText(seg, timeFormat, context, props.defaultDisplayEventTime, props.defaultDisplayEventEnd);\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(EventContainer, Object.assign({}, props /* includes elRef */, {\n        elTag: \"a\",\n        elStyle: {\n          borderColor: ui.borderColor,\n          backgroundColor: ui.backgroundColor\n        },\n        elAttrs: getSegAnchorAttrs(seg, context),\n        defaultGenerator: renderInnerContent$1,\n        timeText: timeText\n      }), function (InnerContent, eventContentArg) {\n        return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(preact__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(InnerContent, {\n          elTag: \"div\",\n          elClasses: ['fc-event-main'],\n          elStyle: {\n            color: eventContentArg.textColor\n          }\n        }), Boolean(eventContentArg.isStartResizable) && (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-event-resizer fc-event-resizer-start\"\n        }), Boolean(eventContentArg.isEndResizable) && (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-event-resizer fc-event-resizer-end\"\n        }));\n      });\n    }\n  }]);\n}(BaseComponent);\nfunction renderInnerContent$1(innerProps) {\n  return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-event-main-frame\"\n  }, innerProps.timeText && (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-event-time\"\n  }, innerProps.timeText), (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-event-title-container\"\n  }, (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-event-title fc-sticky\"\n  }, innerProps.event.title || (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(preact__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"\\xA0\"))));\n}\nvar NowIndicatorContainer = function NowIndicatorContainer(props) {\n  return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ViewContextType.Consumer, null, function (context) {\n    var options = context.options;\n    var renderProps = {\n      isAxis: props.isAxis,\n      date: context.dateEnv.toDate(props.date),\n      view: context.viewApi\n    };\n    return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentContainer, Object.assign({}, props /* includes children */, {\n      elTag: props.elTag || 'div',\n      renderProps: renderProps,\n      generatorName: \"nowIndicatorContent\",\n      customGenerator: options.nowIndicatorContent,\n      classNameGenerator: options.nowIndicatorClassNames,\n      didMount: options.nowIndicatorDidMount,\n      willUnmount: options.nowIndicatorWillUnmount\n    }));\n  });\n};\nvar DAY_NUM_FORMAT = createFormatter({\n  day: 'numeric'\n});\nvar DayCellContainer = /*#__PURE__*/function (_BaseComponent12) {\n  function DayCellContainer() {\n    var _this24;\n    _classCallCheck(this, DayCellContainer);\n    _this24 = _callSuper(this, DayCellContainer, arguments);\n    _this24.refineRenderProps = memoizeObjArg(refineRenderProps);\n    return _this24;\n  }\n  _inherits(DayCellContainer, _BaseComponent12);\n  return _createClass(DayCellContainer, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      var options = context.options;\n      var renderProps = this.refineRenderProps({\n        date: props.date,\n        dateProfile: props.dateProfile,\n        todayRange: props.todayRange,\n        isMonthStart: props.isMonthStart || false,\n        showDayNumber: props.showDayNumber,\n        extraRenderProps: props.extraRenderProps,\n        viewApi: context.viewApi,\n        dateEnv: context.dateEnv,\n        monthStartFormat: options.monthStartFormat\n      });\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentContainer, Object.assign({}, props /* includes children */, {\n        elClasses: [].concat(_toConsumableArray(getDayClassNames(renderProps, context.theme)), _toConsumableArray(props.elClasses || [])),\n        elAttrs: Object.assign(Object.assign({}, props.elAttrs), renderProps.isDisabled ? {} : {\n          'data-date': formatDayString(props.date)\n        }),\n        renderProps: renderProps,\n        generatorName: \"dayCellContent\",\n        customGenerator: options.dayCellContent,\n        defaultGenerator: props.defaultGenerator,\n        classNameGenerator:\n        // don't use custom classNames if disabled\n        renderProps.isDisabled ? undefined : options.dayCellClassNames,\n        didMount: options.dayCellDidMount,\n        willUnmount: options.dayCellWillUnmount\n      }));\n    }\n  }]);\n}(BaseComponent);\nfunction hasCustomDayCellContent(options) {\n  return Boolean(options.dayCellContent || hasCustomRenderingHandler('dayCellContent', options));\n}\nfunction refineRenderProps(raw) {\n  var date = raw.date,\n    dateEnv = raw.dateEnv,\n    dateProfile = raw.dateProfile,\n    isMonthStart = raw.isMonthStart;\n  var dayMeta = getDateMeta(date, raw.todayRange, null, dateProfile);\n  var dayNumberText = raw.showDayNumber ? dateEnv.format(date, isMonthStart ? raw.monthStartFormat : DAY_NUM_FORMAT) : '';\n  return Object.assign(Object.assign(Object.assign({\n    date: dateEnv.toDate(date),\n    view: raw.viewApi\n  }, dayMeta), {\n    isMonthStart: isMonthStart,\n    dayNumberText: dayNumberText\n  }), raw.extraRenderProps);\n}\nvar BgEvent = /*#__PURE__*/function (_BaseComponent13) {\n  function BgEvent() {\n    _classCallCheck(this, BgEvent);\n    return _callSuper(this, BgEvent, arguments);\n  }\n  _inherits(BgEvent, _BaseComponent13);\n  return _createClass(BgEvent, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var seg = props.seg;\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(EventContainer, {\n        elTag: \"div\",\n        elClasses: ['fc-bg-event'],\n        elStyle: {\n          backgroundColor: seg.eventRange.ui.backgroundColor\n        },\n        defaultGenerator: renderInnerContent,\n        seg: seg,\n        timeText: \"\",\n        isDragging: false,\n        isResizing: false,\n        isDateSelecting: false,\n        isSelected: false,\n        isPast: props.isPast,\n        isFuture: props.isFuture,\n        isToday: props.isToday,\n        disableDragging: true,\n        disableResizing: true\n      });\n    }\n  }]);\n}(BaseComponent);\nfunction renderInnerContent(props) {\n  var title = props.event.title;\n  return title && (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-event-title\"\n  }, props.event.title);\n}\nfunction renderFill(fillType) {\n  return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-\".concat(fillType)\n  });\n}\nvar WeekNumberContainer = function WeekNumberContainer(props) {\n  return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ViewContextType.Consumer, null, function (context) {\n    var dateEnv = context.dateEnv,\n      options = context.options;\n    var date = props.date;\n    var format = options.weekNumberFormat || props.defaultFormat;\n    var num = dateEnv.computeWeekNumber(date); // TODO: somehow use for formatting as well?\n    var text = dateEnv.format(date, format);\n    var renderProps = {\n      num: num,\n      text: text,\n      date: date\n    };\n    return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentContainer // why isn't WeekNumberContentArg being auto-detected?\n    , Object.assign({}, props /* includes children */, {\n      renderProps: renderProps,\n      generatorName: \"weekNumberContent\",\n      customGenerator: options.weekNumberContent,\n      defaultGenerator: renderInner,\n      classNameGenerator: options.weekNumberClassNames,\n      didMount: options.weekNumberDidMount,\n      willUnmount: options.weekNumberWillUnmount\n    }));\n  });\n};\nfunction renderInner(innerProps) {\n  return innerProps.text;\n}\nvar PADDING_FROM_VIEWPORT = 10;\nvar Popover = /*#__PURE__*/function (_BaseComponent14) {\n  function Popover() {\n    var _this25;\n    _classCallCheck(this, Popover);\n    _this25 = _callSuper(this, Popover, arguments);\n    _this25.state = {\n      titleId: getUniqueDomId()\n    };\n    _this25.handleRootEl = function (el) {\n      _this25.rootEl = el;\n      if (_this25.props.elRef) {\n        setRef(_this25.props.elRef, el);\n      }\n    };\n    // Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n    _this25.handleDocumentMouseDown = function (ev) {\n      // only hide the popover if the click happened outside the popover\n      var target = getEventTargetViaRoot(ev);\n      if (!_this25.rootEl.contains(target)) {\n        _this25.handleCloseClick();\n      }\n    };\n    _this25.handleDocumentKeyDown = function (ev) {\n      if (ev.key === 'Escape') {\n        _this25.handleCloseClick();\n      }\n    };\n    _this25.handleCloseClick = function () {\n      var onClose = _this25.props.onClose;\n      if (onClose) {\n        onClose();\n      }\n    };\n    return _this25;\n  }\n  _inherits(Popover, _BaseComponent14);\n  return _createClass(Popover, [{\n    key: \"render\",\n    value: function render() {\n      var _this$context3 = this.context,\n        theme = _this$context3.theme,\n        options = _this$context3.options;\n      var props = this.props,\n        state = this.state;\n      var classNames = ['fc-popover', theme.getClass('popover')].concat(props.extraClassNames || []);\n      return (0,preact_compat__WEBPACK_IMPORTED_MODULE_1__.createPortal)((0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", Object.assign({}, props.extraAttrs, {\n        id: props.id,\n        className: classNames.join(' '),\n        \"aria-labelledby\": state.titleId,\n        ref: this.handleRootEl\n      }), (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n        className: 'fc-popover-header ' + theme.getClass('popoverHeader')\n      }, (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"span\", {\n        className: \"fc-popover-title\",\n        id: state.titleId\n      }, props.title), (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"span\", {\n        className: 'fc-popover-close ' + theme.getIconClass('close'),\n        title: options.closeHint,\n        onClick: this.handleCloseClick\n      })), (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n        className: 'fc-popover-body ' + theme.getClass('popoverContent')\n      }, props.children)), props.parentEl);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousedown', this.handleDocumentMouseDown);\n      document.addEventListener('keydown', this.handleDocumentKeyDown);\n      this.updateSize();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('mousedown', this.handleDocumentMouseDown);\n      document.removeEventListener('keydown', this.handleDocumentKeyDown);\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var isRtl = this.context.isRtl;\n      var _this$props5 = this.props,\n        alignmentEl = _this$props5.alignmentEl,\n        alignGridTop = _this$props5.alignGridTop;\n      var rootEl = this.rootEl;\n      var alignmentRect = computeClippedClientRect(alignmentEl);\n      if (alignmentRect) {\n        var popoverDims = rootEl.getBoundingClientRect();\n        // position relative to viewport\n        var popoverTop = alignGridTop ? elementClosest(alignmentEl, '.fc-scrollgrid').getBoundingClientRect().top : alignmentRect.top;\n        var popoverLeft = isRtl ? alignmentRect.right - popoverDims.width : alignmentRect.left;\n        // constrain\n        popoverTop = Math.max(popoverTop, PADDING_FROM_VIEWPORT);\n        popoverLeft = Math.min(popoverLeft, document.documentElement.clientWidth - PADDING_FROM_VIEWPORT - popoverDims.width);\n        popoverLeft = Math.max(popoverLeft, PADDING_FROM_VIEWPORT);\n        var origin = rootEl.offsetParent.getBoundingClientRect();\n        applyStyle(rootEl, {\n          top: popoverTop - origin.top,\n          left: popoverLeft - origin.left\n        });\n      }\n    }\n  }]);\n}(BaseComponent);\nvar MorePopover = /*#__PURE__*/function (_DateComponent) {\n  function MorePopover() {\n    var _this26;\n    _classCallCheck(this, MorePopover);\n    _this26 = _callSuper(this, MorePopover, arguments);\n    _this26.handleRootEl = function (rootEl) {\n      _this26.rootEl = rootEl;\n      if (rootEl) {\n        _this26.context.registerInteractiveComponent(_this26, {\n          el: rootEl,\n          useEventCenter: false\n        });\n      } else {\n        _this26.context.unregisterInteractiveComponent(_this26);\n      }\n    };\n    return _this26;\n  }\n  _inherits(MorePopover, _DateComponent);\n  return _createClass(MorePopover, [{\n    key: \"render\",\n    value: function render() {\n      var _this$context4 = this.context,\n        options = _this$context4.options,\n        dateEnv = _this$context4.dateEnv;\n      var props = this.props;\n      var startDate = props.startDate,\n        todayRange = props.todayRange,\n        dateProfile = props.dateProfile;\n      var title = dateEnv.format(startDate, options.dayPopoverFormat);\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(DayCellContainer, {\n        elRef: this.handleRootEl,\n        date: startDate,\n        dateProfile: dateProfile,\n        todayRange: todayRange\n      }, function (InnerContent, renderProps, elAttrs) {\n        return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(Popover, {\n          elRef: elAttrs.ref,\n          id: props.id,\n          title: title,\n          extraClassNames: ['fc-more-popover'].concat(elAttrs.className || []),\n          extraAttrs: elAttrs /* TODO: make these time-based when not whole-day? */,\n          parentEl: props.parentEl,\n          alignmentEl: props.alignmentEl,\n          alignGridTop: props.alignGridTop,\n          onClose: props.onClose\n        }, hasCustomDayCellContent(options) && (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(InnerContent, {\n          elTag: \"div\",\n          elClasses: ['fc-more-popover-misc']\n        }), props.children);\n      });\n    }\n  }, {\n    key: \"queryHit\",\n    value: function queryHit(positionLeft, positionTop, elWidth, elHeight) {\n      var rootEl = this.rootEl,\n        props = this.props;\n      if (positionLeft >= 0 && positionLeft < elWidth && positionTop >= 0 && positionTop < elHeight) {\n        return {\n          dateProfile: props.dateProfile,\n          dateSpan: Object.assign({\n            allDay: !props.forceTimed,\n            range: {\n              start: props.startDate,\n              end: props.endDate\n            }\n          }, props.extraDateSpan),\n          dayEl: rootEl,\n          rect: {\n            left: 0,\n            top: 0,\n            right: elWidth,\n            bottom: elHeight\n          },\n          layer: 1 // important when comparing with hits from other components\n        };\n      }\n\n      return null;\n    }\n  }]);\n}(DateComponent);\nvar MoreLinkContainer = /*#__PURE__*/function (_BaseComponent15) {\n  function MoreLinkContainer() {\n    var _this27;\n    _classCallCheck(this, MoreLinkContainer);\n    _this27 = _callSuper(this, MoreLinkContainer, arguments);\n    _this27.state = {\n      isPopoverOpen: false,\n      popoverId: getUniqueDomId()\n    };\n    _this27.handleLinkEl = function (linkEl) {\n      _this27.linkEl = linkEl;\n      if (_this27.props.elRef) {\n        setRef(_this27.props.elRef, linkEl);\n      }\n    };\n    _this27.handleClick = function (ev) {\n      var _this28 = _this27,\n        props = _this28.props,\n        context = _this28.context;\n      var moreLinkClick = context.options.moreLinkClick;\n      var date = computeRange(props).start;\n      function buildPublicSeg(seg) {\n        var _seg$eventRange3 = seg.eventRange,\n          def = _seg$eventRange3.def,\n          instance = _seg$eventRange3.instance,\n          range = _seg$eventRange3.range;\n        return {\n          event: new EventImpl(context, def, instance),\n          start: context.dateEnv.toDate(range.start),\n          end: context.dateEnv.toDate(range.end),\n          isStart: seg.isStart,\n          isEnd: seg.isEnd\n        };\n      }\n      if (typeof moreLinkClick === 'function') {\n        moreLinkClick = moreLinkClick({\n          date: date,\n          allDay: Boolean(props.allDayDate),\n          allSegs: props.allSegs.map(buildPublicSeg),\n          hiddenSegs: props.hiddenSegs.map(buildPublicSeg),\n          jsEvent: ev,\n          view: context.viewApi\n        });\n      }\n      if (!moreLinkClick || moreLinkClick === 'popover') {\n        _this27.setState({\n          isPopoverOpen: true\n        });\n      } else if (typeof moreLinkClick === 'string') {\n        // a view name\n        context.calendarApi.zoomTo(date, moreLinkClick);\n      }\n    };\n    _this27.handlePopoverClose = function () {\n      _this27.setState({\n        isPopoverOpen: false\n      });\n    };\n    return _this27;\n  }\n  _inherits(MoreLinkContainer, _BaseComponent15);\n  return _createClass(MoreLinkContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this29 = this;\n      var props = this.props,\n        state = this.state;\n      return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ViewContextType.Consumer, null, function (context) {\n        var viewApi = context.viewApi,\n          options = context.options,\n          calendarApi = context.calendarApi;\n        var moreLinkText = options.moreLinkText;\n        var moreCnt = props.moreCnt;\n        var range = computeRange(props);\n        var text = typeof moreLinkText === 'function' // TODO: eventually use formatWithOrdinals\n        ? moreLinkText.call(calendarApi, moreCnt) : \"+\".concat(moreCnt, \" \").concat(moreLinkText);\n        var hint = formatWithOrdinals(options.moreLinkHint, [moreCnt], text);\n        var renderProps = {\n          num: moreCnt,\n          shortText: \"+\".concat(moreCnt),\n          text: text,\n          view: viewApi\n        };\n        return (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(preact__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, Boolean(props.moreCnt) && (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(ContentContainer, {\n          elTag: props.elTag || 'a',\n          elRef: _this29.handleLinkEl,\n          elClasses: [].concat(_toConsumableArray(props.elClasses || []), ['fc-more-link']),\n          elStyle: props.elStyle,\n          elAttrs: Object.assign(Object.assign(Object.assign({}, props.elAttrs), createAriaClickAttrs(_this29.handleClick)), {\n            title: hint,\n            'aria-expanded': state.isPopoverOpen,\n            'aria-controls': state.isPopoverOpen ? state.popoverId : ''\n          }),\n          renderProps: renderProps,\n          generatorName: \"moreLinkContent\",\n          customGenerator: options.moreLinkContent,\n          defaultGenerator: props.defaultGenerator || renderMoreLinkInner,\n          classNameGenerator: options.moreLinkClassNames,\n          didMount: options.moreLinkDidMount,\n          willUnmount: options.moreLinkWillUnmount\n        }, props.children), state.isPopoverOpen && (0,preact__WEBPACK_IMPORTED_MODULE_0__.createElement)(MorePopover, {\n          id: state.popoverId,\n          startDate: range.start,\n          endDate: range.end,\n          dateProfile: props.dateProfile,\n          todayRange: props.todayRange,\n          extraDateSpan: props.extraDateSpan,\n          parentEl: _this29.parentEl,\n          alignmentEl: props.alignmentElRef ? props.alignmentElRef.current : _this29.linkEl,\n          alignGridTop: props.alignGridTop,\n          forceTimed: props.forceTimed,\n          onClose: _this29.handlePopoverClose\n        }, props.popoverContent()));\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateParentEl();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateParentEl();\n    }\n  }, {\n    key: \"updateParentEl\",\n    value: function updateParentEl() {\n      if (this.linkEl) {\n        this.parentEl = elementClosest(this.linkEl, '.fc-view-harness');\n      }\n    }\n  }]);\n}(BaseComponent);\nfunction renderMoreLinkInner(props) {\n  return props.text;\n}\nfunction computeRange(props) {\n  if (props.allDayDate) {\n    return {\n      start: props.allDayDate,\n      end: addDays(props.allDayDate, 1)\n    };\n  }\n  var hiddenSegs = props.hiddenSegs;\n  return {\n    start: computeEarliestSegStart(hiddenSegs),\n    end: computeLatestSegEnd(hiddenSegs)\n  };\n}\nfunction computeEarliestSegStart(segs) {\n  return segs.reduce(pickEarliestStart).eventRange.range.start;\n}\nfunction pickEarliestStart(seg0, seg1) {\n  return seg0.eventRange.range.start < seg1.eventRange.range.start ? seg0 : seg1;\n}\nfunction computeLatestSegEnd(segs) {\n  return segs.reduce(pickLatestEnd).eventRange.range.end;\n}\nfunction pickLatestEnd(seg0, seg1) {\n  return seg0.eventRange.range.end > seg1.eventRange.range.end ? seg0 : seg1;\n}\nvar Store = /*#__PURE__*/function () {\n  function Store() {\n    _classCallCheck(this, Store);\n    this.handlers = [];\n  }\n  return _createClass(Store, [{\n    key: \"set\",\n    value: function set(value) {\n      this.currentValue = value;\n      var _iterator38 = _createForOfIteratorHelper(this.handlers),\n        _step38;\n      try {\n        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {\n          var handler = _step38.value;\n          handler(value);\n        }\n      } catch (err) {\n        _iterator38.e(err);\n      } finally {\n        _iterator38.f();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(handler) {\n      this.handlers.push(handler);\n      if (this.currentValue !== undefined) {\n        handler(this.currentValue);\n      }\n    }\n  }]);\n}();\n/*\nSubscribers will get a LIST of CustomRenderings\n*/\nvar CustomRenderingStore = /*#__PURE__*/function (_Store) {\n  function CustomRenderingStore() {\n    var _this30;\n    _classCallCheck(this, CustomRenderingStore);\n    _this30 = _callSuper(this, CustomRenderingStore, arguments);\n    _this30.map = new Map();\n    return _this30;\n  }\n  // for consistent order\n  _inherits(CustomRenderingStore, _Store);\n  return _createClass(CustomRenderingStore, [{\n    key: \"handle\",\n    value: function handle(customRendering) {\n      var map = this.map;\n      var updated = false;\n      if (customRendering.isActive) {\n        map.set(customRendering.id, customRendering);\n        updated = true;\n      } else if (map.has(customRendering.id)) {\n        map[\"delete\"](customRendering.id);\n        updated = true;\n      }\n      if (updated) {\n        this.set(map);\n      }\n    }\n  }]);\n}(Store);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fullcalendar/core/internal-common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fullcalendar/daygrid/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fullcalendar/daygrid/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var _fullcalendar_core_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core/index.js */ \"(ssr)/./node_modules/@fullcalendar/core/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@fullcalendar/daygrid/internal.js\");\n\n\n\n\nvar index = (0,_fullcalendar_core_index_js__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n  name: '@fullcalendar/daygrid',\n  initialView: 'dayGridMonth',\n  views: {\n    dayGrid: {\n      component: _internal_js__WEBPACK_IMPORTED_MODULE_1__.DayGridView,\n      dateProfileGeneratorClass: _internal_js__WEBPACK_IMPORTED_MODULE_1__.TableDateProfileGenerator\n    },\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: {\n        days: 1\n      }\n    },\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: {\n        weeks: 1\n      }\n    },\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: {\n        months: 1\n      },\n      fixedWeekCount: true\n    },\n    dayGridYear: {\n      type: 'dayGrid',\n      duration: {\n        years: 1\n      }\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9kYXlncmlkL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyRDtBQUM0QjtBQUMvQztBQUNGO0FBRXRDLElBQUlJLEtBQUssR0FBR0oseUVBQVksQ0FBQztFQUNyQkssSUFBSSxFQUFFLHVCQUF1QjtFQUM3QkMsV0FBVyxFQUFFLGNBQWM7RUFDM0JDLEtBQUssRUFBRTtJQUNIQyxPQUFPLEVBQUU7TUFDTEMsU0FBUyxFQUFFUCxxREFBWTtNQUN2QlEseUJBQXlCLEVBQUVQLG1FQUF5QkE7SUFDeEQsQ0FBQztJQUNEUSxVQUFVLEVBQUU7TUFDUkMsSUFBSSxFQUFFLFNBQVM7TUFDZkMsUUFBUSxFQUFFO1FBQUVDLElBQUksRUFBRTtNQUFFO0lBQ3hCLENBQUM7SUFDREMsV0FBVyxFQUFFO01BQ1RILElBQUksRUFBRSxTQUFTO01BQ2ZDLFFBQVEsRUFBRTtRQUFFRyxLQUFLLEVBQUU7TUFBRTtJQUN6QixDQUFDO0lBQ0RDLFlBQVksRUFBRTtNQUNWTCxJQUFJLEVBQUUsU0FBUztNQUNmQyxRQUFRLEVBQUU7UUFBRUssTUFBTSxFQUFFO01BQUUsQ0FBQztNQUN2QkMsY0FBYyxFQUFFO0lBQ3BCLENBQUM7SUFDREMsV0FBVyxFQUFFO01BQ1RSLElBQUksRUFBRSxTQUFTO01BQ2ZDLFFBQVEsRUFBRTtRQUFFUSxLQUFLLEVBQUU7TUFBRTtJQUN6QjtFQUNKO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3R1ZGlvcGhvdG8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9kYXlncmlkL2luZGV4LmpzP2MxYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUGx1Z2luIH0gZnJvbSAnQGZ1bGxjYWxlbmRhci9jb3JlL2luZGV4LmpzJztcbmltcG9ydCB7IERheUdyaWRWaWV3IGFzIERheVRhYmxlVmlldywgVGFibGVEYXRlUHJvZmlsZUdlbmVyYXRvciB9IGZyb20gJy4vaW50ZXJuYWwuanMnO1xuaW1wb3J0ICdAZnVsbGNhbGVuZGFyL2NvcmUvaW50ZXJuYWwuanMnO1xuaW1wb3J0ICdAZnVsbGNhbGVuZGFyL2NvcmUvcHJlYWN0LmpzJztcblxudmFyIGluZGV4ID0gY3JlYXRlUGx1Z2luKHtcbiAgICBuYW1lOiAnQGZ1bGxjYWxlbmRhci9kYXlncmlkJyxcbiAgICBpbml0aWFsVmlldzogJ2RheUdyaWRNb250aCcsXG4gICAgdmlld3M6IHtcbiAgICAgICAgZGF5R3JpZDoge1xuICAgICAgICAgICAgY29tcG9uZW50OiBEYXlUYWJsZVZpZXcsXG4gICAgICAgICAgICBkYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzOiBUYWJsZURhdGVQcm9maWxlR2VuZXJhdG9yLFxuICAgICAgICB9LFxuICAgICAgICBkYXlHcmlkRGF5OiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF5R3JpZCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyBkYXlzOiAxIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGRheUdyaWRXZWVrOiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF5R3JpZCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyB3ZWVrczogMSB9LFxuICAgICAgICB9LFxuICAgICAgICBkYXlHcmlkTW9udGg6IHtcbiAgICAgICAgICAgIHR5cGU6ICdkYXlHcmlkJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB7IG1vbnRoczogMSB9LFxuICAgICAgICAgICAgZml4ZWRXZWVrQ291bnQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheUdyaWRZZWFyOiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF5R3JpZCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyB5ZWFyczogMSB9LFxuICAgICAgICB9LFxuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgaW5kZXggYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVBsdWdpbiIsIkRheUdyaWRWaWV3IiwiRGF5VGFibGVWaWV3IiwiVGFibGVEYXRlUHJvZmlsZUdlbmVyYXRvciIsImluZGV4IiwibmFtZSIsImluaXRpYWxWaWV3Iiwidmlld3MiLCJkYXlHcmlkIiwiY29tcG9uZW50IiwiZGF0ZVByb2ZpbGVHZW5lcmF0b3JDbGFzcyIsImRheUdyaWREYXkiLCJ0eXBlIiwiZHVyYXRpb24iLCJkYXlzIiwiZGF5R3JpZFdlZWsiLCJ3ZWVrcyIsImRheUdyaWRNb250aCIsIm1vbnRocyIsImZpeGVkV2Vla0NvdW50IiwiZGF5R3JpZFllYXIiLCJ5ZWFycyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fullcalendar/daygrid/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fullcalendar/daygrid/internal.js":
/*!********************************************************!*\
  !*** ./node_modules/@fullcalendar/daygrid/internal.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DayGridView: () => (/* binding */ DayTableView),\n/* harmony export */   DayTable: () => (/* binding */ DayTable),\n/* harmony export */   DayTableSlicer: () => (/* binding */ DayTableSlicer),\n/* harmony export */   Table: () => (/* binding */ Table),\n/* harmony export */   TableDateProfileGenerator: () => (/* binding */ TableDateProfileGenerator),\n/* harmony export */   TableRows: () => (/* binding */ TableRows),\n/* harmony export */   TableView: () => (/* binding */ TableView),\n/* harmony export */   buildDayTableModel: () => (/* binding */ buildDayTableModel),\n/* harmony export */   buildDayTableRenderRange: () => (/* binding */ buildDayTableRenderRange)\n/* harmony export */ });\n/* harmony import */ var _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/core/internal.js */ \"(ssr)/./node_modules/@fullcalendar/core/internal-common.js\");\n/* harmony import */ var _fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core/preact.js */ \"(ssr)/./node_modules/preact/dist/preact.mjs\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\nvar TableView = /*#__PURE__*/function (_DateComponent) {\n  function TableView() {\n    var _this2;\n    _classCallCheck(this, TableView);\n    _this2 = _callSuper(this, TableView, arguments);\n    _this2.headerElRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    return _this2;\n  }\n  _inherits(TableView, _DateComponent);\n  return _createClass(TableView, [{\n    key: \"renderSimpleLayout\",\n    value: function renderSimpleLayout(headerRowContent, bodyContent) {\n      var props = this.props,\n        context = this.context;\n      var sections = [];\n      var stickyHeaderDates = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cc)(context.options);\n      if (headerRowContent) {\n        sections.push({\n          type: 'header',\n          key: 'header',\n          isSticky: stickyHeaderDates,\n          chunk: {\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent\n          }\n        });\n      }\n      sections.push({\n        type: 'body',\n        key: 'body',\n        liquid: true,\n        chunk: {\n          content: bodyContent\n        }\n      });\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.ct, {\n        elClasses: ['fc-daygrid'],\n        viewSpec: context.viewSpec\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.b$, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        cols: [] /* TODO: make optional? */,\n        sections: sections\n      }));\n    }\n  }, {\n    key: \"renderHScrollLayout\",\n    value: function renderHScrollLayout(headerRowContent, bodyContent, colCnt, dayMinWidth) {\n      var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n      if (!ScrollGrid) {\n        throw new Error('No ScrollGrid implementation');\n      }\n      var props = this.props,\n        context = this.context;\n      var stickyHeaderDates = !props.forPrint && (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cc)(context.options);\n      var stickyFooterScrollbar = !props.forPrint && (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cb)(context.options);\n      var sections = [];\n      if (headerRowContent) {\n        sections.push({\n          type: 'header',\n          key: 'header',\n          isSticky: stickyHeaderDates,\n          chunks: [{\n            key: 'main',\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent\n          }]\n        });\n      }\n      sections.push({\n        type: 'body',\n        key: 'body',\n        liquid: true,\n        chunks: [{\n          key: 'main',\n          content: bodyContent\n        }]\n      });\n      if (stickyFooterScrollbar) {\n        sections.push({\n          type: 'footer',\n          key: 'footer',\n          isSticky: true,\n          chunks: [{\n            key: 'main',\n            content: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.ca\n          }]\n        });\n      }\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.ct, {\n        elClasses: ['fc-daygrid'],\n        viewSpec: context.viewSpec\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        forPrint: props.forPrint,\n        collapsibleWidth: props.forPrint,\n        colGroups: [{\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.be);\nfunction splitSegsByRow(segs, rowCnt) {\n  var byRow = [];\n  for (var i = 0; i < rowCnt; i += 1) {\n    byRow[i] = [];\n  }\n  var _iterator = _createForOfIteratorHelper(segs),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var seg = _step.value;\n      byRow[seg.row].push(seg);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return byRow;\n}\nfunction splitSegsByFirstCol(segs, colCnt) {\n  var byCol = [];\n  for (var i = 0; i < colCnt; i += 1) {\n    byCol[i] = [];\n  }\n  var _iterator2 = _createForOfIteratorHelper(segs),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var seg = _step2.value;\n      byCol[seg.firstCol].push(seg);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return byCol;\n}\nfunction splitInteractionByRow(ui, rowCnt) {\n  var byRow = [];\n  if (!ui) {\n    for (var i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var _i = 0; _i < rowCnt; _i += 1) {\n      byRow[_i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n    var _iterator3 = _createForOfIteratorHelper(ui.segs),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var seg = _step3.value;\n        byRow[seg.row].segs.push(seg);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  return byRow;\n}\nvar DEFAULT_TABLE_EVENT_TIME_FORMAT = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.x)({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow'\n});\nfunction hasListItemDisplay(seg) {\n  var display = seg.eventRange.ui.display;\n  return display === 'list-item' || display === 'auto' && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol &&\n  // can't be multi-day\n  seg.isStart &&\n  // \"\n  seg.isEnd // \"\n  ;\n}\nvar TableBlockEvent = /*#__PURE__*/function (_BaseComponent) {\n  function TableBlockEvent() {\n    _classCallCheck(this, TableBlockEvent);\n    return _callSuper(this, TableBlockEvent, arguments);\n  }\n  _inherits(TableBlockEvent, _BaseComponent);\n  return _createClass(TableBlockEvent, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cj, Object.assign({}, props, {\n        elClasses: ['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event'],\n        defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,\n        defaultDisplayEventEnd: props.defaultDisplayEventEnd,\n        disableResizing: !props.seg.eventRange.def.allDay\n      }));\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.B);\nvar TableListItemEvent = /*#__PURE__*/function (_BaseComponent2) {\n  function TableListItemEvent() {\n    _classCallCheck(this, TableListItemEvent);\n    return _callSuper(this, TableListItemEvent, arguments);\n  }\n  _inherits(TableListItemEvent, _BaseComponent2);\n  return _createClass(TableListItemEvent, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      var options = context.options;\n      var seg = props.seg;\n      var timeFormat = options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;\n      var timeText = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bQ)(seg, timeFormat, context, true, props.defaultDisplayEventEnd);\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cn, Object.assign({}, props, {\n        elTag: \"a\",\n        elClasses: ['fc-daygrid-event', 'fc-daygrid-dot-event'],\n        elAttrs: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bU)(props.seg, context),\n        defaultGenerator: renderInnerContent,\n        timeText: timeText,\n        isResizing: false,\n        isDateSelecting: false\n      }));\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.B);\nfunction renderInnerContent(renderProps) {\n  return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-daygrid-event-dot\",\n    style: {\n      borderColor: renderProps.borderColor || renderProps.backgroundColor\n    }\n  }), renderProps.timeText && (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-event-time\"\n  }, renderProps.timeText), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n    className: \"fc-event-title\"\n  }, renderProps.event.title || (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"\\xA0\")));\n}\nvar TableCellMoreLink = /*#__PURE__*/function (_BaseComponent3) {\n  function TableCellMoreLink() {\n    var _this3;\n    _classCallCheck(this, TableCellMoreLink);\n    _this3 = _callSuper(this, TableCellMoreLink, arguments);\n    _this3.compileSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.z)(compileSegs);\n    return _this3;\n  }\n  _inherits(TableCellMoreLink, _BaseComponent3);\n  return _createClass(TableCellMoreLink, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var _this$compileSegs = this.compileSegs(props.singlePlacements),\n        allSegs = _this$compileSegs.allSegs,\n        invisibleSegs = _this$compileSegs.invisibleSegs;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cr, {\n        elClasses: ['fc-daygrid-more-link'],\n        dateProfile: props.dateProfile,\n        todayRange: props.todayRange,\n        allDayDate: props.allDayDate,\n        moreCnt: props.moreCnt,\n        allSegs: allSegs,\n        hiddenSegs: invisibleSegs,\n        alignmentElRef: props.alignmentElRef,\n        alignGridTop: props.alignGridTop,\n        extraDateSpan: props.extraDateSpan,\n        popoverContent: function popoverContent() {\n          var isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};\n          return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, allSegs.map(function (seg) {\n            var instanceId = seg.eventRange.instance.instanceId;\n            return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n              className: \"fc-daygrid-event-harness\",\n              key: instanceId,\n              style: {\n                visibility: isForcedInvisible[instanceId] ? 'hidden' : ''\n              }\n            }, hasListItemDisplay(seg) ? (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableListItemEvent, Object.assign({\n              seg: seg,\n              isDragging: false,\n              isSelected: instanceId === props.eventSelection,\n              defaultDisplayEventEnd: false\n            }, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bS)(seg, props.todayRange))) : (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableBlockEvent, Object.assign({\n              seg: seg,\n              isDragging: false,\n              isResizing: false,\n              isDateSelecting: false,\n              isSelected: instanceId === props.eventSelection,\n              defaultDisplayEventEnd: false\n            }, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bS)(seg, props.todayRange))));\n          }));\n        }\n      });\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.B);\nfunction compileSegs(singlePlacements) {\n  var allSegs = [];\n  var invisibleSegs = [];\n  var _iterator4 = _createForOfIteratorHelper(singlePlacements),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var placement = _step4.value;\n      allSegs.push(placement.seg);\n      if (!placement.isVisible) {\n        invisibleSegs.push(placement.seg);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return {\n    allSegs: allSegs,\n    invisibleSegs: invisibleSegs\n  };\n}\nvar DEFAULT_WEEK_NUM_FORMAT = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.x)({\n  week: 'narrow'\n});\nvar TableCell = /*#__PURE__*/function (_DateComponent2) {\n  function TableCell() {\n    var _this4;\n    _classCallCheck(this, TableCell);\n    _this4 = _callSuper(this, TableCell, arguments);\n    _this4.rootElRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    _this4.state = {\n      dayNumberId: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.a5)()\n    };\n    _this4.handleRootEl = function (el) {\n      (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.Y)(_this4.rootElRef, el);\n      (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.Y)(_this4.props.elRef, el);\n    };\n    return _this4;\n  }\n  _inherits(TableCell, _DateComponent2);\n  return _createClass(TableCell, [{\n    key: \"render\",\n    value: function render() {\n      var context = this.context,\n        props = this.props,\n        state = this.state,\n        rootElRef = this.rootElRef;\n      var options = context.options,\n        dateEnv = context.dateEnv;\n      var date = props.date,\n        dateProfile = props.dateProfile;\n      // TODO: memoize this?\n      var isMonthStart = props.showDayNumber && shouldDisplayMonthStart(date, dateProfile.currentRange, dateEnv);\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cl, {\n        elTag: \"td\",\n        elRef: this.handleRootEl,\n        elClasses: ['fc-daygrid-day'].concat(_toConsumableArray(props.extraClassNames || [])),\n        elAttrs: Object.assign(Object.assign(Object.assign({}, props.extraDataAttrs), props.showDayNumber ? {\n          'aria-labelledby': state.dayNumberId\n        } : {}), {\n          role: 'gridcell'\n        }),\n        defaultGenerator: renderTopInner,\n        date: date,\n        dateProfile: dateProfile,\n        todayRange: props.todayRange,\n        showDayNumber: props.showDayNumber,\n        isMonthStart: isMonthStart,\n        extraRenderProps: props.extraRenderProps\n      }, function (InnerContent, renderProps) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          ref: props.innerElRef,\n          className: \"fc-daygrid-day-frame fc-scrollgrid-sync-inner\",\n          style: {\n            minHeight: props.minHeight\n          }\n        }, props.showWeekNumber && (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cq, {\n          elTag: \"a\",\n          elClasses: ['fc-daygrid-week-number'],\n          elAttrs: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.b0)(context, date, 'week'),\n          date: date,\n          defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n        }), !renderProps.isDisabled && (props.showDayNumber || (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cm)(options) || props.forceDayTop) ? (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-daygrid-day-top\"\n        }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(InnerContent, {\n          elTag: \"a\",\n          elClasses: ['fc-daygrid-day-number', isMonthStart && 'fc-daygrid-month-start'],\n          elAttrs: Object.assign(Object.assign({}, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.b0)(context, date)), {\n            id: state.dayNumberId\n          })\n        })) : props.showDayNumber ?\n        // for creating correct amount of space (see issue #7162)\n        (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-daygrid-day-top\",\n          style: {\n            visibility: 'hidden'\n          }\n        }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"a\", {\n          className: \"fc-daygrid-day-number\"\n        }, \"\\xA0\")) : undefined, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-daygrid-day-events\",\n          ref: props.fgContentElRef\n        }, props.fgContent, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-daygrid-day-bottom\",\n          style: {\n            marginTop: props.moreMarginTop\n          }\n        }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableCellMoreLink, {\n          allDayDate: date,\n          singlePlacements: props.singlePlacements,\n          moreCnt: props.moreCnt,\n          alignmentElRef: rootElRef,\n          alignGridTop: !props.showDayNumber,\n          extraDateSpan: props.extraDateSpan,\n          dateProfile: props.dateProfile,\n          eventSelection: props.eventSelection,\n          eventDrag: props.eventDrag,\n          eventResize: props.eventResize,\n          todayRange: props.todayRange\n        }))), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n          className: \"fc-daygrid-day-bg\"\n        }, props.bgContent));\n      });\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.be);\nfunction renderTopInner(props) {\n  return props.dayNumberText || (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"\\xA0\");\n}\nfunction shouldDisplayMonthStart(date, currentRange, dateEnv) {\n  var currentStart = currentRange.start,\n    currentEnd = currentRange.end;\n  var currentEndIncl = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bg)(currentEnd, -1);\n  var currentFirstYear = dateEnv.getYear(currentStart);\n  var currentFirstMonth = dateEnv.getMonth(currentStart);\n  var currentLastYear = dateEnv.getYear(currentEndIncl);\n  var currentLastMonth = dateEnv.getMonth(currentEndIncl);\n  // spans more than one month?\n  return !(currentFirstYear === currentLastYear && currentFirstMonth === currentLastMonth) && Boolean(\n  // first date in current view?\n  date.valueOf() === currentStart.valueOf() ||\n  // a month-start that's within the current range?\n  dateEnv.getDay(date) === 1 && date.valueOf() < currentEnd.valueOf());\n}\nfunction generateSegKey(seg) {\n  return seg.eventRange.instance.instanceId + ':' + seg.firstCol;\n}\nfunction generateSegUid(seg) {\n  return generateSegKey(seg) + ':' + seg.lastCol;\n}\nfunction computeFgSegPlacement(segs,\n// assumed already sorted\ndayMaxEvents, dayMaxEventRows, strictOrder, segHeights, maxContentHeight, cells) {\n  var hierarchy = new DayGridSegHierarchy(function (segEntry) {\n    // TODO: more DRY with generateSegUid\n    var segUid = segs[segEntry.index].eventRange.instance.instanceId + ':' + segEntry.span.start + ':' + (segEntry.span.end - 1);\n    // if no thickness known, assume 1 (if 0, so small it always fits)\n    return segHeights[segUid] || 1;\n  });\n  hierarchy.allowReslicing = true;\n  hierarchy.strictOrder = strictOrder;\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight;\n    hierarchy.hiddenConsumes = true;\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents;\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows;\n    hierarchy.hiddenConsumes = true;\n  }\n  // create segInputs only for segs with known heights\n  var segInputs = [];\n  var unknownHeightSegs = [];\n  for (var i = 0; i < segs.length; i += 1) {\n    var seg = segs[i];\n    var segUid = generateSegUid(seg);\n    var eventHeight = segHeights[segUid];\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1\n        }\n      });\n    } else {\n      unknownHeightSegs.push(seg);\n    }\n  }\n  var hiddenEntries = hierarchy.addSegs(segInputs);\n  var segRects = hierarchy.toRects();\n  var _placeRects = placeRects(segRects, segs, cells),\n    singleColPlacements = _placeRects.singleColPlacements,\n    multiColPlacements = _placeRects.multiColPlacements,\n    leftoverMargins = _placeRects.leftoverMargins;\n  var moreCnts = [];\n  var moreMarginTops = [];\n  // add segs with unknown heights\n  for (var _i2 = 0, _unknownHeightSegs = unknownHeightSegs; _i2 < _unknownHeightSegs.length; _i2++) {\n    var _seg = _unknownHeightSegs[_i2];\n    multiColPlacements[_seg.firstCol].push({\n      seg: _seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n    for (var col = _seg.firstCol; col <= _seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(_seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  }\n  // add the hidden entries\n  for (var _col = 0; _col < cells.length; _col += 1) {\n    moreCnts.push(0);\n  }\n  var _iterator5 = _createForOfIteratorHelper(hiddenEntries),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var hiddenEntry = _step5.value;\n      var _seg2 = segs[hiddenEntry.index];\n      var hiddenSpan = hiddenEntry.span;\n      multiColPlacements[hiddenSpan.start].push({\n        seg: resliceSeg(_seg2, hiddenSpan.start, hiddenSpan.end, cells),\n        isVisible: false,\n        isAbsolute: true,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n      for (var _col3 = hiddenSpan.start; _col3 < hiddenSpan.end; _col3 += 1) {\n        moreCnts[_col3] += 1;\n        singleColPlacements[_col3].push({\n          seg: resliceSeg(_seg2, _col3, _col3 + 1, cells),\n          isVisible: false,\n          isAbsolute: false,\n          absoluteTop: 0,\n          marginTop: 0\n        });\n      }\n    }\n    // deal with leftover margins\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  for (var _col2 = 0; _col2 < cells.length; _col2 += 1) {\n    moreMarginTops.push(leftoverMargins[_col2]);\n  }\n  return {\n    singleColPlacements: singleColPlacements,\n    multiColPlacements: multiColPlacements,\n    moreCnts: moreCnts,\n    moreMarginTops: moreMarginTops\n  };\n}\n// rects ordered by top coord, then left\nfunction placeRects(allRects, segs, cells) {\n  var rectsByEachCol = groupRectsByEachCol(allRects, cells.length);\n  var singleColPlacements = [];\n  var multiColPlacements = [];\n  var leftoverMargins = [];\n  for (var col = 0; col < cells.length; col += 1) {\n    var rects = rectsByEachCol[col];\n    // compute all static segs in singlePlacements\n    var singlePlacements = [];\n    var currentHeight = 0;\n    var currentMarginTop = 0;\n    var _iterator6 = _createForOfIteratorHelper(rects),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var rect = _step6.value;\n        var seg = segs[rect.index];\n        singlePlacements.push({\n          seg: resliceSeg(seg, col, col + 1, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: rect.levelCoord - currentHeight\n        });\n        currentHeight = rect.levelCoord + rect.thickness;\n      }\n      // compute mixed static/absolute segs in multiPlacements\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n    var multiPlacements = [];\n    currentHeight = 0;\n    currentMarginTop = 0;\n    var _iterator7 = _createForOfIteratorHelper(rects),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var _rect = _step7.value;\n        var _seg3 = segs[_rect.index];\n        var isAbsolute = _rect.span.end - _rect.span.start > 1; // multi-column?\n        var isFirstCol = _rect.span.start === col;\n        currentMarginTop += _rect.levelCoord - currentHeight; // amount of space since bottom of previous seg\n        currentHeight = _rect.levelCoord + _rect.thickness; // height will now be bottom of current seg\n        if (isAbsolute) {\n          currentMarginTop += _rect.thickness;\n          if (isFirstCol) {\n            multiPlacements.push({\n              seg: resliceSeg(_seg3, _rect.span.start, _rect.span.end, cells),\n              isVisible: true,\n              isAbsolute: true,\n              absoluteTop: _rect.levelCoord,\n              marginTop: 0\n            });\n          }\n        } else if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(_seg3, _rect.span.start, _rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: false,\n            absoluteTop: _rect.levelCoord,\n            marginTop: currentMarginTop // claim the margin\n          });\n\n          currentMarginTop = 0;\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n    singleColPlacements.push(singlePlacements);\n    multiColPlacements.push(multiPlacements);\n    leftoverMargins.push(currentMarginTop);\n  }\n  return {\n    singleColPlacements: singleColPlacements,\n    multiColPlacements: multiColPlacements,\n    leftoverMargins: leftoverMargins\n  };\n}\nfunction groupRectsByEachCol(rects, colCnt) {\n  var rectsByEachCol = [];\n  for (var col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([]);\n  }\n  var _iterator8 = _createForOfIteratorHelper(rects),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var rect = _step8.value;\n      for (var _col4 = rect.span.start; _col4 < rect.span.end; _col4 += 1) {\n        rectsByEachCol[_col4].push(rect);\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return rectsByEachCol;\n}\nfunction resliceSeg(seg, spanStart, spanEnd, cells) {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg;\n  }\n  var eventRange = seg.eventRange;\n  var origRange = eventRange.range;\n  var slicedRange = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.o)(origRange, {\n    start: cells[spanStart].date,\n    end: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.t)(cells[spanEnd - 1].date, 1)\n  });\n  return Object.assign(Object.assign({}, seg), {\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: Object.assign(Object.assign({}, eventRange.ui), {\n        durationEditable: false\n      }),\n      instance: eventRange.instance,\n      range: slicedRange\n    },\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()\n  });\n}\nvar DayGridSegHierarchy = /*#__PURE__*/function (_SegHierarchy) {\n  function DayGridSegHierarchy() {\n    var _this5;\n    _classCallCheck(this, DayGridSegHierarchy);\n    _this5 = _callSuper(this, DayGridSegHierarchy, arguments);\n    // config\n    _this5.hiddenConsumes = false;\n    // allows us to keep hidden entries in the hierarchy so they take up space\n    _this5.forceHidden = {};\n    return _this5;\n  }\n  _inherits(DayGridSegHierarchy, _SegHierarchy);\n  return _createClass(DayGridSegHierarchy, [{\n    key: \"addSegs\",\n    value: function addSegs(segInputs) {\n      var _this6 = this;\n      var hiddenSegs = _get(_getPrototypeOf(DayGridSegHierarchy.prototype), \"addSegs\", this).call(this, segInputs);\n      var entriesByLevel = this.entriesByLevel;\n      var excludeHidden = function excludeHidden(entry) {\n        return !_this6.forceHidden[(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bB)(entry)];\n      };\n      // remove the forced-hidden segs\n      for (var level = 0; level < entriesByLevel.length; level += 1) {\n        entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);\n      }\n      return hiddenSegs;\n    }\n  }, {\n    key: \"handleInvalidInsertion\",\n    value: function handleInvalidInsertion(insertion, entry, hiddenEntries) {\n      var entriesByLevel = this.entriesByLevel,\n        forceHidden = this.forceHidden;\n      var touchingEntry = insertion.touchingEntry,\n        touchingLevel = insertion.touchingLevel,\n        touchingLateral = insertion.touchingLateral;\n      // the entry that the new insertion is touching must be hidden\n      if (this.hiddenConsumes && touchingEntry) {\n        var touchingEntryId = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bB)(touchingEntry);\n        if (!forceHidden[touchingEntryId]) {\n          if (this.allowReslicing) {\n            // split up the touchingEntry, reinsert it\n            var hiddenEntry = Object.assign(Object.assign({}, touchingEntry), {\n              span: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bF)(touchingEntry.span, entry.span)\n            });\n            // reinsert the area that turned into a \"more\" link (so no other entries try to\n            // occupy the space) but mark it forced-hidden\n            var hiddenEntryId = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bB)(hiddenEntry);\n            forceHidden[hiddenEntryId] = true;\n            entriesByLevel[touchingLevel][touchingLateral] = hiddenEntry;\n            hiddenEntries.push(hiddenEntry);\n            this.splitEntry(touchingEntry, entry, hiddenEntries);\n          } else {\n            forceHidden[touchingEntryId] = true;\n            hiddenEntries.push(touchingEntry);\n          }\n        }\n      }\n      // will try to reslice...\n      _get(_getPrototypeOf(DayGridSegHierarchy.prototype), \"handleInvalidInsertion\", this).call(this, insertion, entry, hiddenEntries);\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bA);\nvar TableRow = /*#__PURE__*/function (_DateComponent3) {\n  function TableRow() {\n    var _this7;\n    _classCallCheck(this, TableRow);\n    _this7 = _callSuper(this, TableRow, arguments);\n    _this7.cellElRefs = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cf(); // the <td>\n    _this7.frameElRefs = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cf(); // the fc-daygrid-day-frame\n    _this7.fgElRefs = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cf(); // the fc-daygrid-day-events\n    _this7.segHarnessRefs = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cf(); // indexed by \"instanceId:firstCol\"\n    _this7.rootElRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    _this7.state = {\n      framePositions: null,\n      maxContentHeight: null,\n      segHeights: {}\n    };\n    _this7.handleResize = function (isForced) {\n      if (isForced) {\n        _this7.updateSizing(true); // isExternal=true\n      }\n    };\n    return _this7;\n  }\n  _inherits(TableRow, _DateComponent3);\n  return _createClass(TableRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n      var props = this.props,\n        state = this.state,\n        context = this.context;\n      var options = context.options;\n      var colCnt = props.cells.length;\n      var businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);\n      var bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);\n      var highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);\n      var mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);\n      var _computeFgSegPlacemen = computeFgSegPlacement((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bR)(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.segHeights, state.maxContentHeight, props.cells),\n        singleColPlacements = _computeFgSegPlacemen.singleColPlacements,\n        multiColPlacements = _computeFgSegPlacemen.multiColPlacements,\n        moreCnts = _computeFgSegPlacemen.moreCnts,\n        moreMarginTops = _computeFgSegPlacemen.moreMarginTops;\n      var isForcedInvisible =\n      // TODO: messy way to compute this\n      props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"tr\", {\n        ref: this.rootElRef,\n        role: \"row\"\n      }, props.renderIntro && props.renderIntro(), props.cells.map(function (cell, col) {\n        var normalFgNodes = _this8.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);\n        var mirrorFgNodes = _this8.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableCell, {\n          key: cell.key,\n          elRef: _this8.cellElRefs.createRef(cell.key),\n          innerElRef: _this8.frameElRefs.createRef(cell.key) /* FF <td> problem, but okay to use for left/right. TODO: rename prop */,\n          dateProfile: props.dateProfile,\n          date: cell.date,\n          showDayNumber: props.showDayNumbers,\n          showWeekNumber: props.showWeekNumbers && col === 0,\n          forceDayTop: props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */,\n          todayRange: props.todayRange,\n          eventSelection: props.eventSelection,\n          eventDrag: props.eventDrag,\n          eventResize: props.eventResize,\n          extraRenderProps: cell.extraRenderProps,\n          extraDataAttrs: cell.extraDataAttrs,\n          extraClassNames: cell.extraClassNames,\n          extraDateSpan: cell.extraDateSpan,\n          moreCnt: moreCnts[col],\n          moreMarginTop: moreMarginTops[col],\n          singlePlacements: singleColPlacements[col],\n          fgContentElRef: _this8.fgElRefs.createRef(cell.key),\n          fgContent:\n          // Fragment scopes the keys\n          (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, normalFgNodes), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, mirrorFgNodes)),\n          bgContent:\n          // Fragment scopes the keys\n          (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, _this8.renderFillSegs(highlightSegsByCol[col], 'highlight'), _this8.renderFillSegs(businessHoursByCol[col], 'non-business'), _this8.renderFillSegs(bgEventSegsByCol[col], 'bg-event')),\n          minHeight: props.cellMinHeight\n        });\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateSizing(true);\n      this.context.addResizeHandler(this.handleResize);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var currentProps = this.props;\n      this.updateSizing(!(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.E)(prevProps, currentProps));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.removeResizeHandler(this.handleResize);\n    }\n  }, {\n    key: \"getHighlightSegs\",\n    value: function getHighlightSegs() {\n      var props = this.props;\n      if (props.eventDrag && props.eventDrag.segs.length) {\n        // messy check\n        return props.eventDrag.segs;\n      }\n      if (props.eventResize && props.eventResize.segs.length) {\n        // messy check\n        return props.eventResize.segs;\n      }\n      return props.dateSelectionSegs;\n    }\n  }, {\n    key: \"getMirrorSegs\",\n    value: function getMirrorSegs() {\n      var props = this.props;\n      if (props.eventResize && props.eventResize.segs.length) {\n        // messy check\n        return props.eventResize.segs;\n      }\n      return [];\n    }\n  }, {\n    key: \"renderFgSegs\",\n    value: function renderFgSegs(col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {\n      var context = this.context;\n      var eventSelection = this.props.eventSelection;\n      var framePositions = this.state.framePositions;\n      var defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1\n      var isMirror = isDragging || isResizing || isDateSelecting;\n      var nodes = [];\n      if (framePositions) {\n        var _iterator9 = _createForOfIteratorHelper(segPlacements),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var placement = _step9.value;\n            var seg = placement.seg;\n            var instanceId = seg.eventRange.instance.instanceId;\n            var isVisible = placement.isVisible && !isForcedInvisible[instanceId];\n            var isAbsolute = placement.isAbsolute;\n            var left = '';\n            var right = '';\n            if (isAbsolute) {\n              if (context.isRtl) {\n                right = 0;\n                left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];\n              } else {\n                left = 0;\n                right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];\n              }\n            }\n            /*\n            known bug: events that are force to be list-item but span multiple days still take up space in later columns\n            todo: in print view, for multi-day events, don't display title within non-start/end segs\n            */\n            nodes.push((0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n              className: 'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : ''),\n              key: generateSegKey(seg),\n              ref: isMirror ? null : this.segHarnessRefs.createRef(generateSegUid(seg)),\n              style: {\n                visibility: isVisible ? '' : 'hidden',\n                marginTop: isAbsolute ? '' : placement.marginTop,\n                top: isAbsolute ? placement.absoluteTop : '',\n                left: left,\n                right: right\n              }\n            }, hasListItemDisplay(seg) ? (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableListItemEvent, Object.assign({\n              seg: seg,\n              isDragging: isDragging,\n              isSelected: instanceId === eventSelection,\n              defaultDisplayEventEnd: defaultDisplayEventEnd\n            }, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bS)(seg, todayRange))) : (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableBlockEvent, Object.assign({\n              seg: seg,\n              isDragging: isDragging,\n              isResizing: isResizing,\n              isDateSelecting: isDateSelecting,\n              isSelected: instanceId === eventSelection,\n              defaultDisplayEventEnd: defaultDisplayEventEnd\n            }, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bS)(seg, todayRange)))));\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n      return nodes;\n    }\n  }, {\n    key: \"renderFillSegs\",\n    value: function renderFillSegs(segs, fillType) {\n      var isRtl = this.context.isRtl;\n      var todayRange = this.props.todayRange;\n      var framePositions = this.state.framePositions;\n      var nodes = [];\n      if (framePositions) {\n        var _iterator10 = _createForOfIteratorHelper(segs),\n          _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var seg = _step10.value;\n            var leftRightCss = isRtl ? {\n              right: 0,\n              left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n            } : {\n              left: 0,\n              right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n            };\n            nodes.push((0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n              key: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bT)(seg.eventRange),\n              className: \"fc-daygrid-bg-harness\",\n              style: leftRightCss\n            }, fillType === 'bg-event' ? (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cp, Object.assign({\n              seg: seg\n            }, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bS)(seg, todayRange))) : (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.co)(fillType)));\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n      return _fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(void 0, [_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}].concat(nodes));\n    }\n  }, {\n    key: \"updateSizing\",\n    value: function updateSizing(isExternalSizingChange) {\n      var props = this.props,\n        state = this.state,\n        frameElRefs = this.frameElRefs;\n      if (!props.forPrint && props.clientWidth !== null // positioning ready?\n      ) {\n        if (isExternalSizingChange) {\n          var frameEls = props.cells.map(function (cell) {\n            return frameElRefs.currentMap[cell.key];\n          });\n          if (frameEls.length) {\n            var originEl = this.rootElRef.current;\n            var newPositionCache = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.ba(originEl, frameEls, true,\n            // isHorizontal\n            false);\n            if (!state.framePositions || !state.framePositions.similarTo(newPositionCache)) {\n              this.setState({\n                framePositions: new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.ba(originEl, frameEls, true,\n                // isHorizontal\n                false)\n              });\n            }\n          }\n        }\n        var oldSegHeights = this.state.segHeights;\n        var newSegHeights = this.querySegHeights();\n        var limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;\n        this.safeSetState({\n          // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n          // Essentially, once you compute an element's height, never null-out.\n          // TODO: always display all events, as visibility:hidden?\n          segHeights: Object.assign(Object.assign({}, oldSegHeights), newSegHeights),\n          maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null\n        });\n      }\n    }\n  }, {\n    key: \"querySegHeights\",\n    value: function querySegHeights() {\n      var segElMap = this.segHarnessRefs.currentMap;\n      var segHeights = {};\n      // get the max height amongst instance segs\n      for (var segUid in segElMap) {\n        var height = Math.round(segElMap[segUid].getBoundingClientRect().height);\n        segHeights[segUid] = Math.max(segHeights[segUid] || 0, height);\n      }\n      return segHeights;\n    }\n  }, {\n    key: \"computeMaxContentHeight\",\n    value: function computeMaxContentHeight() {\n      var firstKey = this.props.cells[0].key;\n      var cellEl = this.cellElRefs.currentMap[firstKey];\n      var fcContainerEl = this.fgElRefs.currentMap[firstKey];\n      return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;\n    }\n  }, {\n    key: \"getCellEls\",\n    value: function getCellEls() {\n      var elMap = this.cellElRefs.currentMap;\n      return this.props.cells.map(function (cell) {\n        return elMap[cell.key];\n      });\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.be);\nTableRow.addStateEquality({\n  segHeights: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.E\n});\nfunction buildMirrorPlacements(mirrorSegs, colPlacements) {\n  if (!mirrorSegs.length) {\n    return [];\n  }\n  var topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?\n  return mirrorSegs.map(function (seg) {\n    return {\n      seg: seg,\n      isVisible: true,\n      isAbsolute: true,\n      absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n      marginTop: 0\n    };\n  });\n}\nfunction buildAbsoluteTopHash(colPlacements) {\n  var topsByInstanceId = {};\n  var _iterator11 = _createForOfIteratorHelper(colPlacements),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var placements = _step11.value;\n      var _iterator12 = _createForOfIteratorHelper(placements),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var placement = _step12.value;\n          topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n  return topsByInstanceId;\n}\nvar TableRows = /*#__PURE__*/function (_DateComponent4) {\n  function TableRows() {\n    var _this9;\n    _classCallCheck(this, TableRows);\n    _this9 = _callSuper(this, TableRows, arguments);\n    _this9.splitBusinessHourSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.z)(splitSegsByRow);\n    _this9.splitBgEventSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.z)(splitSegsByRow);\n    _this9.splitFgEventSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.z)(splitSegsByRow);\n    _this9.splitDateSelectionSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.z)(splitSegsByRow);\n    _this9.splitEventDrag = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.z)(splitInteractionByRow);\n    _this9.splitEventResize = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.z)(splitInteractionByRow);\n    _this9.rowRefs = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cf();\n    return _this9;\n  }\n  _inherits(TableRows, _DateComponent4);\n  return _createClass(TableRows, [{\n    key: \"render\",\n    value: function render() {\n      var _this10 = this;\n      var props = this.props,\n        context = this.context;\n      var rowCnt = props.cells.length;\n      var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);\n      var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);\n      var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);\n      var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);\n      var eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);\n      var eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);\n      // for DayGrid view with many rows, force a min-height on cells so doesn't appear squished\n      // choose 7 because a month view will have max 6 rows\n      var cellMinHeight = rowCnt >= 7 && props.clientWidth ? props.clientWidth / context.options.aspectRatio / 6 : null;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.ch, {\n        unit: \"day\"\n      }, function (nowDate, todayRange) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.cells.map(function (cells, row) {\n          return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableRow, {\n            ref: _this10.rowRefs.createRef(row),\n            key: cells.length ? cells[0].date.toISOString() /* best? or put key on cell? or use diff formatter? */ : row // in case there are no cells (like when resource view is loading)\n            ,\n            showDayNumbers: rowCnt > 1,\n            showWeekNumbers: props.showWeekNumbers,\n            todayRange: todayRange,\n            dateProfile: props.dateProfile,\n            cells: cells,\n            renderIntro: props.renderRowIntro,\n            businessHourSegs: businessHourSegsByRow[row],\n            eventSelection: props.eventSelection,\n            bgEventSegs: bgEventSegsByRow[row].filter(isSegAllDay) /* hack */,\n            fgEventSegs: fgEventSegsByRow[row],\n            dateSelectionSegs: dateSelectionSegsByRow[row],\n            eventDrag: eventDragByRow[row],\n            eventResize: eventResizeByRow[row],\n            dayMaxEvents: props.dayMaxEvents,\n            dayMaxEventRows: props.dayMaxEventRows,\n            clientWidth: props.clientWidth,\n            clientHeight: props.clientHeight,\n            cellMinHeight: cellMinHeight,\n            forPrint: props.forPrint\n          });\n        }));\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.registerInteractiveComponent();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // for if started with zero cells\n      this.registerInteractiveComponent();\n    }\n  }, {\n    key: \"registerInteractiveComponent\",\n    value: function registerInteractiveComponent() {\n      if (!this.rootEl) {\n        // HACK: need a daygrid wrapper parent to do positioning\n        // NOTE: a daygrid resource view w/o resources can have zero cells\n        var firstCellEl = this.rowRefs.currentMap[0].getCellEls()[0];\n        var rootEl = firstCellEl ? firstCellEl.closest('.fc-daygrid-body') : null;\n        if (rootEl) {\n          this.rootEl = rootEl;\n          this.context.registerInteractiveComponent(this, {\n            el: rootEl,\n            isHitComboAllowed: this.props.isHitComboAllowed\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.rootEl) {\n        this.context.unregisterInteractiveComponent(this);\n        this.rootEl = null;\n      }\n    }\n    // Hit System\n    // ----------------------------------------------------------------------------------------------------\n  }, {\n    key: \"prepareHits\",\n    value: function prepareHits() {\n      this.rowPositions = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.ba(this.rootEl, this.rowRefs.collect().map(function (rowObj) {\n        return rowObj.getCellEls()[0];\n      }),\n      // first cell el in each row. TODO: not optimal\n      false, true);\n      this.colPositions = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.ba(this.rootEl, this.rowRefs.currentMap[0].getCellEls(),\n      // cell els in first row\n      true,\n      // horizontal\n      false);\n    }\n  }, {\n    key: \"queryHit\",\n    value: function queryHit(positionLeft, positionTop) {\n      var colPositions = this.colPositions,\n        rowPositions = this.rowPositions;\n      var col = colPositions.leftToIndex(positionLeft);\n      var row = rowPositions.topToIndex(positionTop);\n      if (row != null && col != null) {\n        var cell = this.props.cells[row][col];\n        return {\n          dateProfile: this.props.dateProfile,\n          dateSpan: Object.assign({\n            range: this.getCellRange(row, col),\n            allDay: true\n          }, cell.extraDateSpan),\n          dayEl: this.getCellEl(row, col),\n          rect: {\n            left: colPositions.lefts[col],\n            right: colPositions.rights[col],\n            top: rowPositions.tops[row],\n            bottom: rowPositions.bottoms[row]\n          },\n          layer: 0\n        };\n      }\n      return null;\n    }\n  }, {\n    key: \"getCellEl\",\n    value: function getCellEl(row, col) {\n      return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal\n    }\n  }, {\n    key: \"getCellRange\",\n    value: function getCellRange(row, col) {\n      var start = this.props.cells[row][col].date;\n      var end = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.t)(start, 1);\n      return {\n        start: start,\n        end: end\n      };\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.be);\nfunction isSegAllDay(seg) {\n  return seg.eventRange.def.allDay;\n}\nvar Table = /*#__PURE__*/function (_DateComponent5) {\n  function Table() {\n    var _this11;\n    _classCallCheck(this, Table);\n    _this11 = _callSuper(this, Table, arguments);\n    _this11.elRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    _this11.needsScrollReset = false;\n    return _this11;\n  }\n  _inherits(Table, _DateComponent5);\n  return _createClass(Table, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var dayMaxEventRows = props.dayMaxEventRows,\n        dayMaxEvents = props.dayMaxEvents,\n        expandRows = props.expandRows;\n      var limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true;\n      // if rows can't expand to fill fixed height, can't do balanced-height event limit\n      // TODO: best place to normalize these options?\n      if (limitViaBalanced && !expandRows) {\n        limitViaBalanced = false;\n        dayMaxEventRows = null;\n        dayMaxEvents = null;\n      }\n      var classNames = ['fc-daygrid-body', limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', expandRows ? '' : 'fc-daygrid-body-natural' // will height of one row depend on the others?\n      ];\n\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n        ref: this.elRef,\n        className: classNames.join(' '),\n        style: {\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth\n        }\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"table\", {\n        role: \"presentation\",\n        className: \"fc-scrollgrid-sync-table\",\n        style: {\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n          height: expandRows ? props.clientHeight : ''\n        }\n      }, props.colGroupNode, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"tbody\", {\n        role: \"presentation\"\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(TableRows, {\n        dateProfile: props.dateProfile,\n        cells: props.cells,\n        renderRowIntro: props.renderRowIntro,\n        showWeekNumbers: props.showWeekNumbers,\n        clientWidth: props.clientWidth,\n        clientHeight: props.clientHeight,\n        businessHourSegs: props.businessHourSegs,\n        bgEventSegs: props.bgEventSegs,\n        fgEventSegs: props.fgEventSegs,\n        dateSelectionSegs: props.dateSelectionSegs,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        dayMaxEvents: dayMaxEvents,\n        dayMaxEventRows: dayMaxEventRows,\n        forPrint: props.forPrint,\n        isHitComboAllowed: props.isHitComboAllowed\n      }))));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.requestScrollReset();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.dateProfile !== this.props.dateProfile) {\n        this.requestScrollReset();\n      } else {\n        this.flushScrollReset();\n      }\n    }\n  }, {\n    key: \"requestScrollReset\",\n    value: function requestScrollReset() {\n      this.needsScrollReset = true;\n      this.flushScrollReset();\n    }\n  }, {\n    key: \"flushScrollReset\",\n    value: function flushScrollReset() {\n      if (this.needsScrollReset && this.props.clientWidth // sizes computed?\n      ) {\n        var subjectEl = getScrollSubjectEl(this.elRef.current, this.props.dateProfile);\n        if (subjectEl) {\n          var originEl = subjectEl.closest('.fc-daygrid-body');\n          var scrollEl = originEl.closest('.fc-scroller');\n          var scrollTop = subjectEl.getBoundingClientRect().top - originEl.getBoundingClientRect().top;\n          scrollEl.scrollTop = scrollTop ? scrollTop + 1 : 0; // overcome border\n        }\n\n        this.needsScrollReset = false;\n      }\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.be);\nfunction getScrollSubjectEl(containerEl, dateProfile) {\n  var el;\n  if (dateProfile.currentRangeUnit.match(/year|month/)) {\n    el = containerEl.querySelector(\"[data-date=\\\"\".concat((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bx)(dateProfile.currentDate), \"-01\\\"]\"));\n    // even if view is month-based, first-of-month might be hidden...\n  }\n\n  if (!el) {\n    el = containerEl.querySelector(\"[data-date=\\\"\".concat((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bv)(dateProfile.currentDate), \"\\\"]\"));\n    // could still be hidden if an interior-view hidden day\n  }\n\n  return el;\n}\nvar DayTableSlicer = /*#__PURE__*/function (_Slicer) {\n  function DayTableSlicer() {\n    var _this12;\n    _classCallCheck(this, DayTableSlicer);\n    _this12 = _callSuper(this, DayTableSlicer, arguments);\n    _this12.forceDayIfListItem = true;\n    return _this12;\n  }\n  _inherits(DayTableSlicer, _Slicer);\n  return _createClass(DayTableSlicer, [{\n    key: \"sliceRange\",\n    value: function sliceRange(dateRange, dayTableModel) {\n      return dayTableModel.sliceRange(dateRange);\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bW);\nvar DayTable = /*#__PURE__*/function (_DateComponent6) {\n  function DayTable() {\n    var _this13;\n    _classCallCheck(this, DayTable);\n    _this13 = _callSuper(this, DayTable, arguments);\n    _this13.slicer = new DayTableSlicer();\n    _this13.tableRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    return _this13;\n  }\n  _inherits(DayTable, _DateComponent6);\n  return _createClass(DayTable, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(Table, Object.assign({\n        ref: this.tableRef\n      }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {\n        dateProfile: props.dateProfile,\n        cells: props.dayTableModel.cells,\n        colGroupNode: props.colGroupNode,\n        tableMinWidth: props.tableMinWidth,\n        renderRowIntro: props.renderRowIntro,\n        dayMaxEvents: props.dayMaxEvents,\n        dayMaxEventRows: props.dayMaxEventRows,\n        showWeekNumbers: props.showWeekNumbers,\n        expandRows: props.expandRows,\n        headerAlignElRef: props.headerAlignElRef,\n        clientWidth: props.clientWidth,\n        clientHeight: props.clientHeight,\n        forPrint: props.forPrint\n      }));\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.be);\nvar DayTableView = /*#__PURE__*/function (_TableView) {\n  function DayTableView() {\n    var _this14;\n    _classCallCheck(this, DayTableView);\n    _this14 = _callSuper(this, DayTableView, arguments);\n    _this14.buildDayTableModel = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.z)(buildDayTableModel);\n    _this14.headerRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    _this14.tableRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    // can't override any lifecycle methods from parent\n    return _this14;\n  }\n  _inherits(DayTableView, _TableView);\n  return _createClass(DayTableView, [{\n    key: \"render\",\n    value: function render() {\n      var _this15 = this;\n      var _this$context = this.context,\n        options = _this$context.options,\n        dateProfileGenerator = _this$context.dateProfileGenerator;\n      var props = this.props;\n      var dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);\n      var headerContent = options.dayHeaders && (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bK, {\n        ref: this.headerRef,\n        dateProfile: props.dateProfile,\n        dates: dayTableModel.headerDates,\n        datesRepDistinctDays: dayTableModel.rowCnt === 1\n      });\n      var bodyContent = function bodyContent(contentArg) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(DayTable, {\n          ref: _this15.tableRef,\n          dateProfile: props.dateProfile,\n          dayTableModel: dayTableModel,\n          businessHours: props.businessHours,\n          dateSelection: props.dateSelection,\n          eventStore: props.eventStore,\n          eventUiBases: props.eventUiBases,\n          eventSelection: props.eventSelection,\n          eventDrag: props.eventDrag,\n          eventResize: props.eventResize,\n          nextDayThreshold: options.nextDayThreshold,\n          colGroupNode: contentArg.tableColGroupNode,\n          tableMinWidth: contentArg.tableMinWidth,\n          dayMaxEvents: options.dayMaxEvents,\n          dayMaxEventRows: options.dayMaxEventRows,\n          showWeekNumbers: options.weekNumbers,\n          expandRows: !props.isHeightAuto,\n          headerAlignElRef: _this15.headerElRef,\n          clientWidth: contentArg.clientWidth,\n          clientHeight: contentArg.clientHeight,\n          forPrint: props.forPrint\n        });\n      };\n      return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);\n    }\n  }]);\n}(TableView);\nfunction buildDayTableModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bO(dateProfile.renderRange, dateProfileGenerator);\n  return new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bV(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n}\nvar TableDateProfileGenerator = /*#__PURE__*/function (_DateProfileGenerator) {\n  function TableDateProfileGenerator() {\n    _classCallCheck(this, TableDateProfileGenerator);\n    return _callSuper(this, TableDateProfileGenerator, arguments);\n  }\n  _inherits(TableDateProfileGenerator, _DateProfileGenerator);\n  return _createClass(TableDateProfileGenerator, [{\n    key: \"buildRenderRange\",\n    value:\n    // Computes the date range that will be rendered\n    function buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay) {\n      var renderRange = _get(_getPrototypeOf(TableDateProfileGenerator.prototype), \"buildRenderRange\", this).call(this, currentRange, currentRangeUnit, isRangeAllDay);\n      var props = this.props;\n      return buildDayTableRenderRange({\n        currentRange: renderRange,\n        snapToWeek: /^(year|month)$/.test(currentRangeUnit),\n        fixedWeekCount: props.fixedWeekCount,\n        dateEnv: props.dateEnv\n      });\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.U);\nfunction buildDayTableRenderRange(props) {\n  var dateEnv = props.dateEnv,\n    currentRange = props.currentRange;\n  var start = currentRange.start,\n    end = currentRange.end;\n  var endOfWeek;\n  // year and month views should be aligned with weeks. this is already done for week\n  if (props.snapToWeek) {\n    start = dateEnv.startOfWeek(start);\n    // make end-of-week if not already\n    endOfWeek = dateEnv.startOfWeek(end);\n    if (endOfWeek.valueOf() !== end.valueOf()) {\n      end = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bh)(endOfWeek, 1);\n    }\n  }\n  // ensure 6 weeks\n  if (props.fixedWeekCount) {\n    // TODO: instead of these date-math gymnastics (for multimonth view),\n    // compute dateprofiles of all months, then use start of first and end of last.\n    var lastMonthRenderStart = dateEnv.startOfWeek(dateEnv.startOfMonth((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.t)(currentRange.end, -1)));\n    var rowCnt = Math.ceil(\n    // could be partial weeks due to hiddenDays\n    (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bi)(lastMonthRenderStart, end));\n    end = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.bh)(end, 6 - rowCnt);\n  }\n  return {\n    start: start,\n    end: end\n  };\n}\nvar css_248z = \":root{--fc-daygrid-event-dot-width:8px}.fc-daygrid-day-events:after,.fc-daygrid-day-events:before,.fc-daygrid-day-frame:after,.fc-daygrid-day-frame:before,.fc-daygrid-event-harness:after,.fc-daygrid-event-harness:before{clear:both;content:\\\"\\\";display:table}.fc .fc-daygrid-body{position:relative;z-index:1}.fc .fc-daygrid-day.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-daygrid-day-frame{min-height:100%;position:relative}.fc .fc-daygrid-day-top{display:flex;flex-direction:row-reverse}.fc .fc-day-other .fc-daygrid-day-top{opacity:.3}.fc .fc-daygrid-day-number{padding:4px;position:relative;z-index:4}.fc .fc-daygrid-month-start{font-size:1.1em;font-weight:700}.fc .fc-daygrid-day-events{margin-top:1px}.fc .fc-daygrid-body-balanced .fc-daygrid-day-events{left:0;position:absolute;right:0}.fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events{min-height:2em;position:relative}.fc .fc-daygrid-body-natural .fc-daygrid-day-events{margin-bottom:1em}.fc .fc-daygrid-event-harness{position:relative}.fc .fc-daygrid-event-harness-abs{left:0;position:absolute;right:0;top:0}.fc .fc-daygrid-bg-harness{bottom:0;position:absolute;top:0}.fc .fc-daygrid-day-bg .fc-non-business{z-index:1}.fc .fc-daygrid-day-bg .fc-bg-event{z-index:2}.fc .fc-daygrid-day-bg .fc-highlight{z-index:3}.fc .fc-daygrid-event{margin-top:1px;z-index:6}.fc .fc-daygrid-event.fc-event-mirror{z-index:7}.fc .fc-daygrid-day-bottom{font-size:.85em;margin:0 2px}.fc .fc-daygrid-day-bottom:after,.fc .fc-daygrid-day-bottom:before{clear:both;content:\\\"\\\";display:table}.fc .fc-daygrid-more-link{border-radius:3px;cursor:pointer;line-height:1;margin-top:1px;max-width:100%;overflow:hidden;padding:2px;position:relative;white-space:nowrap;z-index:4}.fc .fc-daygrid-more-link:hover{background-color:rgba(0,0,0,.1)}.fc .fc-daygrid-week-number{background-color:var(--fc-neutral-bg-color);color:var(--fc-neutral-text-color);min-width:1.5em;padding:2px;position:absolute;text-align:center;top:0;z-index:5}.fc .fc-more-popover .fc-popover-body{min-width:220px;padding:10px}.fc-direction-ltr .fc-daygrid-event.fc-event-start,.fc-direction-rtl .fc-daygrid-event.fc-event-end{margin-left:2px}.fc-direction-ltr .fc-daygrid-event.fc-event-end,.fc-direction-rtl .fc-daygrid-event.fc-event-start{margin-right:2px}.fc-direction-ltr .fc-daygrid-more-link{float:left}.fc-direction-ltr .fc-daygrid-week-number{border-radius:0 0 3px 0;left:0}.fc-direction-rtl .fc-daygrid-more-link{float:right}.fc-direction-rtl .fc-daygrid-week-number{border-radius:0 0 0 3px;right:0}.fc-liquid-hack .fc-daygrid-day-frame{position:static}.fc-daygrid-event{border-radius:3px;font-size:var(--fc-small-font-size);position:relative;white-space:nowrap}.fc-daygrid-block-event .fc-event-time{font-weight:700}.fc-daygrid-block-event .fc-event-time,.fc-daygrid-block-event .fc-event-title{padding:1px}.fc-daygrid-dot-event{align-items:center;display:flex;padding:2px 0}.fc-daygrid-dot-event .fc-event-title{flex-grow:1;flex-shrink:1;font-weight:700;min-width:0;overflow:hidden}.fc-daygrid-dot-event.fc-event-mirror,.fc-daygrid-dot-event:hover{background:rgba(0,0,0,.1)}.fc-daygrid-dot-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-daygrid-event-dot{border:calc(var(--fc-daygrid-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-daygrid-event-dot-width)/2);box-sizing:content-box;height:0;margin:0 4px;width:0}.fc-direction-ltr .fc-daygrid-event .fc-event-time{margin-right:3px}.fc-direction-rtl .fc-daygrid-event .fc-event-time{margin-left:3px}\";\n(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_1__.cw)(css_248z);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fullcalendar/daygrid/internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fullcalendar/interaction/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@fullcalendar/interaction/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Draggable: () => (/* binding */ ExternalDraggable),\n/* harmony export */   ThirdPartyDraggable: () => (/* binding */ ThirdPartyDraggable),\n/* harmony export */   \"default\": () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var _fullcalendar_core_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/core/index.js */ \"(ssr)/./node_modules/@fullcalendar/core/index.js\");\n/* harmony import */ var _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core/internal.js */ \"(ssr)/./node_modules/@fullcalendar/core/internal-common.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bI.touchMouseIgnoreWait = 500;\nvar ignoreMouseDepth = 0;\nvar listenerCnt = 0;\nvar isWindowTouchMoveCancelled = false;\n/*\nUses a \"pointer\" abstraction, which monitors UI events for both mouse and touch.\nTracks when the pointer \"drags\" on a certain element, meaning down+move+up.\n\nAlso, tracks if there was touch-scrolling.\nAlso, can prevent touch-scrolling from happening.\nAlso, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.\n\nemits:\n- pointerdown\n- pointermove\n- pointerup\n*/\nvar PointerDragging = /*#__PURE__*/function () {\n  function PointerDragging(containerEl) {\n    var _this = this;\n    _classCallCheck(this, PointerDragging);\n    this.subjectEl = null;\n    // options that can be directly assigned by caller\n    this.selector = ''; // will cause subjectEl in all emitted events to be this element\n    this.handleSelector = '';\n    this.shouldIgnoreMove = false;\n    this.shouldWatchScroll = true; // for simulating pointermove on scroll\n    // internal states\n    this.isDragging = false;\n    this.isTouchDragging = false;\n    this.wasTouchScroll = false;\n    // Mouse\n    // ----------------------------------------------------------------------------------------------------\n    this.handleMouseDown = function (ev) {\n      if (!_this.shouldIgnoreMouse() && isPrimaryMouseButton(ev) && _this.tryStart(ev)) {\n        var pev = _this.createEventFromMouse(ev, true);\n        _this.emitter.trigger('pointerdown', pev);\n        _this.initScrollWatch(pev);\n        if (!_this.shouldIgnoreMove) {\n          document.addEventListener('mousemove', _this.handleMouseMove);\n        }\n        document.addEventListener('mouseup', _this.handleMouseUp);\n      }\n    };\n    this.handleMouseMove = function (ev) {\n      var pev = _this.createEventFromMouse(ev);\n      _this.recordCoords(pev);\n      _this.emitter.trigger('pointermove', pev);\n    };\n    this.handleMouseUp = function (ev) {\n      document.removeEventListener('mousemove', _this.handleMouseMove);\n      document.removeEventListener('mouseup', _this.handleMouseUp);\n      _this.emitter.trigger('pointerup', _this.createEventFromMouse(ev));\n      _this.cleanup(); // call last so that pointerup has access to props\n    };\n    // Touch\n    // ----------------------------------------------------------------------------------------------------\n    this.handleTouchStart = function (ev) {\n      if (_this.tryStart(ev)) {\n        _this.isTouchDragging = true;\n        var pev = _this.createEventFromTouch(ev, true);\n        _this.emitter.trigger('pointerdown', pev);\n        _this.initScrollWatch(pev);\n        // unlike mouse, need to attach to target, not document\n        // https://stackoverflow.com/a/45760014\n        var targetEl = ev.target;\n        if (!_this.shouldIgnoreMove) {\n          targetEl.addEventListener('touchmove', _this.handleTouchMove);\n        }\n        targetEl.addEventListener('touchend', _this.handleTouchEnd);\n        targetEl.addEventListener('touchcancel', _this.handleTouchEnd); // treat it as a touch end\n        // attach a handler to get called when ANY scroll action happens on the page.\n        // this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n        // http://stackoverflow.com/a/32954565/96342\n        window.addEventListener('scroll', _this.handleTouchScroll, true);\n      }\n    };\n    this.handleTouchMove = function (ev) {\n      var pev = _this.createEventFromTouch(ev);\n      _this.recordCoords(pev);\n      _this.emitter.trigger('pointermove', pev);\n    };\n    this.handleTouchEnd = function (ev) {\n      if (_this.isDragging) {\n        // done to guard against touchend followed by touchcancel\n        var targetEl = ev.target;\n        targetEl.removeEventListener('touchmove', _this.handleTouchMove);\n        targetEl.removeEventListener('touchend', _this.handleTouchEnd);\n        targetEl.removeEventListener('touchcancel', _this.handleTouchEnd);\n        window.removeEventListener('scroll', _this.handleTouchScroll, true); // useCaptured=true\n        _this.emitter.trigger('pointerup', _this.createEventFromTouch(ev));\n        _this.cleanup(); // call last so that pointerup has access to props\n        _this.isTouchDragging = false;\n        startIgnoringMouse();\n      }\n    };\n    this.handleTouchScroll = function () {\n      _this.wasTouchScroll = true;\n    };\n    this.handleScroll = function (ev) {\n      if (!_this.shouldIgnoreMove) {\n        var pageX = window.scrollX - _this.prevScrollX + _this.prevPageX;\n        var pageY = window.scrollY - _this.prevScrollY + _this.prevPageY;\n        _this.emitter.trigger('pointermove', {\n          origEvent: ev,\n          isTouch: _this.isTouchDragging,\n          subjectEl: _this.subjectEl,\n          pageX: pageX,\n          pageY: pageY,\n          deltaX: pageX - _this.origPageX,\n          deltaY: pageY - _this.origPageY\n        });\n      }\n    };\n    this.containerEl = containerEl;\n    this.emitter = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.F();\n    containerEl.addEventListener('mousedown', this.handleMouseDown);\n    containerEl.addEventListener('touchstart', this.handleTouchStart, {\n      passive: true\n    });\n    listenerCreated();\n  }\n  return _createClass(PointerDragging, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.containerEl.removeEventListener('mousedown', this.handleMouseDown);\n      this.containerEl.removeEventListener('touchstart', this.handleTouchStart, {\n        passive: true\n      });\n      listenerDestroyed();\n    }\n  }, {\n    key: \"tryStart\",\n    value: function tryStart(ev) {\n      var subjectEl = this.querySubjectEl(ev);\n      var downEl = ev.target;\n      if (subjectEl && (!this.handleSelector || (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.$)(downEl, this.handleSelector))) {\n        this.subjectEl = subjectEl;\n        this.isDragging = true; // do this first so cancelTouchScroll will work\n        this.wasTouchScroll = false;\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      isWindowTouchMoveCancelled = false;\n      this.isDragging = false;\n      this.subjectEl = null;\n      // keep wasTouchScroll around for later access\n      this.destroyScrollWatch();\n    }\n  }, {\n    key: \"querySubjectEl\",\n    value: function querySubjectEl(ev) {\n      if (this.selector) {\n        return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.$)(ev.target, this.selector);\n      }\n      return this.containerEl;\n    }\n  }, {\n    key: \"shouldIgnoreMouse\",\n    value: function shouldIgnoreMouse() {\n      return ignoreMouseDepth || this.isTouchDragging;\n    }\n    // can be called by user of this class, to cancel touch-based scrolling for the current drag\n  }, {\n    key: \"cancelTouchScroll\",\n    value: function cancelTouchScroll() {\n      if (this.isDragging) {\n        isWindowTouchMoveCancelled = true;\n      }\n    }\n    // Scrolling that simulates pointermoves\n    // ----------------------------------------------------------------------------------------------------\n  }, {\n    key: \"initScrollWatch\",\n    value: function initScrollWatch(ev) {\n      if (this.shouldWatchScroll) {\n        this.recordCoords(ev);\n        window.addEventListener('scroll', this.handleScroll, true); // useCapture=true\n      }\n    }\n  }, {\n    key: \"recordCoords\",\n    value: function recordCoords(ev) {\n      if (this.shouldWatchScroll) {\n        this.prevPageX = ev.pageX;\n        this.prevPageY = ev.pageY;\n        this.prevScrollX = window.scrollX;\n        this.prevScrollY = window.scrollY;\n      }\n    }\n  }, {\n    key: \"destroyScrollWatch\",\n    value: function destroyScrollWatch() {\n      if (this.shouldWatchScroll) {\n        window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true\n      }\n    }\n    // Event Normalization\n    // ----------------------------------------------------------------------------------------------------\n  }, {\n    key: \"createEventFromMouse\",\n    value: function createEventFromMouse(ev, isFirst) {\n      var deltaX = 0;\n      var deltaY = 0;\n      // TODO: repeat code\n      if (isFirst) {\n        this.origPageX = ev.pageX;\n        this.origPageY = ev.pageY;\n      } else {\n        deltaX = ev.pageX - this.origPageX;\n        deltaY = ev.pageY - this.origPageY;\n      }\n      return {\n        origEvent: ev,\n        isTouch: false,\n        subjectEl: this.subjectEl,\n        pageX: ev.pageX,\n        pageY: ev.pageY,\n        deltaX: deltaX,\n        deltaY: deltaY\n      };\n    }\n  }, {\n    key: \"createEventFromTouch\",\n    value: function createEventFromTouch(ev, isFirst) {\n      var touches = ev.touches;\n      var pageX;\n      var pageY;\n      var deltaX = 0;\n      var deltaY = 0;\n      // if touch coords available, prefer,\n      // because FF would give bad ev.pageX ev.pageY\n      if (touches && touches.length) {\n        pageX = touches[0].pageX;\n        pageY = touches[0].pageY;\n      } else {\n        pageX = ev.pageX;\n        pageY = ev.pageY;\n      }\n      // TODO: repeat code\n      if (isFirst) {\n        this.origPageX = pageX;\n        this.origPageY = pageY;\n      } else {\n        deltaX = pageX - this.origPageX;\n        deltaY = pageY - this.origPageY;\n      }\n      return {\n        origEvent: ev,\n        isTouch: true,\n        subjectEl: this.subjectEl,\n        pageX: pageX,\n        pageY: pageY,\n        deltaX: deltaX,\n        deltaY: deltaY\n      };\n    }\n  }]);\n}(); // Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\nfunction isPrimaryMouseButton(ev) {\n  return ev.button === 0 && !ev.ctrlKey;\n}\n// Ignoring fake mouse events generated by touch\n// ----------------------------------------------------------------------------------------------------\nfunction startIgnoringMouse() {\n  ignoreMouseDepth += 1;\n  setTimeout(function () {\n    ignoreMouseDepth -= 1;\n  }, _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bI.touchMouseIgnoreWait);\n}\n// We want to attach touchmove as early as possible for Safari\n// ----------------------------------------------------------------------------------------------------\nfunction listenerCreated() {\n  listenerCnt += 1;\n  if (listenerCnt === 1) {\n    window.addEventListener('touchmove', onWindowTouchMove, {\n      passive: false\n    });\n  }\n}\nfunction listenerDestroyed() {\n  listenerCnt -= 1;\n  if (!listenerCnt) {\n    window.removeEventListener('touchmove', onWindowTouchMove, {\n      passive: false\n    });\n  }\n}\nfunction onWindowTouchMove(ev) {\n  if (isWindowTouchMoveCancelled) {\n    ev.preventDefault();\n  }\n}\n\n/*\nAn effect in which an element follows the movement of a pointer across the screen.\nThe moving element is a clone of some other element.\nMust call start + handleMove + stop.\n*/\nvar ElementMirror = /*#__PURE__*/function () {\n  function ElementMirror() {\n    _classCallCheck(this, ElementMirror);\n    this.isVisible = false; // must be explicitly enabled\n    this.sourceEl = null;\n    this.mirrorEl = null;\n    this.sourceElRect = null; // screen coords relative to viewport\n    // options that can be set directly by caller\n    this.parentNode = document.body; // HIGHLY SUGGESTED to set this to sidestep ShadowDOM issues\n    this.zIndex = 9999;\n    this.revertDuration = 0;\n  }\n  return _createClass(ElementMirror, [{\n    key: \"start\",\n    value: function start(sourceEl, pageX, pageY) {\n      this.sourceEl = sourceEl;\n      this.sourceElRect = this.sourceEl.getBoundingClientRect();\n      this.origScreenX = pageX - window.scrollX;\n      this.origScreenY = pageY - window.scrollY;\n      this.deltaX = 0;\n      this.deltaY = 0;\n      this.updateElPosition();\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(pageX, pageY) {\n      this.deltaX = pageX - window.scrollX - this.origScreenX;\n      this.deltaY = pageY - window.scrollY - this.origScreenY;\n      this.updateElPosition();\n    }\n    // can be called before start\n  }, {\n    key: \"setIsVisible\",\n    value: function setIsVisible(bool) {\n      if (bool) {\n        if (!this.isVisible) {\n          if (this.mirrorEl) {\n            this.mirrorEl.style.display = '';\n          }\n          this.isVisible = bool; // needs to happen before updateElPosition\n          this.updateElPosition(); // because was not updating the position while invisible\n        }\n      } else if (this.isVisible) {\n        if (this.mirrorEl) {\n          this.mirrorEl.style.display = 'none';\n        }\n        this.isVisible = bool;\n      }\n    }\n    // always async\n  }, {\n    key: \"stop\",\n    value: function stop(needsRevertAnimation, callback) {\n      var _this2 = this;\n      var done = function done() {\n        _this2.cleanup();\n        callback();\n      };\n      if (needsRevertAnimation && this.mirrorEl && this.isVisible && this.revertDuration && (\n      // if 0, transition won't work\n      this.deltaX || this.deltaY) // if same coords, transition won't work\n      ) {\n        this.doRevertAnimation(done, this.revertDuration);\n      } else {\n        setTimeout(done, 0);\n      }\n    }\n  }, {\n    key: \"doRevertAnimation\",\n    value: function doRevertAnimation(callback, revertDuration) {\n      var mirrorEl = this.mirrorEl;\n      var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened\n      mirrorEl.style.transition = 'top ' + revertDuration + 'ms,' + 'left ' + revertDuration + 'ms';\n      (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aP)(mirrorEl, {\n        left: finalSourceElRect.left,\n        top: finalSourceElRect.top\n      });\n      (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b2)(mirrorEl, function () {\n        mirrorEl.style.transition = '';\n        callback();\n      });\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      if (this.mirrorEl) {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aO)(this.mirrorEl);\n        this.mirrorEl = null;\n      }\n      this.sourceEl = null;\n    }\n  }, {\n    key: \"updateElPosition\",\n    value: function updateElPosition() {\n      if (this.sourceEl && this.isVisible) {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aP)(this.getMirrorEl(), {\n          left: this.sourceElRect.left + this.deltaX,\n          top: this.sourceElRect.top + this.deltaY\n        });\n      }\n    }\n  }, {\n    key: \"getMirrorEl\",\n    value: function getMirrorEl() {\n      var sourceElRect = this.sourceElRect;\n      var mirrorEl = this.mirrorEl;\n      if (!mirrorEl) {\n        mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true\n        // we don't want long taps or any mouse interaction causing selection/menus.\n        // would use preventSelection(), but that prevents selectstart, causing problems.\n        mirrorEl.style.userSelect = 'none';\n        mirrorEl.style.webkitUserSelect = 'none';\n        mirrorEl.style.pointerEvents = 'none';\n        mirrorEl.classList.add('fc-event-dragging');\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aP)(mirrorEl, {\n          position: 'fixed',\n          zIndex: this.zIndex,\n          visibility: '',\n          boxSizing: 'border-box',\n          width: sourceElRect.right - sourceElRect.left,\n          height: sourceElRect.bottom - sourceElRect.top,\n          right: 'auto',\n          bottom: 'auto',\n          margin: 0\n        });\n        this.parentNode.appendChild(mirrorEl);\n      }\n      return mirrorEl;\n    }\n  }]);\n}();\n/*\nIs a cache for a given element's scroll information (all the info that ScrollController stores)\nin addition the \"client rectangle\" of the element.. the area within the scrollbars.\n\nThe cache can be in one of two modes:\n- doesListening:false - ignores when the container is scrolled by someone else\n- doesListening:true - watch for scrolling and update the cache\n*/\nvar ScrollGeomCache = /*#__PURE__*/function (_ScrollController) {\n  function ScrollGeomCache(scrollController, doesListening) {\n    var _this3;\n    _classCallCheck(this, ScrollGeomCache);\n    _this3 = _callSuper(this, ScrollGeomCache);\n    _this3.handleScroll = function () {\n      _this3.scrollTop = _this3.scrollController.getScrollTop();\n      _this3.scrollLeft = _this3.scrollController.getScrollLeft();\n      _this3.handleScrollChange();\n    };\n    _this3.scrollController = scrollController;\n    _this3.doesListening = doesListening;\n    _this3.scrollTop = _this3.origScrollTop = scrollController.getScrollTop();\n    _this3.scrollLeft = _this3.origScrollLeft = scrollController.getScrollLeft();\n    _this3.scrollWidth = scrollController.getScrollWidth();\n    _this3.scrollHeight = scrollController.getScrollHeight();\n    _this3.clientWidth = scrollController.getClientWidth();\n    _this3.clientHeight = scrollController.getClientHeight();\n    _this3.clientRect = _this3.computeClientRect(); // do last in case it needs cached values\n    if (_this3.doesListening) {\n      _this3.getEventTarget().addEventListener('scroll', _this3.handleScroll);\n    }\n    return _this3;\n  }\n  _inherits(ScrollGeomCache, _ScrollController);\n  return _createClass(ScrollGeomCache, [{\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.doesListening) {\n        this.getEventTarget().removeEventListener('scroll', this.handleScroll);\n      }\n    }\n  }, {\n    key: \"getScrollTop\",\n    value: function getScrollTop() {\n      return this.scrollTop;\n    }\n  }, {\n    key: \"getScrollLeft\",\n    value: function getScrollLeft() {\n      return this.scrollLeft;\n    }\n  }, {\n    key: \"setScrollTop\",\n    value: function setScrollTop(top) {\n      this.scrollController.setScrollTop(top);\n      if (!this.doesListening) {\n        // we are not relying on the element to normalize out-of-bounds scroll values\n        // so we need to sanitize ourselves\n        this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);\n        this.handleScrollChange();\n      }\n    }\n  }, {\n    key: \"setScrollLeft\",\n    value: function setScrollLeft(top) {\n      this.scrollController.setScrollLeft(top);\n      if (!this.doesListening) {\n        // we are not relying on the element to normalize out-of-bounds scroll values\n        // so we need to sanitize ourselves\n        this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);\n        this.handleScrollChange();\n      }\n    }\n  }, {\n    key: \"getClientWidth\",\n    value: function getClientWidth() {\n      return this.clientWidth;\n    }\n  }, {\n    key: \"getClientHeight\",\n    value: function getClientHeight() {\n      return this.clientHeight;\n    }\n  }, {\n    key: \"getScrollWidth\",\n    value: function getScrollWidth() {\n      return this.scrollWidth;\n    }\n  }, {\n    key: \"getScrollHeight\",\n    value: function getScrollHeight() {\n      return this.scrollHeight;\n    }\n  }, {\n    key: \"handleScrollChange\",\n    value: function handleScrollChange() {}\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bb);\nvar ElementScrollGeomCache = /*#__PURE__*/function (_ScrollGeomCache) {\n  function ElementScrollGeomCache(el, doesListening) {\n    _classCallCheck(this, ElementScrollGeomCache);\n    return _callSuper(this, ElementScrollGeomCache, [new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bc(el), doesListening]);\n  }\n  _inherits(ElementScrollGeomCache, _ScrollGeomCache);\n  return _createClass(ElementScrollGeomCache, [{\n    key: \"getEventTarget\",\n    value: function getEventTarget() {\n      return this.scrollController.el;\n    }\n  }, {\n    key: \"computeClientRect\",\n    value: function computeClientRect() {\n      return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b3)(this.scrollController.el);\n    }\n  }]);\n}(ScrollGeomCache);\nvar WindowScrollGeomCache = /*#__PURE__*/function (_ScrollGeomCache2) {\n  function WindowScrollGeomCache(doesListening) {\n    _classCallCheck(this, WindowScrollGeomCache);\n    return _callSuper(this, WindowScrollGeomCache, [new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bd(), doesListening]);\n  }\n  _inherits(WindowScrollGeomCache, _ScrollGeomCache2);\n  return _createClass(WindowScrollGeomCache, [{\n    key: \"getEventTarget\",\n    value: function getEventTarget() {\n      return window;\n    }\n  }, {\n    key: \"computeClientRect\",\n    value: function computeClientRect() {\n      return {\n        left: this.scrollLeft,\n        right: this.scrollLeft + this.clientWidth,\n        top: this.scrollTop,\n        bottom: this.scrollTop + this.clientHeight\n      };\n    }\n    // the window is the only scroll object that changes it's rectangle relative\n    // to the document's topleft as it scrolls\n  }, {\n    key: \"handleScrollChange\",\n    value: function handleScrollChange() {\n      this.clientRect = this.computeClientRect();\n    }\n  }]);\n}(ScrollGeomCache); // If available we are using native \"performance\" API instead of \"Date\"\n// Read more about it on MDN:\n// https://developer.mozilla.org/en-US/docs/Web/API/Performance\nvar getTime = typeof performance === 'function' ? performance.now : Date.now;\n/*\nFor a pointer interaction, automatically scrolls certain scroll containers when the pointer\napproaches the edge.\n\nThe caller must call start + handleMove + stop.\n*/\nvar AutoScroller = /*#__PURE__*/function () {\n  function AutoScroller() {\n    var _this4 = this;\n    _classCallCheck(this, AutoScroller);\n    // options that can be set by caller\n    this.isEnabled = true;\n    this.scrollQuery = [window, '.fc-scroller'];\n    this.edgeThreshold = 50; // pixels\n    this.maxVelocity = 300; // pixels per second\n    // internal state\n    this.pointerScreenX = null;\n    this.pointerScreenY = null;\n    this.isAnimating = false;\n    this.scrollCaches = null;\n    // protect against the initial pointerdown being too close to an edge and starting the scroll\n    this.everMovedUp = false;\n    this.everMovedDown = false;\n    this.everMovedLeft = false;\n    this.everMovedRight = false;\n    this.animate = function () {\n      if (_this4.isAnimating) {\n        // wasn't cancelled between animation calls\n        var edge = _this4.computeBestEdge(_this4.pointerScreenX + window.scrollX, _this4.pointerScreenY + window.scrollY);\n        if (edge) {\n          var now = getTime();\n          _this4.handleSide(edge, (now - _this4.msSinceRequest) / 1000);\n          _this4.requestAnimation(now);\n        } else {\n          _this4.isAnimating = false; // will stop animation\n        }\n      }\n    };\n  }\n  return _createClass(AutoScroller, [{\n    key: \"start\",\n    value: function start(pageX, pageY, scrollStartEl) {\n      if (this.isEnabled) {\n        this.scrollCaches = this.buildCaches(scrollStartEl);\n        this.pointerScreenX = null;\n        this.pointerScreenY = null;\n        this.everMovedUp = false;\n        this.everMovedDown = false;\n        this.everMovedLeft = false;\n        this.everMovedRight = false;\n        this.handleMove(pageX, pageY);\n      }\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(pageX, pageY) {\n      if (this.isEnabled) {\n        var pointerScreenX = pageX - window.scrollX;\n        var pointerScreenY = pageY - window.scrollY;\n        var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;\n        var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;\n        if (yDelta < 0) {\n          this.everMovedUp = true;\n        } else if (yDelta > 0) {\n          this.everMovedDown = true;\n        }\n        if (xDelta < 0) {\n          this.everMovedLeft = true;\n        } else if (xDelta > 0) {\n          this.everMovedRight = true;\n        }\n        this.pointerScreenX = pointerScreenX;\n        this.pointerScreenY = pointerScreenY;\n        if (!this.isAnimating) {\n          this.isAnimating = true;\n          this.requestAnimation(getTime());\n        }\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.isEnabled) {\n        this.isAnimating = false; // will stop animation\n        var _iterator = _createForOfIteratorHelper(this.scrollCaches),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var scrollCache = _step.value;\n            scrollCache.destroy();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        this.scrollCaches = null;\n      }\n    }\n  }, {\n    key: \"requestAnimation\",\n    value: function requestAnimation(now) {\n      this.msSinceRequest = now;\n      requestAnimationFrame(this.animate);\n    }\n  }, {\n    key: \"handleSide\",\n    value: function handleSide(edge, seconds) {\n      var scrollCache = edge.scrollCache;\n      var edgeThreshold = this.edgeThreshold;\n      var invDistance = edgeThreshold - edge.distance;\n      var velocity =\n      // the closer to the edge, the faster we scroll\n      invDistance * invDistance / (edgeThreshold * edgeThreshold) *\n      // quadratic\n      this.maxVelocity * seconds;\n      var sign = 1;\n      switch (edge.name) {\n        case 'left':\n          sign = -1;\n        // falls through\n        case 'right':\n          scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);\n          break;\n        case 'top':\n          sign = -1;\n        // falls through\n        case 'bottom':\n          scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);\n          break;\n      }\n    }\n    // left/top are relative to document topleft\n  }, {\n    key: \"computeBestEdge\",\n    value: function computeBestEdge(left, top) {\n      var edgeThreshold = this.edgeThreshold;\n      var bestSide = null;\n      var scrollCaches = this.scrollCaches || [];\n      var _iterator2 = _createForOfIteratorHelper(scrollCaches),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var scrollCache = _step2.value;\n          var rect = scrollCache.clientRect;\n          var leftDist = left - rect.left;\n          var rightDist = rect.right - left;\n          var topDist = top - rect.top;\n          var bottomDist = rect.bottom - top;\n          // completely within the rect?\n          if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {\n            if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() && (!bestSide || bestSide.distance > topDist)) {\n              bestSide = {\n                scrollCache: scrollCache,\n                name: 'top',\n                distance: topDist\n              };\n            }\n            if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() && (!bestSide || bestSide.distance > bottomDist)) {\n              bestSide = {\n                scrollCache: scrollCache,\n                name: 'bottom',\n                distance: bottomDist\n              };\n            }\n            /*\n            TODO: fix broken RTL scrolling. canScrollLeft always returning false\n            https://github.com/fullcalendar/fullcalendar/issues/4837\n            */\n            if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() && (!bestSide || bestSide.distance > leftDist)) {\n              bestSide = {\n                scrollCache: scrollCache,\n                name: 'left',\n                distance: leftDist\n              };\n            }\n            if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() && (!bestSide || bestSide.distance > rightDist)) {\n              bestSide = {\n                scrollCache: scrollCache,\n                name: 'right',\n                distance: rightDist\n              };\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return bestSide;\n    }\n  }, {\n    key: \"buildCaches\",\n    value: function buildCaches(scrollStartEl) {\n      return this.queryScrollEls(scrollStartEl).map(function (el) {\n        if (el === window) {\n          return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls\n        }\n\n        return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls\n      });\n    }\n  }, {\n    key: \"queryScrollEls\",\n    value: function queryScrollEls(scrollStartEl) {\n      var els = [];\n      var _iterator3 = _createForOfIteratorHelper(this.scrollQuery),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var query = _step3.value;\n          if (_typeof(query) === 'object') {\n            els.push(query);\n          } else {\n            /*\n            TODO: in the future, always have auto-scroll happen on element where current Hit came from\n            Ticket: https://github.com/fullcalendar/fullcalendar/issues/4593\n            */\n            els.push.apply(els, _toConsumableArray(Array.prototype.slice.call(scrollStartEl.getRootNode().querySelectorAll(query))));\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return els;\n    }\n  }]);\n}();\n/*\nMonitors dragging on an element. Has a number of high-level features:\n- minimum distance required before dragging\n- minimum wait time (\"delay\") before dragging\n- a mirror element that follows the pointer\n*/\nvar FeaturefulElementDragging = /*#__PURE__*/function (_ElementDragging) {\n  function FeaturefulElementDragging(containerEl, selector) {\n    var _this5;\n    _classCallCheck(this, FeaturefulElementDragging);\n    _this5 = _callSuper(this, FeaturefulElementDragging, [containerEl]);\n    _this5.containerEl = containerEl;\n    // options that can be directly set by caller\n    // the caller can also set the PointerDragging's options as well\n    _this5.delay = null;\n    _this5.minDistance = 0;\n    _this5.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag\n    _this5.mirrorNeedsRevert = false;\n    _this5.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup\n    _this5.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation\n    _this5.isDelayEnded = false;\n    _this5.isDistanceSurpassed = false;\n    _this5.delayTimeoutId = null;\n    _this5.onPointerDown = function (ev) {\n      if (!_this5.isDragging) {\n        // so new drag doesn't happen while revert animation is going\n        _this5.isInteracting = true;\n        _this5.isDelayEnded = false;\n        _this5.isDistanceSurpassed = false;\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ar)(document.body);\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.at)(document.body);\n        // prevent links from being visited if there's an eventual drag.\n        // also prevents selection in older browsers (maybe?).\n        // not necessary for touch, besides, browser would complain about passiveness.\n        if (!ev.isTouch) {\n          ev.origEvent.preventDefault();\n        }\n        _this5.emitter.trigger('pointerdown', ev);\n        if (_this5.isInteracting &&\n        // not destroyed via pointerdown handler\n        !_this5.pointer.shouldIgnoreMove) {\n          // actions related to initiating dragstart+dragmove+dragend...\n          _this5.mirror.setIsVisible(false); // reset. caller must set-visible\n          _this5.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down\n          _this5.startDelay(ev);\n          if (!_this5.minDistance) {\n            _this5.handleDistanceSurpassed(ev);\n          }\n        }\n      }\n    };\n    _this5.onPointerMove = function (ev) {\n      if (_this5.isInteracting) {\n        _this5.emitter.trigger('pointermove', ev);\n        if (!_this5.isDistanceSurpassed) {\n          var minDistance = _this5.minDistance;\n          var distanceSq; // current distance from the origin, squared\n          var deltaX = ev.deltaX,\n            deltaY = ev.deltaY;\n          distanceSq = deltaX * deltaX + deltaY * deltaY;\n          if (distanceSq >= minDistance * minDistance) {\n            // use pythagorean theorem\n            _this5.handleDistanceSurpassed(ev);\n          }\n        }\n        if (_this5.isDragging) {\n          // a real pointer move? (not one simulated by scrolling)\n          if (ev.origEvent.type !== 'scroll') {\n            _this5.mirror.handleMove(ev.pageX, ev.pageY);\n            _this5.autoScroller.handleMove(ev.pageX, ev.pageY);\n          }\n          _this5.emitter.trigger('dragmove', ev);\n        }\n      }\n    };\n    _this5.onPointerUp = function (ev) {\n      if (_this5.isInteracting) {\n        _this5.isInteracting = false;\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.as)(document.body);\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.au)(document.body);\n        _this5.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert\n        if (_this5.isDragging) {\n          _this5.autoScroller.stop();\n          _this5.tryStopDrag(ev); // which will stop the mirror\n        }\n\n        if (_this5.delayTimeoutId) {\n          clearTimeout(_this5.delayTimeoutId);\n          _this5.delayTimeoutId = null;\n        }\n      }\n    };\n    var pointer = _this5.pointer = new PointerDragging(containerEl);\n    pointer.emitter.on('pointerdown', _this5.onPointerDown);\n    pointer.emitter.on('pointermove', _this5.onPointerMove);\n    pointer.emitter.on('pointerup', _this5.onPointerUp);\n    if (selector) {\n      pointer.selector = selector;\n    }\n    _this5.mirror = new ElementMirror();\n    _this5.autoScroller = new AutoScroller();\n    return _this5;\n  }\n  _inherits(FeaturefulElementDragging, _ElementDragging);\n  return _createClass(FeaturefulElementDragging, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.pointer.destroy();\n      // HACK: simulate a pointer-up to end the current drag\n      // TODO: fire 'dragend' directly and stop interaction. discourage use of pointerup event (b/c might not fire)\n      this.onPointerUp({});\n    }\n  }, {\n    key: \"startDelay\",\n    value: function startDelay(ev) {\n      var _this6 = this;\n      if (typeof this.delay === 'number') {\n        this.delayTimeoutId = setTimeout(function () {\n          _this6.delayTimeoutId = null;\n          _this6.handleDelayEnd(ev);\n        }, this.delay); // not assignable to number!\n      } else {\n        this.handleDelayEnd(ev);\n      }\n    }\n  }, {\n    key: \"handleDelayEnd\",\n    value: function handleDelayEnd(ev) {\n      this.isDelayEnded = true;\n      this.tryStartDrag(ev);\n    }\n  }, {\n    key: \"handleDistanceSurpassed\",\n    value: function handleDistanceSurpassed(ev) {\n      this.isDistanceSurpassed = true;\n      this.tryStartDrag(ev);\n    }\n  }, {\n    key: \"tryStartDrag\",\n    value: function tryStartDrag(ev) {\n      if (this.isDelayEnded && this.isDistanceSurpassed) {\n        if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {\n          this.isDragging = true;\n          this.mirrorNeedsRevert = false;\n          this.autoScroller.start(ev.pageX, ev.pageY, this.containerEl);\n          this.emitter.trigger('dragstart', ev);\n          if (this.touchScrollAllowed === false) {\n            this.pointer.cancelTouchScroll();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"tryStopDrag\",\n    value: function tryStopDrag(ev) {\n      // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events\n      // that come from the document to fire beforehand. much more convenient this way.\n      this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev));\n    }\n  }, {\n    key: \"stopDrag\",\n    value: function stopDrag(ev) {\n      this.isDragging = false;\n      this.emitter.trigger('dragend', ev);\n    }\n    // fill in the implementations...\n  }, {\n    key: \"setIgnoreMove\",\n    value: function setIgnoreMove(bool) {\n      this.pointer.shouldIgnoreMove = bool;\n    }\n  }, {\n    key: \"setMirrorIsVisible\",\n    value: function setMirrorIsVisible(bool) {\n      this.mirror.setIsVisible(bool);\n    }\n  }, {\n    key: \"setMirrorNeedsRevert\",\n    value: function setMirrorNeedsRevert(bool) {\n      this.mirrorNeedsRevert = bool;\n    }\n  }, {\n    key: \"setAutoScrollEnabled\",\n    value: function setAutoScrollEnabled(bool) {\n      this.autoScroller.isEnabled = bool;\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bH);\n/*\nWhen this class is instantiated, it records the offset of an element (relative to the document topleft),\nand continues to monitor scrolling, updating the cached coordinates if it needs to.\nDoes not access the DOM after instantiation, so highly performant.\n\nAlso keeps track of all scrolling/overflow:hidden containers that are parents of the given element\nand an determine if a given point is inside the combined clipping rectangle.\n*/\nvar OffsetTracker = /*#__PURE__*/function () {\n  function OffsetTracker(el) {\n    _classCallCheck(this, OffsetTracker);\n    this.el = el;\n    this.origRect = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b6)(el);\n    // will work fine for divs that have overflow:hidden\n    this.scrollCaches = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b5)(el).map(function (scrollEl) {\n      return new ElementScrollGeomCache(scrollEl, true);\n    });\n  }\n  return _createClass(OffsetTracker, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator4 = _createForOfIteratorHelper(this.scrollCaches),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var scrollCache = _step4.value;\n          scrollCache.destroy();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"computeLeft\",\n    value: function computeLeft() {\n      var left = this.origRect.left;\n      var _iterator5 = _createForOfIteratorHelper(this.scrollCaches),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var scrollCache = _step5.value;\n          left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return left;\n    }\n  }, {\n    key: \"computeTop\",\n    value: function computeTop() {\n      var top = this.origRect.top;\n      var _iterator6 = _createForOfIteratorHelper(this.scrollCaches),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var scrollCache = _step6.value;\n          top += scrollCache.origScrollTop - scrollCache.getScrollTop();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return top;\n    }\n  }, {\n    key: \"isWithinClipping\",\n    value: function isWithinClipping(pageX, pageY) {\n      var point = {\n        left: pageX,\n        top: pageY\n      };\n      var _iterator7 = _createForOfIteratorHelper(this.scrollCaches),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var scrollCache = _step7.value;\n          if (!isIgnoredClipping(scrollCache.getEventTarget()) && !(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aF)(point, scrollCache.clientRect)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return true;\n    }\n  }]);\n}(); // certain clipping containers should never constrain interactions, like <html> and <body>\n// https://github.com/fullcalendar/fullcalendar/issues/3615\nfunction isIgnoredClipping(node) {\n  var tagName = node.tagName;\n  return tagName === 'HTML' || tagName === 'BODY';\n}\n\n/*\nTracks movement over multiple droppable areas (aka \"hits\")\nthat exist in one or more DateComponents.\nRelies on an existing draggable.\n\nemits:\n- pointerdown\n- dragstart\n- hitchange - fires initially, even if not over a hit\n- pointerup\n- (hitchange - again, to null, if ended over a hit)\n- dragend\n*/\nvar HitDragging = /*#__PURE__*/function () {\n  function HitDragging(dragging, droppableStore) {\n    var _this7 = this;\n    _classCallCheck(this, HitDragging);\n    // options that can be set by caller\n    this.useSubjectCenter = false;\n    this.requireInitial = true; // if doesn't start out on a hit, won't emit any events\n    this.disablePointCheck = false;\n    this.initialHit = null;\n    this.movingHit = null;\n    this.finalHit = null; // won't ever be populated if shouldIgnoreMove\n    this.handlePointerDown = function (ev) {\n      var dragging = _this7.dragging;\n      _this7.initialHit = null;\n      _this7.movingHit = null;\n      _this7.finalHit = null;\n      _this7.prepareHits();\n      _this7.processFirstCoord(ev);\n      if (_this7.initialHit || !_this7.requireInitial) {\n        dragging.setIgnoreMove(false);\n        // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(\n        _this7.emitter.trigger('pointerdown', ev);\n      } else {\n        dragging.setIgnoreMove(true);\n      }\n    };\n    this.handleDragStart = function (ev) {\n      _this7.emitter.trigger('dragstart', ev);\n      _this7.handleMove(ev, true); // force = fire even if initially null\n    };\n\n    this.handleDragMove = function (ev) {\n      _this7.emitter.trigger('dragmove', ev);\n      _this7.handleMove(ev);\n    };\n    this.handlePointerUp = function (ev) {\n      _this7.releaseHits();\n      _this7.emitter.trigger('pointerup', ev);\n    };\n    this.handleDragEnd = function (ev) {\n      if (_this7.movingHit) {\n        _this7.emitter.trigger('hitupdate', null, true, ev);\n      }\n      _this7.finalHit = _this7.movingHit;\n      _this7.movingHit = null;\n      _this7.emitter.trigger('dragend', ev);\n    };\n    this.droppableStore = droppableStore;\n    dragging.emitter.on('pointerdown', this.handlePointerDown);\n    dragging.emitter.on('dragstart', this.handleDragStart);\n    dragging.emitter.on('dragmove', this.handleDragMove);\n    dragging.emitter.on('pointerup', this.handlePointerUp);\n    dragging.emitter.on('dragend', this.handleDragEnd);\n    this.dragging = dragging;\n    this.emitter = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.F();\n  }\n  // sets initialHit\n  // sets coordAdjust\n  return _createClass(HitDragging, [{\n    key: \"processFirstCoord\",\n    value: function processFirstCoord(ev) {\n      var origPoint = {\n        left: ev.pageX,\n        top: ev.pageY\n      };\n      var adjustedPoint = origPoint;\n      var subjectEl = ev.subjectEl;\n      var subjectRect;\n      if (subjectEl instanceof HTMLElement) {\n        // i.e. not a Document/ShadowRoot\n        subjectRect = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b6)(subjectEl);\n        adjustedPoint = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aG)(adjustedPoint, subjectRect);\n      }\n      var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);\n      if (initialHit) {\n        if (this.useSubjectCenter && subjectRect) {\n          var slicedSubjectRect = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aE)(subjectRect, initialHit.rect);\n          if (slicedSubjectRect) {\n            adjustedPoint = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aH)(slicedSubjectRect);\n          }\n        }\n        this.coordAdjust = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aI)(adjustedPoint, origPoint);\n      } else {\n        this.coordAdjust = {\n          left: 0,\n          top: 0\n        };\n      }\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(ev, forceHandle) {\n      var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);\n      if (forceHandle || !isHitsEqual(this.movingHit, hit)) {\n        this.movingHit = hit;\n        this.emitter.trigger('hitupdate', hit, false, ev);\n      }\n    }\n  }, {\n    key: \"prepareHits\",\n    value: function prepareHits() {\n      this.offsetTrackers = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a)(this.droppableStore, function (interactionSettings) {\n        interactionSettings.component.prepareHits();\n        return new OffsetTracker(interactionSettings.el);\n      });\n    }\n  }, {\n    key: \"releaseHits\",\n    value: function releaseHits() {\n      var offsetTrackers = this.offsetTrackers;\n      for (var id in offsetTrackers) {\n        offsetTrackers[id].destroy();\n      }\n      this.offsetTrackers = {};\n    }\n  }, {\n    key: \"queryHitForOffset\",\n    value: function queryHitForOffset(offsetLeft, offsetTop) {\n      var droppableStore = this.droppableStore,\n        offsetTrackers = this.offsetTrackers;\n      var bestHit = null;\n      for (var id in droppableStore) {\n        var component = droppableStore[id].component;\n        var offsetTracker = offsetTrackers[id];\n        if (offsetTracker &&\n        // wasn't destroyed mid-drag\n        offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {\n          var originLeft = offsetTracker.computeLeft();\n          var originTop = offsetTracker.computeTop();\n          var positionLeft = offsetLeft - originLeft;\n          var positionTop = offsetTop - originTop;\n          var origRect = offsetTracker.origRect;\n          var width = origRect.right - origRect.left;\n          var height = origRect.bottom - origRect.top;\n          if (\n          // must be within the element's bounds\n          positionLeft >= 0 && positionLeft < width && positionTop >= 0 && positionTop < height) {\n            var hit = component.queryHit(positionLeft, positionTop, width, height);\n            if (hit &&\n            // make sure the hit is within activeRange, meaning it's not a dead cell\n            (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b9)(hit.dateProfile.activeRange, hit.dateSpan.range) && (\n            // Ensure the component we are querying for the hit is accessibly my the pointer\n            // Prevents obscured calendars (ex: under a modal dialog) from accepting hit\n            // https://github.com/fullcalendar/fullcalendar/issues/5026\n            this.disablePointCheck || offsetTracker.el.contains(document.elementFromPoint(\n            // add-back origins to get coordinate relative to top-left of window viewport\n            positionLeft + originLeft - window.scrollX, positionTop + originTop - window.scrollY))) && (!bestHit || hit.layer > bestHit.layer)) {\n              hit.componentId = id;\n              hit.context = component.context;\n              // TODO: better way to re-orient rectangle\n              hit.rect.left += originLeft;\n              hit.rect.right += originLeft;\n              hit.rect.top += originTop;\n              hit.rect.bottom += originTop;\n              bestHit = hit;\n            }\n          }\n        }\n      }\n      return bestHit;\n    }\n  }]);\n}();\nfunction isHitsEqual(hit0, hit1) {\n  if (!hit0 && !hit1) {\n    return true;\n  }\n  if (Boolean(hit0) !== Boolean(hit1)) {\n    return false;\n  }\n  return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bf)(hit0.dateSpan, hit1.dateSpan);\n}\nfunction buildDatePointApiWithContext(dateSpan, context) {\n  var props = {};\n  var _iterator8 = _createForOfIteratorHelper(context.pluginHooks.datePointTransforms),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var transform = _step8.value;\n      Object.assign(props, transform(dateSpan, context));\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  Object.assign(props, buildDatePointApi(dateSpan, context.dateEnv));\n  return props;\n}\nfunction buildDatePointApi(span, dateEnv) {\n  return {\n    date: dateEnv.toDate(span.range.start),\n    dateStr: dateEnv.formatIso(span.range.start, {\n      omitTime: span.allDay\n    }),\n    allDay: span.allDay\n  };\n}\n\n/*\nMonitors when the user clicks on a specific date/time of a component.\nA pointerdown+pointerup on the same \"hit\" constitutes a click.\n*/\nvar DateClicking = /*#__PURE__*/function (_Interaction) {\n  function DateClicking(settings) {\n    var _this8;\n    _classCallCheck(this, DateClicking);\n    _this8 = _callSuper(this, DateClicking, [settings]);\n    _this8.handlePointerDown = function (pev) {\n      var _this9 = _this8,\n        dragging = _this9.dragging;\n      var downEl = pev.origEvent.target;\n      // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired\n      dragging.setIgnoreMove(!_this8.component.isValidDateDownEl(downEl));\n    };\n    // won't even fire if moving was ignored\n    _this8.handleDragEnd = function (ev) {\n      var _this10 = _this8,\n        component = _this10.component;\n      var pointer = _this8.dragging.pointer;\n      if (!pointer.wasTouchScroll) {\n        var _this8$hitDragging = _this8.hitDragging,\n          initialHit = _this8$hitDragging.initialHit,\n          finalHit = _this8$hitDragging.finalHit;\n        if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {\n          var context = component.context;\n          var arg = Object.assign(Object.assign({}, buildDatePointApiWithContext(initialHit.dateSpan, context)), {\n            dayEl: initialHit.dayEl,\n            jsEvent: ev.origEvent,\n            view: context.viewApi || context.calendarApi.view\n          });\n          context.emitter.trigger('dateClick', arg);\n        }\n      }\n    };\n    // we DO want to watch pointer moves because otherwise finalHit won't get populated\n    _this8.dragging = new FeaturefulElementDragging(settings.el);\n    _this8.dragging.autoScroller.isEnabled = false;\n    var hitDragging = _this8.hitDragging = new HitDragging(_this8.dragging, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bG)(settings));\n    hitDragging.emitter.on('pointerdown', _this8.handlePointerDown);\n    hitDragging.emitter.on('dragend', _this8.handleDragEnd);\n    return _this8;\n  }\n  _inherits(DateClicking, _Interaction);\n  return _createClass(DateClicking, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.dragging.destroy();\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.Z);\n/*\nTracks when the user selects a portion of time of a component,\nconstituted by a drag over date cells, with a possible delay at the beginning of the drag.\n*/\nvar DateSelecting = /*#__PURE__*/function (_Interaction2) {\n  function DateSelecting(settings) {\n    var _this11;\n    _classCallCheck(this, DateSelecting);\n    _this11 = _callSuper(this, DateSelecting, [settings]);\n    _this11.dragSelection = null;\n    _this11.handlePointerDown = function (ev) {\n      var _this12 = _this11,\n        component = _this12.component,\n        dragging = _this12.dragging;\n      var options = component.context.options;\n      var canSelect = options.selectable && component.isValidDateDownEl(ev.origEvent.target);\n      // don't bother to watch expensive moves if component won't do selection\n      dragging.setIgnoreMove(!canSelect);\n      // if touch, require user to hold down\n      dragging.delay = ev.isTouch ? getComponentTouchDelay$1(component) : null;\n    };\n    _this11.handleDragStart = function (ev) {\n      _this11.component.context.calendarApi.unselect(ev); // unselect previous selections\n    };\n\n    _this11.handleHitUpdate = function (hit, isFinal) {\n      var context = _this11.component.context;\n      var dragSelection = null;\n      var isInvalid = false;\n      if (hit) {\n        var initialHit = _this11.hitDragging.initialHit;\n        var disallowed = hit.componentId === initialHit.componentId && _this11.isHitComboAllowed && !_this11.isHitComboAllowed(initialHit, hit);\n        if (!disallowed) {\n          dragSelection = joinHitsIntoSelection(initialHit, hit, context.pluginHooks.dateSelectionTransformers);\n        }\n        if (!dragSelection || !(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b_)(dragSelection, hit.dateProfile, context)) {\n          isInvalid = true;\n          dragSelection = null;\n        }\n      }\n      if (dragSelection) {\n        context.dispatch({\n          type: 'SELECT_DATES',\n          selection: dragSelection\n        });\n      } else if (!isFinal) {\n        // only unselect if moved away while dragging\n        context.dispatch({\n          type: 'UNSELECT_DATES'\n        });\n      }\n      if (!isInvalid) {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aw)();\n      } else {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ax)();\n      }\n      if (!isFinal) {\n        _this11.dragSelection = dragSelection; // only clear if moved away from all hits while dragging\n      }\n    };\n\n    _this11.handlePointerUp = function (pev) {\n      if (_this11.dragSelection) {\n        // selection is already rendered, so just need to report selection\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cu)(_this11.dragSelection, pev, _this11.component.context);\n        _this11.dragSelection = null;\n      }\n    };\n    var component = settings.component;\n    var options = component.context.options;\n    var dragging = _this11.dragging = new FeaturefulElementDragging(settings.el);\n    dragging.touchScrollAllowed = false;\n    dragging.minDistance = options.selectMinDistance || 0;\n    dragging.autoScroller.isEnabled = options.dragScroll;\n    var hitDragging = _this11.hitDragging = new HitDragging(_this11.dragging, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bG)(settings));\n    hitDragging.emitter.on('pointerdown', _this11.handlePointerDown);\n    hitDragging.emitter.on('dragstart', _this11.handleDragStart);\n    hitDragging.emitter.on('hitupdate', _this11.handleHitUpdate);\n    hitDragging.emitter.on('pointerup', _this11.handlePointerUp);\n    return _this11;\n  }\n  _inherits(DateSelecting, _Interaction2);\n  return _createClass(DateSelecting, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.dragging.destroy();\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.Z);\nfunction getComponentTouchDelay$1(component) {\n  var options = component.context.options;\n  var delay = options.selectLongPressDelay;\n  if (delay == null) {\n    delay = options.longPressDelay;\n  }\n  return delay;\n}\nfunction joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {\n  var dateSpan0 = hit0.dateSpan;\n  var dateSpan1 = hit1.dateSpan;\n  var ms = [dateSpan0.range.start, dateSpan0.range.end, dateSpan1.range.start, dateSpan1.range.end];\n  ms.sort(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.av);\n  var props = {};\n  var _iterator9 = _createForOfIteratorHelper(dateSelectionTransformers),\n    _step9;\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var transformer = _step9.value;\n      var res = transformer(hit0, hit1);\n      if (res === false) {\n        return null;\n      }\n      if (res) {\n        Object.assign(props, res);\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n  props.range = {\n    start: ms[0],\n    end: ms[3]\n  };\n  props.allDay = dateSpan0.allDay;\n  return props;\n}\nvar EventDragging = /*#__PURE__*/function (_Interaction3) {\n  function EventDragging(settings) {\n    var _this13;\n    _classCallCheck(this, EventDragging);\n    _this13 = _callSuper(this, EventDragging, [settings]);\n    // internal state\n    _this13.subjectEl = null;\n    _this13.subjectSeg = null; // the seg being selected/dragged\n    _this13.isDragging = false;\n    _this13.eventRange = null;\n    _this13.relevantEvents = null; // the events being dragged\n    _this13.receivingContext = null;\n    _this13.validMutation = null;\n    _this13.mutatedRelevantEvents = null;\n    _this13.handlePointerDown = function (ev) {\n      var origTarget = ev.origEvent.target;\n      var _this14 = _this13,\n        component = _this14.component,\n        dragging = _this14.dragging;\n      var mirror = dragging.mirror;\n      var options = component.context.options;\n      var initialContext = component.context;\n      _this13.subjectEl = ev.subjectEl;\n      var subjectSeg = _this13.subjectSeg = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__._)(ev.subjectEl);\n      var eventRange = _this13.eventRange = subjectSeg.eventRange;\n      var eventInstanceId = eventRange.instance.instanceId;\n      _this13.relevantEvents = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aV)(initialContext.getCurrentData().eventStore, eventInstanceId);\n      dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;\n      dragging.delay =\n      // only do a touch delay if touch and this event hasn't been selected yet\n      ev.isTouch && eventInstanceId !== component.props.eventSelection ? getComponentTouchDelay(component) : null;\n      if (options.fixedMirrorParent) {\n        mirror.parentNode = options.fixedMirrorParent;\n      } else {\n        mirror.parentNode = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.$)(origTarget, '.fc');\n      }\n      mirror.revertDuration = options.dragRevertDuration;\n      var isValid = component.isValidSegDownEl(origTarget) && !(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.$)(origTarget, '.fc-event-resizer'); // NOT on a resizer\n      dragging.setIgnoreMove(!isValid);\n      // disable dragging for elements that are resizable (ie, selectable)\n      // but are not draggable\n      _this13.isDragging = isValid && ev.subjectEl.classList.contains('fc-event-draggable');\n    };\n    _this13.handleDragStart = function (ev) {\n      var initialContext = _this13.component.context;\n      var eventRange = _this13.eventRange;\n      var eventInstanceId = eventRange.instance.instanceId;\n      if (ev.isTouch) {\n        // need to select a different event?\n        if (eventInstanceId !== _this13.component.props.eventSelection) {\n          initialContext.dispatch({\n            type: 'SELECT_EVENT',\n            eventInstanceId: eventInstanceId\n          });\n        }\n      } else {\n        // if now using mouse, but was previous touch interaction, clear selected event\n        initialContext.dispatch({\n          type: 'UNSELECT_EVENT'\n        });\n      }\n      if (_this13.isDragging) {\n        initialContext.calendarApi.unselect(ev); // unselect *date* selection\n        initialContext.emitter.trigger('eventDragStart', {\n          el: _this13.subjectEl,\n          event: new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a0(initialContext, eventRange.def, eventRange.instance),\n          jsEvent: ev.origEvent,\n          view: initialContext.viewApi\n        });\n      }\n    };\n    _this13.handleHitUpdate = function (hit, isFinal) {\n      if (!_this13.isDragging) {\n        return;\n      }\n      var relevantEvents = _this13.relevantEvents;\n      var initialHit = _this13.hitDragging.initialHit;\n      var initialContext = _this13.component.context;\n      // states based on new hit\n      var receivingContext = null;\n      var mutation = null;\n      var mutatedRelevantEvents = null;\n      var isInvalid = false;\n      var interaction = {\n        affectedEvents: relevantEvents,\n        mutatedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.I)(),\n        isEvent: true\n      };\n      if (hit) {\n        receivingContext = hit.context;\n        var receivingOptions = receivingContext.options;\n        if (initialContext === receivingContext || receivingOptions.editable && receivingOptions.droppable) {\n          mutation = computeEventMutation(initialHit, hit, _this13.eventRange.instance.range.start, receivingContext.getCurrentData().pluginHooks.eventDragMutationMassagers);\n          if (mutation) {\n            mutatedRelevantEvents = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bX)(relevantEvents, receivingContext.getCurrentData().eventUiBases, mutation, receivingContext);\n            interaction.mutatedEvents = mutatedRelevantEvents;\n            if (!(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bZ)(interaction, hit.dateProfile, receivingContext)) {\n              isInvalid = true;\n              mutation = null;\n              mutatedRelevantEvents = null;\n              interaction.mutatedEvents = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.I)();\n            }\n          }\n        } else {\n          receivingContext = null;\n        }\n      }\n      _this13.displayDrag(receivingContext, interaction);\n      if (!isInvalid) {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aw)();\n      } else {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ax)();\n      }\n      if (!isFinal) {\n        if (initialContext === receivingContext &&\n        // TODO: write test for this\n        isHitsEqual(initialHit, hit)) {\n          mutation = null;\n        }\n        _this13.dragging.setMirrorNeedsRevert(!mutation);\n        // render the mirror if no already-rendered mirror\n        // TODO: wish we could somehow wait for dispatch to guarantee render\n        _this13.dragging.setMirrorIsVisible(!hit || !_this13.subjectEl.getRootNode().querySelector('.fc-event-mirror'));\n        // assign states based on new hit\n        _this13.receivingContext = receivingContext;\n        _this13.validMutation = mutation;\n        _this13.mutatedRelevantEvents = mutatedRelevantEvents;\n      }\n    };\n    _this13.handlePointerUp = function () {\n      if (!_this13.isDragging) {\n        _this13.cleanup(); // because handleDragEnd won't fire\n      }\n    };\n\n    _this13.handleDragEnd = function (ev) {\n      if (_this13.isDragging) {\n        var initialContext = _this13.component.context;\n        var initialView = initialContext.viewApi;\n        var _this15 = _this13,\n          receivingContext = _this15.receivingContext,\n          validMutation = _this15.validMutation;\n        var eventDef = _this13.eventRange.def;\n        var eventInstance = _this13.eventRange.instance;\n        var eventApi = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a0(initialContext, eventDef, eventInstance);\n        var relevantEvents = _this13.relevantEvents;\n        var mutatedRelevantEvents = _this13.mutatedRelevantEvents;\n        var finalHit = _this13.hitDragging.finalHit;\n        _this13.clearDrag(); // must happen after revert animation\n        initialContext.emitter.trigger('eventDragStop', {\n          el: _this13.subjectEl,\n          event: eventApi,\n          jsEvent: ev.origEvent,\n          view: initialView\n        });\n        if (validMutation) {\n          // dropped within same calendar\n          if (receivingContext === initialContext) {\n            var updatedEventApi = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a0(initialContext, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);\n            initialContext.dispatch({\n              type: 'MERGE_EVENTS',\n              eventStore: mutatedRelevantEvents\n            });\n            var eventChangeArg = {\n              oldEvent: eventApi,\n              event: updatedEventApi,\n              relatedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.w)(mutatedRelevantEvents, initialContext, eventInstance),\n              revert: function revert() {\n                initialContext.dispatch({\n                  type: 'MERGE_EVENTS',\n                  eventStore: relevantEvents // the pre-change data\n                });\n              }\n            };\n\n            var transformed = {};\n            var _iterator10 = _createForOfIteratorHelper(initialContext.getCurrentData().pluginHooks.eventDropTransformers),\n              _step10;\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var transformer = _step10.value;\n                Object.assign(transformed, transformer(validMutation, initialContext));\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n            initialContext.emitter.trigger('eventDrop', Object.assign(Object.assign(Object.assign({}, eventChangeArg), transformed), {\n              el: ev.subjectEl,\n              delta: validMutation.datesDelta,\n              jsEvent: ev.origEvent,\n              view: initialView\n            }));\n            initialContext.emitter.trigger('eventChange', eventChangeArg);\n            // dropped in different calendar\n          } else if (receivingContext) {\n            var eventRemoveArg = {\n              event: eventApi,\n              relatedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.w)(relevantEvents, initialContext, eventInstance),\n              revert: function revert() {\n                initialContext.dispatch({\n                  type: 'MERGE_EVENTS',\n                  eventStore: relevantEvents\n                });\n              }\n            };\n            initialContext.emitter.trigger('eventLeave', Object.assign(Object.assign({}, eventRemoveArg), {\n              draggedEl: ev.subjectEl,\n              view: initialView\n            }));\n            initialContext.dispatch({\n              type: 'REMOVE_EVENTS',\n              eventStore: relevantEvents\n            });\n            initialContext.emitter.trigger('eventRemove', eventRemoveArg);\n            var addedEventDef = mutatedRelevantEvents.defs[eventDef.defId];\n            var addedEventInstance = mutatedRelevantEvents.instances[eventInstance.instanceId];\n            var addedEventApi = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a0(receivingContext, addedEventDef, addedEventInstance);\n            receivingContext.dispatch({\n              type: 'MERGE_EVENTS',\n              eventStore: mutatedRelevantEvents\n            });\n            var eventAddArg = {\n              event: addedEventApi,\n              relatedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.w)(mutatedRelevantEvents, receivingContext, addedEventInstance),\n              revert: function revert() {\n                receivingContext.dispatch({\n                  type: 'REMOVE_EVENTS',\n                  eventStore: mutatedRelevantEvents\n                });\n              }\n            };\n            receivingContext.emitter.trigger('eventAdd', eventAddArg);\n            if (ev.isTouch) {\n              receivingContext.dispatch({\n                type: 'SELECT_EVENT',\n                eventInstanceId: eventInstance.instanceId\n              });\n            }\n            receivingContext.emitter.trigger('drop', Object.assign(Object.assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), {\n              draggedEl: ev.subjectEl,\n              jsEvent: ev.origEvent,\n              view: finalHit.context.viewApi\n            }));\n            receivingContext.emitter.trigger('eventReceive', Object.assign(Object.assign({}, eventAddArg), {\n              draggedEl: ev.subjectEl,\n              view: finalHit.context.viewApi\n            }));\n          }\n        } else {\n          initialContext.emitter.trigger('_noEventDrop');\n        }\n      }\n      _this13.cleanup();\n    };\n    var _this16 = _this13,\n      component = _this16.component;\n    var options = component.context.options;\n    var dragging = _this13.dragging = new FeaturefulElementDragging(settings.el);\n    dragging.pointer.selector = EventDragging.SELECTOR;\n    dragging.touchScrollAllowed = false;\n    dragging.autoScroller.isEnabled = options.dragScroll;\n    var hitDragging = _this13.hitDragging = new HitDragging(_this13.dragging, _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a7);\n    hitDragging.useSubjectCenter = settings.useEventCenter;\n    hitDragging.emitter.on('pointerdown', _this13.handlePointerDown);\n    hitDragging.emitter.on('dragstart', _this13.handleDragStart);\n    hitDragging.emitter.on('hitupdate', _this13.handleHitUpdate);\n    hitDragging.emitter.on('pointerup', _this13.handlePointerUp);\n    hitDragging.emitter.on('dragend', _this13.handleDragEnd);\n    return _this13;\n  }\n  _inherits(EventDragging, _Interaction3);\n  return _createClass(EventDragging, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.dragging.destroy();\n    }\n    // render a drag state on the next receivingCalendar\n  }, {\n    key: \"displayDrag\",\n    value: function displayDrag(nextContext, state) {\n      var initialContext = this.component.context;\n      var prevContext = this.receivingContext;\n      // does the previous calendar need to be cleared?\n      if (prevContext && prevContext !== nextContext) {\n        // does the initial calendar need to be cleared?\n        // if so, don't clear all the way. we still need to to hide the affectedEvents\n        if (prevContext === initialContext) {\n          prevContext.dispatch({\n            type: 'SET_EVENT_DRAG',\n            state: {\n              affectedEvents: state.affectedEvents,\n              mutatedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.I)(),\n              isEvent: true\n            }\n          });\n          // completely clear the old calendar if it wasn't the initial\n        } else {\n          prevContext.dispatch({\n            type: 'UNSET_EVENT_DRAG'\n          });\n        }\n      }\n      if (nextContext) {\n        nextContext.dispatch({\n          type: 'SET_EVENT_DRAG',\n          state: state\n        });\n      }\n    }\n  }, {\n    key: \"clearDrag\",\n    value: function clearDrag() {\n      var initialCalendar = this.component.context;\n      var receivingContext = this.receivingContext;\n      if (receivingContext) {\n        receivingContext.dispatch({\n          type: 'UNSET_EVENT_DRAG'\n        });\n      }\n      // the initial calendar might have an dummy drag state from displayDrag\n      if (initialCalendar !== receivingContext) {\n        initialCalendar.dispatch({\n          type: 'UNSET_EVENT_DRAG'\n        });\n      }\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.subjectSeg = null;\n      this.isDragging = false;\n      this.eventRange = null;\n      this.relevantEvents = null;\n      this.receivingContext = null;\n      this.validMutation = null;\n      this.mutatedRelevantEvents = null;\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.Z); // TODO: test this in IE11\n// QUESTION: why do we need it on the resizable???\nEventDragging.SELECTOR = '.fc-event-draggable, .fc-event-resizable';\nfunction computeEventMutation(hit0, hit1, eventInstanceStart, massagers) {\n  var dateSpan0 = hit0.dateSpan;\n  var dateSpan1 = hit1.dateSpan;\n  var date0 = dateSpan0.range.start;\n  var date1 = dateSpan1.range.start;\n  var standardProps = {};\n  if (dateSpan0.allDay !== dateSpan1.allDay) {\n    standardProps.allDay = dateSpan1.allDay;\n    standardProps.hasEnd = hit1.context.options.allDayMaintainDuration;\n    if (dateSpan1.allDay) {\n      // means date1 is already start-of-day,\n      // but date0 needs to be converted\n      date0 = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.q)(eventInstanceStart);\n    } else {\n      // Moving from allDate->timed\n      // Doesn't matter where on the event the drag began, mutate the event's start-date to date1\n      date0 = eventInstanceStart;\n    }\n  }\n  var delta = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aA)(date0, date1, hit0.context.dateEnv, hit0.componentId === hit1.componentId ? hit0.largeUnit : null);\n  if (delta.milliseconds) {\n    // has hours/minutes/seconds\n    standardProps.allDay = false;\n  }\n  var mutation = {\n    datesDelta: delta,\n    standardProps: standardProps\n  };\n  var _iterator11 = _createForOfIteratorHelper(massagers),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var massager = _step11.value;\n      massager(mutation, hit0, hit1);\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n  return mutation;\n}\nfunction getComponentTouchDelay(component) {\n  var options = component.context.options;\n  var delay = options.eventLongPressDelay;\n  if (delay == null) {\n    delay = options.longPressDelay;\n  }\n  return delay;\n}\nvar EventResizing = /*#__PURE__*/function (_Interaction4) {\n  function EventResizing(settings) {\n    var _this17;\n    _classCallCheck(this, EventResizing);\n    _this17 = _callSuper(this, EventResizing, [settings]);\n    // internal state\n    _this17.draggingSegEl = null;\n    _this17.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?\n    _this17.eventRange = null;\n    _this17.relevantEvents = null;\n    _this17.validMutation = null;\n    _this17.mutatedRelevantEvents = null;\n    _this17.handlePointerDown = function (ev) {\n      var _this18 = _this17,\n        component = _this18.component;\n      var segEl = _this17.querySegEl(ev);\n      var seg = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__._)(segEl);\n      var eventRange = _this17.eventRange = seg.eventRange;\n      _this17.dragging.minDistance = component.context.options.eventDragMinDistance;\n      // if touch, need to be working with a selected event\n      _this17.dragging.setIgnoreMove(!_this17.component.isValidSegDownEl(ev.origEvent.target) || ev.isTouch && _this17.component.props.eventSelection !== eventRange.instance.instanceId);\n    };\n    _this17.handleDragStart = function (ev) {\n      var context = _this17.component.context;\n      var eventRange = _this17.eventRange;\n      _this17.relevantEvents = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aV)(context.getCurrentData().eventStore, _this17.eventRange.instance.instanceId);\n      var segEl = _this17.querySegEl(ev);\n      _this17.draggingSegEl = segEl;\n      _this17.draggingSeg = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__._)(segEl);\n      context.calendarApi.unselect();\n      context.emitter.trigger('eventResizeStart', {\n        el: segEl,\n        event: new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a0(context, eventRange.def, eventRange.instance),\n        jsEvent: ev.origEvent,\n        view: context.viewApi\n      });\n    };\n    _this17.handleHitUpdate = function (hit, isFinal, ev) {\n      var context = _this17.component.context;\n      var relevantEvents = _this17.relevantEvents;\n      var initialHit = _this17.hitDragging.initialHit;\n      var eventInstance = _this17.eventRange.instance;\n      var mutation = null;\n      var mutatedRelevantEvents = null;\n      var isInvalid = false;\n      var interaction = {\n        affectedEvents: relevantEvents,\n        mutatedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.I)(),\n        isEvent: true\n      };\n      if (hit) {\n        var disallowed = hit.componentId === initialHit.componentId && _this17.isHitComboAllowed && !_this17.isHitComboAllowed(initialHit, hit);\n        if (!disallowed) {\n          mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-event-resizer-start'), eventInstance.range);\n        }\n      }\n      if (mutation) {\n        mutatedRelevantEvents = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bX)(relevantEvents, context.getCurrentData().eventUiBases, mutation, context);\n        interaction.mutatedEvents = mutatedRelevantEvents;\n        if (!(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bZ)(interaction, hit.dateProfile, context)) {\n          isInvalid = true;\n          mutation = null;\n          mutatedRelevantEvents = null;\n          interaction.mutatedEvents = null;\n        }\n      }\n      if (mutatedRelevantEvents) {\n        context.dispatch({\n          type: 'SET_EVENT_RESIZE',\n          state: interaction\n        });\n      } else {\n        context.dispatch({\n          type: 'UNSET_EVENT_RESIZE'\n        });\n      }\n      if (!isInvalid) {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aw)();\n      } else {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ax)();\n      }\n      if (!isFinal) {\n        if (mutation && isHitsEqual(initialHit, hit)) {\n          mutation = null;\n        }\n        _this17.validMutation = mutation;\n        _this17.mutatedRelevantEvents = mutatedRelevantEvents;\n      }\n    };\n    _this17.handleDragEnd = function (ev) {\n      var context = _this17.component.context;\n      var eventDef = _this17.eventRange.def;\n      var eventInstance = _this17.eventRange.instance;\n      var eventApi = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a0(context, eventDef, eventInstance);\n      var relevantEvents = _this17.relevantEvents;\n      var mutatedRelevantEvents = _this17.mutatedRelevantEvents;\n      context.emitter.trigger('eventResizeStop', {\n        el: _this17.draggingSegEl,\n        event: eventApi,\n        jsEvent: ev.origEvent,\n        view: context.viewApi\n      });\n      if (_this17.validMutation) {\n        var updatedEventApi = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a0(context, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);\n        context.dispatch({\n          type: 'MERGE_EVENTS',\n          eventStore: mutatedRelevantEvents\n        });\n        var eventChangeArg = {\n          oldEvent: eventApi,\n          event: updatedEventApi,\n          relatedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.w)(mutatedRelevantEvents, context, eventInstance),\n          revert: function revert() {\n            context.dispatch({\n              type: 'MERGE_EVENTS',\n              eventStore: relevantEvents // the pre-change events\n            });\n          }\n        };\n\n        context.emitter.trigger('eventResize', Object.assign(Object.assign({}, eventChangeArg), {\n          el: _this17.draggingSegEl,\n          startDelta: _this17.validMutation.startDelta || (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.d)(0),\n          endDelta: _this17.validMutation.endDelta || (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.d)(0),\n          jsEvent: ev.origEvent,\n          view: context.viewApi\n        }));\n        context.emitter.trigger('eventChange', eventChangeArg);\n      } else {\n        context.emitter.trigger('_noEventResize');\n      }\n      // reset all internal state\n      _this17.draggingSeg = null;\n      _this17.relevantEvents = null;\n      _this17.validMutation = null;\n      // okay to keep eventInstance around. useful to set it in handlePointerDown\n    };\n\n    var component = settings.component;\n    var dragging = _this17.dragging = new FeaturefulElementDragging(settings.el);\n    dragging.pointer.selector = '.fc-event-resizer';\n    dragging.touchScrollAllowed = false;\n    dragging.autoScroller.isEnabled = component.context.options.dragScroll;\n    var hitDragging = _this17.hitDragging = new HitDragging(_this17.dragging, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bG)(settings));\n    hitDragging.emitter.on('pointerdown', _this17.handlePointerDown);\n    hitDragging.emitter.on('dragstart', _this17.handleDragStart);\n    hitDragging.emitter.on('hitupdate', _this17.handleHitUpdate);\n    hitDragging.emitter.on('dragend', _this17.handleDragEnd);\n    return _this17;\n  }\n  _inherits(EventResizing, _Interaction4);\n  return _createClass(EventResizing, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.dragging.destroy();\n    }\n  }, {\n    key: \"querySegEl\",\n    value: function querySegEl(ev) {\n      return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.$)(ev.subjectEl, '.fc-event');\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.Z);\nfunction computeMutation(hit0, hit1, isFromStart, instanceRange) {\n  var dateEnv = hit0.context.dateEnv;\n  var date0 = hit0.dateSpan.range.start;\n  var date1 = hit1.dateSpan.range.start;\n  var delta = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aA)(date0, date1, dateEnv, hit0.largeUnit);\n  if (isFromStart) {\n    if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {\n      return {\n        startDelta: delta\n      };\n    }\n  } else if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {\n    return {\n      endDelta: delta\n    };\n  }\n  return null;\n}\nvar UnselectAuto = /*#__PURE__*/function () {\n  function UnselectAuto(context) {\n    var _this19 = this;\n    _classCallCheck(this, UnselectAuto);\n    this.context = context;\n    this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system\n    this.matchesCancel = false;\n    this.matchesEvent = false;\n    this.onSelect = function (selectInfo) {\n      if (selectInfo.jsEvent) {\n        _this19.isRecentPointerDateSelect = true;\n      }\n    };\n    this.onDocumentPointerDown = function (pev) {\n      var unselectCancel = _this19.context.options.unselectCancel;\n      var downEl = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aR)(pev.origEvent);\n      _this19.matchesCancel = !!(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.$)(downEl, unselectCancel);\n      _this19.matchesEvent = !!(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.$)(downEl, EventDragging.SELECTOR); // interaction started on an event?\n    };\n\n    this.onDocumentPointerUp = function (pev) {\n      var context = _this19.context;\n      var documentPointer = _this19.documentPointer;\n      var calendarState = context.getCurrentData();\n      // touch-scrolling should never unfocus any type of selection\n      if (!documentPointer.wasTouchScroll) {\n        if (calendarState.dateSelection &&\n        // an existing date selection?\n        !_this19.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?\n        ) {\n          var unselectAuto = context.options.unselectAuto;\n          if (unselectAuto && (!unselectAuto || !_this19.matchesCancel)) {\n            context.calendarApi.unselect(pev);\n          }\n        }\n        if (calendarState.eventSelection &&\n        // an existing event selected?\n        !_this19.matchesEvent // interaction DIDN'T start on an event\n        ) {\n          context.dispatch({\n            type: 'UNSELECT_EVENT'\n          });\n        }\n      }\n      _this19.isRecentPointerDateSelect = false;\n    };\n    var documentPointer = this.documentPointer = new PointerDragging(document);\n    documentPointer.shouldIgnoreMove = true;\n    documentPointer.shouldWatchScroll = false;\n    documentPointer.emitter.on('pointerdown', this.onDocumentPointerDown);\n    documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);\n    /*\n    TODO: better way to know about whether there was a selection with the pointer\n    */\n    context.emitter.on('select', this.onSelect);\n  }\n  return _createClass(UnselectAuto, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.context.emitter.off('select', this.onSelect);\n      this.documentPointer.destroy();\n    }\n  }]);\n}();\nvar OPTION_REFINERS = {\n  fixedMirrorParent: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n\n};\nvar LISTENER_REFINERS = {\n  dateClick: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  eventDragStart: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  eventDragStop: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  eventDrop: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  eventResizeStart: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  eventResizeStop: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  eventResize: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  drop: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  eventReceive: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n,\n  eventLeave: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.n\n};\n\n/*\nGiven an already instantiated draggable object for one-or-more elements,\nInterprets any dragging as an attempt to drag an events that lives outside\nof a calendar onto a calendar.\n*/\nvar ExternalElementDragging = /*#__PURE__*/function () {\n  function ExternalElementDragging(dragging, suppliedDragMeta) {\n    var _this20 = this;\n    _classCallCheck(this, ExternalElementDragging);\n    this.receivingContext = null;\n    this.droppableEvent = null; // will exist for all drags, even if create:false\n    this.suppliedDragMeta = null;\n    this.dragMeta = null;\n    this.handleDragStart = function (ev) {\n      _this20.dragMeta = _this20.buildDragMeta(ev.subjectEl);\n    };\n    this.handleHitUpdate = function (hit, isFinal, ev) {\n      var dragging = _this20.hitDragging.dragging;\n      var receivingContext = null;\n      var droppableEvent = null;\n      var isInvalid = false;\n      var interaction = {\n        affectedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.I)(),\n        mutatedEvents: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.I)(),\n        isEvent: _this20.dragMeta.create\n      };\n      if (hit) {\n        receivingContext = hit.context;\n        if (_this20.canDropElOnCalendar(ev.subjectEl, receivingContext)) {\n          droppableEvent = computeEventForDateSpan(hit.dateSpan, _this20.dragMeta, receivingContext);\n          interaction.mutatedEvents = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aW)(droppableEvent);\n          isInvalid = !(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bZ)(interaction, hit.dateProfile, receivingContext);\n          if (isInvalid) {\n            interaction.mutatedEvents = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.I)();\n            droppableEvent = null;\n          }\n        }\n      }\n      _this20.displayDrag(receivingContext, interaction);\n      // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)\n      // TODO: wish we could somehow wait for dispatch to guarantee render\n      dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector('.fc-event-mirror'));\n      if (!isInvalid) {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aw)();\n      } else {\n        (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ax)();\n      }\n      if (!isFinal) {\n        dragging.setMirrorNeedsRevert(!droppableEvent);\n        _this20.receivingContext = receivingContext;\n        _this20.droppableEvent = droppableEvent;\n      }\n    };\n    this.handleDragEnd = function (pev) {\n      var receivingContext = _this20.receivingContext,\n        droppableEvent = _this20.droppableEvent;\n      _this20.clearDrag();\n      if (receivingContext && droppableEvent) {\n        var finalHit = _this20.hitDragging.finalHit;\n        var finalView = finalHit.context.viewApi;\n        var dragMeta = _this20.dragMeta;\n        receivingContext.emitter.trigger('drop', Object.assign(Object.assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), {\n          draggedEl: pev.subjectEl,\n          jsEvent: pev.origEvent,\n          view: finalView\n        }));\n        if (dragMeta.create) {\n          var addingEvents = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aW)(droppableEvent);\n          receivingContext.dispatch({\n            type: 'MERGE_EVENTS',\n            eventStore: addingEvents\n          });\n          if (pev.isTouch) {\n            receivingContext.dispatch({\n              type: 'SELECT_EVENT',\n              eventInstanceId: droppableEvent.instance.instanceId\n            });\n          }\n          // signal that an external event landed\n          receivingContext.emitter.trigger('eventReceive', {\n            event: new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a0(receivingContext, droppableEvent.def, droppableEvent.instance),\n            relatedEvents: [],\n            revert: function revert() {\n              receivingContext.dispatch({\n                type: 'REMOVE_EVENTS',\n                eventStore: addingEvents\n              });\n            },\n            draggedEl: pev.subjectEl,\n            view: finalView\n          });\n        }\n      }\n      _this20.receivingContext = null;\n      _this20.droppableEvent = null;\n    };\n    var hitDragging = this.hitDragging = new HitDragging(dragging, _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.a7);\n    hitDragging.requireInitial = false; // will start outside of a component\n    hitDragging.emitter.on('dragstart', this.handleDragStart);\n    hitDragging.emitter.on('hitupdate', this.handleHitUpdate);\n    hitDragging.emitter.on('dragend', this.handleDragEnd);\n    this.suppliedDragMeta = suppliedDragMeta;\n  }\n  return _createClass(ExternalElementDragging, [{\n    key: \"buildDragMeta\",\n    value: function buildDragMeta(subjectEl) {\n      if (_typeof(this.suppliedDragMeta) === 'object') {\n        return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bJ)(this.suppliedDragMeta);\n      }\n      if (typeof this.suppliedDragMeta === 'function') {\n        return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bJ)(this.suppliedDragMeta(subjectEl));\n      }\n      return getDragMetaFromEl(subjectEl);\n    }\n  }, {\n    key: \"displayDrag\",\n    value: function displayDrag(nextContext, state) {\n      var prevContext = this.receivingContext;\n      if (prevContext && prevContext !== nextContext) {\n        prevContext.dispatch({\n          type: 'UNSET_EVENT_DRAG'\n        });\n      }\n      if (nextContext) {\n        nextContext.dispatch({\n          type: 'SET_EVENT_DRAG',\n          state: state\n        });\n      }\n    }\n  }, {\n    key: \"clearDrag\",\n    value: function clearDrag() {\n      if (this.receivingContext) {\n        this.receivingContext.dispatch({\n          type: 'UNSET_EVENT_DRAG'\n        });\n      }\n    }\n  }, {\n    key: \"canDropElOnCalendar\",\n    value: function canDropElOnCalendar(el, receivingContext) {\n      var dropAccept = receivingContext.options.dropAccept;\n      if (typeof dropAccept === 'function') {\n        return dropAccept.call(receivingContext.calendarApi, el);\n      }\n      if (typeof dropAccept === 'string' && dropAccept) {\n        return Boolean((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aQ)(el, dropAccept));\n      }\n      return true;\n    }\n  }]);\n}(); // Utils for computing event store from the DragMeta\n// ----------------------------------------------------------------------------------------------------\nfunction computeEventForDateSpan(dateSpan, dragMeta, context) {\n  var defProps = Object.assign({}, dragMeta.leftoverProps);\n  var _iterator12 = _createForOfIteratorHelper(context.pluginHooks.externalDefTransforms),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var transform = _step12.value;\n      Object.assign(defProps, transform(dateSpan, dragMeta));\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n  var _refineEventDef = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.al)(defProps, context),\n    refined = _refineEventDef.refined,\n    extra = _refineEventDef.extra;\n  var def = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ak)(refined, extra, dragMeta.sourceId, dateSpan.allDay, context.options.forceEventDuration || Boolean(dragMeta.duration),\n  // hasEnd\n  context);\n  var start = dateSpan.range.start;\n  // only rely on time info if drop zone is all-day,\n  // otherwise, we already know the time\n  if (dateSpan.allDay && dragMeta.startTime) {\n    start = context.dateEnv.add(start, dragMeta.startTime);\n  }\n  var end = dragMeta.duration ? context.dateEnv.add(start, dragMeta.duration) : (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cv)(dateSpan.allDay, start, context);\n  var instance = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aj)(def.defId, {\n    start: start,\n    end: end\n  });\n  return {\n    def: def,\n    instance: instance\n  };\n}\n// Utils for extracting data from element\n// ----------------------------------------------------------------------------------------------------\nfunction getDragMetaFromEl(el) {\n  var str = getEmbeddedElData(el, 'event');\n  var obj = str ? JSON.parse(str) : {\n    create: false\n  }; // if no embedded data, assume no event creation\n  return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bJ)(obj);\n}\n_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bI.dataAttrPrefix = '';\nfunction getEmbeddedElData(el, name) {\n  var prefix = _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bI.dataAttrPrefix;\n  var prefixedName = (prefix ? prefix + '-' : '') + name;\n  return el.getAttribute('data-' + prefixedName) || '';\n}\n\n/*\nMakes an element (that is *external* to any calendar) draggable.\nCan pass in data that determines how an event will be created when dropped onto a calendar.\nLeverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.\n*/\nvar ExternalDraggable = /*#__PURE__*/function () {\n  function ExternalDraggable(el) {\n    var _this21 = this;\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, ExternalDraggable);\n    this.handlePointerDown = function (ev) {\n      var dragging = _this21.dragging;\n      var _this21$settings = _this21.settings,\n        minDistance = _this21$settings.minDistance,\n        longPressDelay = _this21$settings.longPressDelay;\n      dragging.minDistance = minDistance != null ? minDistance : ev.isTouch ? 0 : _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.e.eventDragMinDistance;\n      dragging.delay = ev.isTouch ?\n      // TODO: eventually read eventLongPressDelay instead vvv\n      longPressDelay != null ? longPressDelay : _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.e.longPressDelay : 0;\n    };\n    this.handleDragStart = function (ev) {\n      if (ev.isTouch && _this21.dragging.delay && ev.subjectEl.classList.contains('fc-event')) {\n        _this21.dragging.mirror.getMirrorEl().classList.add('fc-event-selected');\n      }\n    };\n    this.settings = settings;\n    var dragging = this.dragging = new FeaturefulElementDragging(el);\n    dragging.touchScrollAllowed = false;\n    if (settings.itemSelector != null) {\n      dragging.pointer.selector = settings.itemSelector;\n    }\n    if (settings.appendTo != null) {\n      dragging.mirror.parentNode = settings.appendTo; // TODO: write tests\n    }\n\n    dragging.emitter.on('pointerdown', this.handlePointerDown);\n    dragging.emitter.on('dragstart', this.handleDragStart);\n    new ExternalElementDragging(dragging, settings.eventData); // eslint-disable-line no-new\n  }\n  return _createClass(ExternalDraggable, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.dragging.destroy();\n    }\n  }]);\n}();\n/*\nDetects when a *THIRD-PARTY* drag-n-drop system interacts with elements.\nThe third-party system is responsible for drawing the visuals effects of the drag.\nThis class simply monitors for pointer movements and fires events.\nIt also has the ability to hide the moving element (the \"mirror\") during the drag.\n*/\nvar InferredElementDragging = /*#__PURE__*/function (_ElementDragging2) {\n  function InferredElementDragging(containerEl) {\n    var _this22;\n    _classCallCheck(this, InferredElementDragging);\n    _this22 = _callSuper(this, InferredElementDragging, [containerEl]);\n    _this22.shouldIgnoreMove = false;\n    _this22.mirrorSelector = '';\n    _this22.currentMirrorEl = null;\n    _this22.handlePointerDown = function (ev) {\n      _this22.emitter.trigger('pointerdown', ev);\n      if (!_this22.shouldIgnoreMove) {\n        // fire dragstart right away. does not support delay or min-distance\n        _this22.emitter.trigger('dragstart', ev);\n      }\n    };\n    _this22.handlePointerMove = function (ev) {\n      if (!_this22.shouldIgnoreMove) {\n        _this22.emitter.trigger('dragmove', ev);\n      }\n    };\n    _this22.handlePointerUp = function (ev) {\n      _this22.emitter.trigger('pointerup', ev);\n      if (!_this22.shouldIgnoreMove) {\n        // fire dragend right away. does not support a revert animation\n        _this22.emitter.trigger('dragend', ev);\n      }\n    };\n    var pointer = _this22.pointer = new PointerDragging(containerEl);\n    pointer.emitter.on('pointerdown', _this22.handlePointerDown);\n    pointer.emitter.on('pointermove', _this22.handlePointerMove);\n    pointer.emitter.on('pointerup', _this22.handlePointerUp);\n    return _this22;\n  }\n  _inherits(InferredElementDragging, _ElementDragging2);\n  return _createClass(InferredElementDragging, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.pointer.destroy();\n    }\n  }, {\n    key: \"setIgnoreMove\",\n    value: function setIgnoreMove(bool) {\n      this.shouldIgnoreMove = bool;\n    }\n  }, {\n    key: \"setMirrorIsVisible\",\n    value: function setMirrorIsVisible(bool) {\n      if (bool) {\n        // restore a previously hidden element.\n        // use the reference in case the selector class has already been removed.\n        if (this.currentMirrorEl) {\n          this.currentMirrorEl.style.visibility = '';\n          this.currentMirrorEl = null;\n        }\n      } else {\n        var mirrorEl = this.mirrorSelector\n        // TODO: somehow query FullCalendars WITHIN shadow-roots\n        ? document.querySelector(this.mirrorSelector) : null;\n        if (mirrorEl) {\n          this.currentMirrorEl = mirrorEl;\n          mirrorEl.style.visibility = 'hidden';\n        }\n      }\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bH);\n/*\nBridges third-party drag-n-drop systems with FullCalendar.\nMust be instantiated and destroyed by caller.\n*/\nvar ThirdPartyDraggable = /*#__PURE__*/function () {\n  function ThirdPartyDraggable(containerOrSettings, settings) {\n    _classCallCheck(this, ThirdPartyDraggable);\n    var containerEl = document;\n    if (\n    // wish we could just test instanceof EventTarget, but doesn't work in IE11\n    containerOrSettings === document || containerOrSettings instanceof Element) {\n      containerEl = containerOrSettings;\n      settings = settings || {};\n    } else {\n      settings = containerOrSettings || {};\n    }\n    var dragging = this.dragging = new InferredElementDragging(containerEl);\n    if (typeof settings.itemSelector === 'string') {\n      dragging.pointer.selector = settings.itemSelector;\n    } else if (containerEl === document) {\n      dragging.pointer.selector = '[data-event]';\n    }\n    if (typeof settings.mirrorSelector === 'string') {\n      dragging.mirrorSelector = settings.mirrorSelector;\n    }\n    var externalDragging = new ExternalElementDragging(dragging, settings.eventData);\n    // The hit-detection system requires that the dnd-mirror-element be pointer-events:none,\n    // but this can't be guaranteed for third-party draggables, so disable\n    externalDragging.hitDragging.disablePointCheck = true;\n  }\n  return _createClass(ThirdPartyDraggable, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.dragging.destroy();\n    }\n  }]);\n}();\nvar index = (0,_fullcalendar_core_index_js__WEBPACK_IMPORTED_MODULE_1__.createPlugin)({\n  name: '@fullcalendar/interaction',\n  componentInteractions: [DateClicking, DateSelecting, EventDragging, EventResizing],\n  calendarInteractions: [UnselectAuto],\n  elementDraggingImpl: FeaturefulElementDragging,\n  optionRefiners: OPTION_REFINERS,\n  listenerRefiners: LISTENER_REFINERS\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fullcalendar/interaction/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fullcalendar/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@fullcalendar/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FullCalendar)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/core */ \"(ssr)/./node_modules/@fullcalendar/core/index.js\");\n/* harmony import */ var _fullcalendar_core_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/core/internal */ \"(ssr)/./node_modules/@fullcalendar/core/internal-common.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\nvar reactMajorVersion = parseInt(String(react__WEBPACK_IMPORTED_MODULE_0__.version).split('.')[0]);\nvar syncRenderingByDefault = reactMajorVersion < 18;\nvar FullCalendar = /*#__PURE__*/function (_Component) {\n  function FullCalendar() {\n    var _this2;\n    _classCallCheck(this, FullCalendar);\n    _this2 = _callSuper(this, FullCalendar, arguments);\n    _this2.elRef = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    _this2.isUpdating = false;\n    _this2.isUnmounting = false;\n    _this2.state = {\n      customRenderingMap: new Map()\n    };\n    _this2.requestResize = function () {\n      if (!_this2.isUnmounting) {\n        _this2.cancelResize();\n        _this2.resizeId = requestAnimationFrame(function () {\n          _this2.doResize();\n        });\n      }\n    };\n    return _this2;\n  }\n  _inherits(FullCalendar, _Component);\n  return _createClass(FullCalendar, [{\n    key: \"render\",\n    value: function render() {\n      var customRenderingNodes = [];\n      var _iterator = _createForOfIteratorHelper(this.state.customRenderingMap.values()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var customRendering = _step.value;\n          customRenderingNodes.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(CustomRenderingComponent, {\n            key: customRendering.id,\n            customRendering: customRendering\n          }));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: this.elRef\n      }, customRenderingNodes);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n      // reset b/c react strict-mode calls componentWillUnmount/componentDidMount\n      this.isUnmounting = false;\n      var customRenderingStore = new _fullcalendar_core_internal__WEBPACK_IMPORTED_MODULE_2__.cy();\n      this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore);\n      this.calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_3__.Calendar(this.elRef.current, Object.assign(Object.assign({}, this.props), {\n        handleCustomRendering: this.handleCustomRendering\n      }));\n      this.calendar.render();\n      var lastRequestTimestamp;\n      customRenderingStore.subscribe(function (customRenderingMap) {\n        var requestTimestamp = Date.now();\n        var isMounting = !lastRequestTimestamp;\n        var runFunc =\n        // don't call flushSync if React version already does sync rendering by default\n        // guards against fatal errors:\n        // https://github.com/fullcalendar/fullcalendar/issues/7448\n        syncRenderingByDefault ||\n        //\n        isMounting || _this3.isUpdating || _this3.isUnmounting || requestTimestamp - lastRequestTimestamp < 100 // rerendering frequently\n        ? runNow // either sync rendering (first-time or React 16/17) or async (React 18)\n        : react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync; // guaranteed sync rendering\n        runFunc(function () {\n          _this3.setState({\n            customRenderingMap: customRenderingMap\n          }, function () {\n            lastRequestTimestamp = requestTimestamp;\n            if (isMounting) {\n              _this3.doResize();\n            } else {\n              _this3.requestResize();\n            }\n          });\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.isUpdating = true;\n      this.calendar.resetOptions(Object.assign(Object.assign({}, this.props), {\n        handleCustomRendering: this.handleCustomRendering\n      }));\n      this.isUpdating = false;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isUnmounting = true;\n      this.cancelResize();\n      this.calendar.destroy();\n    }\n  }, {\n    key: \"doResize\",\n    value: function doResize() {\n      this.calendar.updateSize();\n    }\n  }, {\n    key: \"cancelResize\",\n    value: function cancelResize() {\n      if (this.resizeId !== undefined) {\n        cancelAnimationFrame(this.resizeId);\n        this.resizeId = undefined;\n      }\n    }\n  }, {\n    key: \"getApi\",\n    value: function getApi() {\n      return this.calendar;\n    }\n  }]);\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\nFullCalendar.act = runNow; // DEPRECATED. Not leveraged anymore\nvar CustomRenderingComponent = /*#__PURE__*/function (_PureComponent) {\n  function CustomRenderingComponent() {\n    _classCallCheck(this, CustomRenderingComponent);\n    return _callSuper(this, CustomRenderingComponent, arguments);\n  }\n  _inherits(CustomRenderingComponent, _PureComponent);\n  return _createClass(CustomRenderingComponent, [{\n    key: \"render\",\n    value: function render() {\n      var customRendering = this.props.customRendering;\n      var generatorMeta = customRendering.generatorMeta;\n      var vnode = typeof generatorMeta === 'function' ? generatorMeta(customRendering.renderProps) : generatorMeta;\n      return /*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(vnode, customRendering.containerEl);\n    }\n  }]);\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent); // Util\n// -------------------------------------------------------------------------------------------------\nfunction runNow(f) {\n  f();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZWFjdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ21FO0FBQ2Y7QUFDTDtBQUNxQjtBQUNwRSxJQUFNUSxpQkFBaUIsR0FBR0MsUUFBUSxDQUFDQyxNQUFNLENBQUNWLDBDQUFhLENBQUMsQ0FBQ1ksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFLElBQU1DLHNCQUFzQixHQUFHTCxpQkFBaUIsR0FBRyxFQUFFO0FBQUMsSUFDakNNLFlBQVksMEJBQUFDLFVBQUE7RUFDN0IsU0FBQUQsYUFBQSxFQUFjO0lBQUEsSUFBQUUsTUFBQTtJQUFBQyxlQUFBLE9BQUFILFlBQUE7SUFDVkUsTUFBQSxHQUFBRSxVQUFBLE9BQUFKLFlBQUEsRUFBU0ssU0FBUztJQUNsQkgsTUFBQSxDQUFLSSxLQUFLLGdCQUFHbEIsZ0RBQVMsQ0FBQyxDQUFDO0lBQ3hCYyxNQUFBLENBQUtLLFVBQVUsR0FBRyxLQUFLO0lBQ3ZCTCxNQUFBLENBQUtNLFlBQVksR0FBRyxLQUFLO0lBQ3pCTixNQUFBLENBQUtPLEtBQUssR0FBRztNQUNUQyxrQkFBa0IsRUFBRSxJQUFJQyxHQUFHLENBQUM7SUFDaEMsQ0FBQztJQUNEVCxNQUFBLENBQUtVLGFBQWEsR0FBRyxZQUFNO01BQ3ZCLElBQUksQ0FBQ1YsTUFBQSxDQUFLTSxZQUFZLEVBQUU7UUFDcEJOLE1BQUEsQ0FBS1csWUFBWSxDQUFDLENBQUM7UUFDbkJYLE1BQUEsQ0FBS1ksUUFBUSxHQUFHQyxxQkFBcUIsQ0FBQyxZQUFNO1VBQ3hDYixNQUFBLENBQUtjLFFBQVEsQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQztNQUNOO0lBQ0osQ0FBQztJQUFDLE9BQUFkLE1BQUE7RUFDTjtFQUFDZSxTQUFBLENBQUFqQixZQUFBLEVBQUFDLFVBQUE7RUFBQSxPQUFBaUIsWUFBQSxDQUFBbEIsWUFBQTtJQUFBbUIsR0FBQTtJQUFBQyxLQUFBLEVBQ0QsU0FBQUMsTUFBTUEsQ0FBQSxFQUFHO01BQ0wsSUFBTUMsb0JBQW9CLEdBQUcsRUFBRTtNQUFDLElBQUFDLFNBQUEsR0FBQUMsMEJBQUEsQ0FDRixJQUFJLENBQUNmLEtBQUssQ0FBQ0Msa0JBQWtCLENBQUNlLE1BQU0sQ0FBQyxDQUFDO1FBQUFDLEtBQUE7TUFBQTtRQUFwRSxLQUFBSCxTQUFBLENBQUFJLENBQUEsTUFBQUQsS0FBQSxHQUFBSCxTQUFBLENBQUFLLENBQUEsSUFBQUMsSUFBQSxHQUFzRTtVQUFBLElBQTNEQyxlQUFlLEdBQUFKLEtBQUEsQ0FBQU4sS0FBQTtVQUN0QkUsb0JBQW9CLENBQUNTLElBQUksZUFBQzdDLGdEQUFtQixDQUFDK0Msd0JBQXdCLEVBQUU7WUFBRWQsR0FBRyxFQUFFVyxlQUFlLENBQUNJLEVBQUU7WUFBRUosZUFBZSxFQUFFQTtVQUFnQixDQUFDLENBQUMsQ0FBQztRQUMzSTtNQUFDLFNBQUFLLEdBQUE7UUFBQVosU0FBQSxDQUFBYSxDQUFBLENBQUFELEdBQUE7TUFBQTtRQUFBWixTQUFBLENBQUFjLENBQUE7TUFBQTtNQUNELG9CQUFRbkQsZ0RBQW1CLENBQUMsS0FBSyxFQUFFO1FBQUVvRCxHQUFHLEVBQUUsSUFBSSxDQUFDaEM7TUFBTSxDQUFDLEVBQUVnQixvQkFBb0IsQ0FBQztJQUNqRjtFQUFDO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUNELFNBQUFtQixpQkFBaUJBLENBQUEsRUFBRztNQUFBLElBQUFDLE1BQUE7TUFDaEI7TUFDQSxJQUFJLENBQUNoQyxZQUFZLEdBQUcsS0FBSztNQUN6QixJQUFNaUMsb0JBQW9CLEdBQUcsSUFBSWhELDJEQUFvQixDQUFDLENBQUM7TUFDdkQsSUFBSSxDQUFDaUQscUJBQXFCLEdBQUdELG9CQUFvQixDQUFDRSxNQUFNLENBQUNDLElBQUksQ0FBQ0gsb0JBQW9CLENBQUM7TUFDbkYsSUFBSSxDQUFDSSxRQUFRLEdBQUcsSUFBSXJELHdEQUFRLENBQUMsSUFBSSxDQUFDYyxLQUFLLENBQUN3QyxPQUFPLEVBQUVDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDRCxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNDLEtBQUssQ0FBQyxFQUFFO1FBQUVQLHFCQUFxQixFQUFFLElBQUksQ0FBQ0E7TUFBc0IsQ0FBQyxDQUFDLENBQUM7TUFDckosSUFBSSxDQUFDRyxRQUFRLENBQUN4QixNQUFNLENBQUMsQ0FBQztNQUN0QixJQUFJNkIsb0JBQW9CO01BQ3hCVCxvQkFBb0IsQ0FBQ1UsU0FBUyxDQUFDLFVBQUN6QyxrQkFBa0IsRUFBSztRQUNuRCxJQUFNMEMsZ0JBQWdCLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUM7UUFDbkMsSUFBTUMsVUFBVSxHQUFHLENBQUNMLG9CQUFvQjtRQUN4QyxJQUFNTSxPQUFPO1FBQ2I7UUFDQTtRQUNBO1FBQ0F6RCxzQkFBc0I7UUFDbEI7UUFDQXdELFVBQVUsSUFDVmYsTUFBSSxDQUFDakMsVUFBVSxJQUNmaUMsTUFBSSxDQUFDaEMsWUFBWSxJQUNoQjRDLGdCQUFnQixHQUFHRixvQkFBb0IsR0FBSSxHQUFHLENBQUM7UUFBQSxFQUNoRE8sTUFBTSxDQUFDO1FBQUEsRUFDTGxFLGdEQUFTLENBQUMsQ0FBQztRQUNqQmlFLE9BQU8sQ0FBQyxZQUFNO1VBQ1ZoQixNQUFJLENBQUNrQixRQUFRLENBQUM7WUFBRWhELGtCQUFrQixFQUFsQkE7VUFBbUIsQ0FBQyxFQUFFLFlBQU07WUFDeEN3QyxvQkFBb0IsR0FBR0UsZ0JBQWdCO1lBQ3ZDLElBQUlHLFVBQVUsRUFBRTtjQUNaZixNQUFJLENBQUN4QixRQUFRLENBQUMsQ0FBQztZQUNuQixDQUFDLE1BQ0k7Y0FDRHdCLE1BQUksQ0FBQzVCLGFBQWEsQ0FBQyxDQUFDO1lBQ3hCO1VBQ0osQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDO01BQ04sQ0FBQyxDQUFDO0lBQ047RUFBQztJQUFBTyxHQUFBO0lBQUFDLEtBQUEsRUFDRCxTQUFBdUMsa0JBQWtCQSxDQUFBLEVBQUc7TUFDakIsSUFBSSxDQUFDcEQsVUFBVSxHQUFHLElBQUk7TUFDdEIsSUFBSSxDQUFDc0MsUUFBUSxDQUFDZSxZQUFZLENBQUNiLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDRCxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNDLEtBQUssQ0FBQyxFQUFFO1FBQUVQLHFCQUFxQixFQUFFLElBQUksQ0FBQ0E7TUFBc0IsQ0FBQyxDQUFDLENBQUM7TUFDL0gsSUFBSSxDQUFDbkMsVUFBVSxHQUFHLEtBQUs7SUFDM0I7RUFBQztJQUFBWSxHQUFBO0lBQUFDLEtBQUEsRUFDRCxTQUFBeUMsb0JBQW9CQSxDQUFBLEVBQUc7TUFDbkIsSUFBSSxDQUFDckQsWUFBWSxHQUFHLElBQUk7TUFDeEIsSUFBSSxDQUFDSyxZQUFZLENBQUMsQ0FBQztNQUNuQixJQUFJLENBQUNnQyxRQUFRLENBQUNpQixPQUFPLENBQUMsQ0FBQztJQUMzQjtFQUFDO0lBQUEzQyxHQUFBO0lBQUFDLEtBQUEsRUFDRCxTQUFBSixRQUFRQSxDQUFBLEVBQUc7TUFDUCxJQUFJLENBQUM2QixRQUFRLENBQUNrQixVQUFVLENBQUMsQ0FBQztJQUM5QjtFQUFDO0lBQUE1QyxHQUFBO0lBQUFDLEtBQUEsRUFDRCxTQUFBUCxZQUFZQSxDQUFBLEVBQUc7TUFDWCxJQUFJLElBQUksQ0FBQ0MsUUFBUSxLQUFLa0QsU0FBUyxFQUFFO1FBQzdCQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUNuRCxRQUFRLENBQUM7UUFDbkMsSUFBSSxDQUFDQSxRQUFRLEdBQUdrRCxTQUFTO01BQzdCO0lBQ0o7RUFBQztJQUFBN0MsR0FBQTtJQUFBQyxLQUFBLEVBQ0QsU0FBQThDLE1BQU1BLENBQUEsRUFBRztNQUNMLE9BQU8sSUFBSSxDQUFDckIsUUFBUTtJQUN4QjtFQUFDO0FBQUEsRUFsRnFDMUQsNENBQVM7QUFBbEI7QUFvRmpDYSxZQUFZLENBQUNvRSxHQUFHLEdBQUdYLE1BQU0sQ0FBQyxDQUFDO0FBQUEsSUFDckJ4Qix3QkFBd0IsMEJBQUFvQyxjQUFBO0VBQUEsU0FBQXBDLHlCQUFBO0lBQUE5QixlQUFBLE9BQUE4Qix3QkFBQTtJQUFBLE9BQUE3QixVQUFBLE9BQUE2Qix3QkFBQSxFQUFBNUIsU0FBQTtFQUFBO0VBQUFZLFNBQUEsQ0FBQWdCLHdCQUFBLEVBQUFvQyxjQUFBO0VBQUEsT0FBQW5ELFlBQUEsQ0FBQWUsd0JBQUE7SUFBQWQsR0FBQTtJQUFBQyxLQUFBLEVBQzFCLFNBQUFDLE1BQU1BLENBQUEsRUFBRztNQUNMLElBQVFTLGVBQWUsR0FBSyxJQUFJLENBQUNtQixLQUFLLENBQTlCbkIsZUFBZTtNQUN2QixJQUFRd0MsYUFBYSxHQUFLeEMsZUFBZSxDQUFqQ3dDLGFBQWE7TUFDckIsSUFBTUMsS0FBSyxHQUFHLE9BQU9ELGFBQWEsS0FBSyxVQUFVLEdBQzdDQSxhQUFhLENBQUN4QyxlQUFlLENBQUMwQyxXQUFXLENBQUMsR0FDMUNGLGFBQWE7TUFDakIsb0JBQU9oRix1REFBWSxDQUFDaUYsS0FBSyxFQUFFekMsZUFBZSxDQUFDMkMsV0FBVyxDQUFDO0lBQzNEO0VBQUM7QUFBQSxFQVJrQ3BGLGdEQUFhLEdBVXBEO0FBQ0E7QUFDQSxTQUFTb0UsTUFBTUEsQ0FBQ3BCLENBQUMsRUFBRTtFQUNmQSxDQUFDLENBQUMsQ0FBQztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3R1ZGlvcGhvdG8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZWFjdC9kaXN0L2luZGV4LmpzP2Q3YjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgY3JlYXRlUmVmLCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsLCBmbHVzaFN5bmMgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQ2FsZW5kYXIsIH0gZnJvbSAnQGZ1bGxjYWxlbmRhci9jb3JlJztcbmltcG9ydCB7IEN1c3RvbVJlbmRlcmluZ1N0b3JlLCB9IGZyb20gJ0BmdWxsY2FsZW5kYXIvY29yZS9pbnRlcm5hbCc7XG5jb25zdCByZWFjdE1ham9yVmVyc2lvbiA9IHBhcnNlSW50KFN0cmluZyhSZWFjdC52ZXJzaW9uKS5zcGxpdCgnLicpWzBdKTtcbmNvbnN0IHN5bmNSZW5kZXJpbmdCeURlZmF1bHQgPSByZWFjdE1ham9yVmVyc2lvbiA8IDE4O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnVsbENhbGVuZGFyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5lbFJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICB0aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1VubW91bnRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGN1c3RvbVJlbmRlcmluZ01hcDogbmV3IE1hcCgpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVxdWVzdFJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1VubW91bnRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbFJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUmVzaXplKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgY3VzdG9tUmVuZGVyaW5nTm9kZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBjdXN0b21SZW5kZXJpbmcgb2YgdGhpcy5zdGF0ZS5jdXN0b21SZW5kZXJpbmdNYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGN1c3RvbVJlbmRlcmluZ05vZGVzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChDdXN0b21SZW5kZXJpbmdDb21wb25lbnQsIHsga2V5OiBjdXN0b21SZW5kZXJpbmcuaWQsIGN1c3RvbVJlbmRlcmluZzogY3VzdG9tUmVuZGVyaW5nIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IHRoaXMuZWxSZWYgfSwgY3VzdG9tUmVuZGVyaW5nTm9kZXMpKTtcbiAgICB9XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIC8vIHJlc2V0IGIvYyByZWFjdCBzdHJpY3QtbW9kZSBjYWxscyBjb21wb25lbnRXaWxsVW5tb3VudC9jb21wb25lbnREaWRNb3VudFxuICAgICAgICB0aGlzLmlzVW5tb3VudGluZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjdXN0b21SZW5kZXJpbmdTdG9yZSA9IG5ldyBDdXN0b21SZW5kZXJpbmdTdG9yZSgpO1xuICAgICAgICB0aGlzLmhhbmRsZUN1c3RvbVJlbmRlcmluZyA9IGN1c3RvbVJlbmRlcmluZ1N0b3JlLmhhbmRsZS5iaW5kKGN1c3RvbVJlbmRlcmluZ1N0b3JlKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhciA9IG5ldyBDYWxlbmRhcih0aGlzLmVsUmVmLmN1cnJlbnQsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcyksIHsgaGFuZGxlQ3VzdG9tUmVuZGVyaW5nOiB0aGlzLmhhbmRsZUN1c3RvbVJlbmRlcmluZyB9KSk7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIucmVuZGVyKCk7XG4gICAgICAgIGxldCBsYXN0UmVxdWVzdFRpbWVzdGFtcDtcbiAgICAgICAgY3VzdG9tUmVuZGVyaW5nU3RvcmUuc3Vic2NyaWJlKChjdXN0b21SZW5kZXJpbmdNYXApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgY29uc3QgaXNNb3VudGluZyA9ICFsYXN0UmVxdWVzdFRpbWVzdGFtcDtcbiAgICAgICAgICAgIGNvbnN0IHJ1bkZ1bmMgPSAoXG4gICAgICAgICAgICAvLyBkb24ndCBjYWxsIGZsdXNoU3luYyBpZiBSZWFjdCB2ZXJzaW9uIGFscmVhZHkgZG9lcyBzeW5jIHJlbmRlcmluZyBieSBkZWZhdWx0XG4gICAgICAgICAgICAvLyBndWFyZHMgYWdhaW5zdCBmYXRhbCBlcnJvcnM6XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZnVsbGNhbGVuZGFyL2Z1bGxjYWxlbmRhci9pc3N1ZXMvNzQ0OFxuICAgICAgICAgICAgc3luY1JlbmRlcmluZ0J5RGVmYXVsdCB8fFxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgaXNNb3VudGluZyB8fFxuICAgICAgICAgICAgICAgIHRoaXMuaXNVcGRhdGluZyB8fFxuICAgICAgICAgICAgICAgIHRoaXMuaXNVbm1vdW50aW5nIHx8XG4gICAgICAgICAgICAgICAgKHJlcXVlc3RUaW1lc3RhbXAgLSBsYXN0UmVxdWVzdFRpbWVzdGFtcCkgPCAxMDAgLy8gcmVyZW5kZXJpbmcgZnJlcXVlbnRseVxuICAgICAgICAgICAgKSA/IHJ1bk5vdyAvLyBlaXRoZXIgc3luYyByZW5kZXJpbmcgKGZpcnN0LXRpbWUgb3IgUmVhY3QgMTYvMTcpIG9yIGFzeW5jIChSZWFjdCAxOClcbiAgICAgICAgICAgICAgICA6IGZsdXNoU3luYzsgLy8gZ3VhcmFudGVlZCBzeW5jIHJlbmRlcmluZ1xuICAgICAgICAgICAgcnVuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1c3RvbVJlbmRlcmluZ01hcCB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RSZXF1ZXN0VGltZXN0YW1wID0gcmVxdWVzdFRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTW91bnRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9SZXNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdFJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jYWxlbmRhci5yZXNldE9wdGlvbnMoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzKSwgeyBoYW5kbGVDdXN0b21SZW5kZXJpbmc6IHRoaXMuaGFuZGxlQ3VzdG9tUmVuZGVyaW5nIH0pKTtcbiAgICAgICAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLmlzVW5tb3VudGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuY2FuY2VsUmVzaXplKCk7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIuZGVzdHJveSgpO1xuICAgIH1cbiAgICBkb1Jlc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5jYWxlbmRhci51cGRhdGVTaXplKCk7XG4gICAgfVxuICAgIGNhbmNlbFJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzaXplSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yZXNpemVJZCk7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZUlkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEFwaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXI7XG4gICAgfVxufVxuRnVsbENhbGVuZGFyLmFjdCA9IHJ1bk5vdzsgLy8gREVQUkVDQVRFRC4gTm90IGxldmVyYWdlZCBhbnltb3JlXG5jbGFzcyBDdXN0b21SZW5kZXJpbmdDb21wb25lbnQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY3VzdG9tUmVuZGVyaW5nIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IGdlbmVyYXRvck1ldGEgfSA9IGN1c3RvbVJlbmRlcmluZztcbiAgICAgICAgY29uc3Qgdm5vZGUgPSB0eXBlb2YgZ2VuZXJhdG9yTWV0YSA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgICBnZW5lcmF0b3JNZXRhKGN1c3RvbVJlbmRlcmluZy5yZW5kZXJQcm9wcykgOlxuICAgICAgICAgICAgZ2VuZXJhdG9yTWV0YTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVBvcnRhbCh2bm9kZSwgY3VzdG9tUmVuZGVyaW5nLmNvbnRhaW5lckVsKTtcbiAgICB9XG59XG4vLyBVdGlsXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBydW5Ob3coZikge1xuICAgIGYoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsIkNvbXBvbmVudCIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVQb3J0YWwiLCJmbHVzaFN5bmMiLCJDYWxlbmRhciIsIkN1c3RvbVJlbmRlcmluZ1N0b3JlIiwicmVhY3RNYWpvclZlcnNpb24iLCJwYXJzZUludCIsIlN0cmluZyIsInZlcnNpb24iLCJzcGxpdCIsInN5bmNSZW5kZXJpbmdCeURlZmF1bHQiLCJGdWxsQ2FsZW5kYXIiLCJfQ29tcG9uZW50IiwiX3RoaXMyIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NhbGxTdXBlciIsImFyZ3VtZW50cyIsImVsUmVmIiwiaXNVcGRhdGluZyIsImlzVW5tb3VudGluZyIsInN0YXRlIiwiY3VzdG9tUmVuZGVyaW5nTWFwIiwiTWFwIiwicmVxdWVzdFJlc2l6ZSIsImNhbmNlbFJlc2l6ZSIsInJlc2l6ZUlkIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZG9SZXNpemUiLCJfaW5oZXJpdHMiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsImN1c3RvbVJlbmRlcmluZ05vZGVzIiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJ2YWx1ZXMiLCJfc3RlcCIsInMiLCJuIiwiZG9uZSIsImN1c3RvbVJlbmRlcmluZyIsInB1c2giLCJjcmVhdGVFbGVtZW50IiwiQ3VzdG9tUmVuZGVyaW5nQ29tcG9uZW50IiwiaWQiLCJlcnIiLCJlIiwiZiIsInJlZiIsImNvbXBvbmVudERpZE1vdW50IiwiX3RoaXMzIiwiY3VzdG9tUmVuZGVyaW5nU3RvcmUiLCJoYW5kbGVDdXN0b21SZW5kZXJpbmciLCJoYW5kbGUiLCJiaW5kIiwiY2FsZW5kYXIiLCJjdXJyZW50IiwiT2JqZWN0IiwiYXNzaWduIiwicHJvcHMiLCJsYXN0UmVxdWVzdFRpbWVzdGFtcCIsInN1YnNjcmliZSIsInJlcXVlc3RUaW1lc3RhbXAiLCJEYXRlIiwibm93IiwiaXNNb3VudGluZyIsInJ1bkZ1bmMiLCJydW5Ob3ciLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInJlc2V0T3B0aW9ucyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZGVzdHJveSIsInVwZGF0ZVNpemUiLCJ1bmRlZmluZWQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImdldEFwaSIsImRlZmF1bHQiLCJhY3QiLCJfUHVyZUNvbXBvbmVudCIsImdlbmVyYXRvck1ldGEiLCJ2bm9kZSIsInJlbmRlclByb3BzIiwiY29udGFpbmVyRWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fullcalendar/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fullcalendar/timegrid/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@fullcalendar/timegrid/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var _fullcalendar_core_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core/index.js */ \"(ssr)/./node_modules/@fullcalendar/core/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/@fullcalendar/timegrid/internal.js\");\n\n\n\n\n\nvar OPTION_REFINERS = {\n  allDaySlot: Boolean\n};\nvar index = (0,_fullcalendar_core_index_js__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n  name: '@fullcalendar/timegrid',\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    timeGrid: {\n      component: _internal_js__WEBPACK_IMPORTED_MODULE_1__.DayTimeColsView,\n      usesMinMaxTime: true,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true // a bad name. confused with overlap/constraint system\n    },\n\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci90aW1lZ3JpZC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDWDtBQUNSO0FBQ0Y7QUFDSztBQUUzQyxJQUFNRSxlQUFlLEdBQUc7RUFDcEJDLFVBQVUsRUFBRUM7QUFDaEIsQ0FBQztBQUVELElBQUlDLEtBQUssR0FBR0wseUVBQVksQ0FBQztFQUNyQk0sSUFBSSxFQUFFLHdCQUF3QjtFQUM5QkMsV0FBVyxFQUFFLGNBQWM7RUFDM0JDLGNBQWMsRUFBRU4sZUFBZTtFQUMvQk8sS0FBSyxFQUFFO0lBQ0hDLFFBQVEsRUFBRTtNQUNOQyxTQUFTLEVBQUVWLHlEQUFlO01BQzFCVyxjQUFjLEVBQUUsSUFBSTtNQUNwQlQsVUFBVSxFQUFFLElBQUk7TUFDaEJVLFlBQVksRUFBRSxVQUFVO01BQ3hCQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUU7SUFDNUIsQ0FBQzs7SUFDREMsV0FBVyxFQUFFO01BQ1RDLElBQUksRUFBRSxVQUFVO01BQ2hCQyxRQUFRLEVBQUU7UUFBRUMsSUFBSSxFQUFFO01BQUU7SUFDeEIsQ0FBQztJQUNEQyxZQUFZLEVBQUU7TUFDVkgsSUFBSSxFQUFFLFVBQVU7TUFDaEJDLFFBQVEsRUFBRTtRQUFFRyxLQUFLLEVBQUU7TUFBRTtJQUN6QjtFQUNKO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3R1ZGlvcGhvdG8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci90aW1lZ3JpZC9pbmRleC5qcz9hZjcwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVBsdWdpbiB9IGZyb20gJ0BmdWxsY2FsZW5kYXIvY29yZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBEYXlUaW1lQ29sc1ZpZXcgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbmltcG9ydCAnQGZ1bGxjYWxlbmRhci9jb3JlL2ludGVybmFsLmpzJztcbmltcG9ydCAnQGZ1bGxjYWxlbmRhci9jb3JlL3ByZWFjdC5qcyc7XG5pbXBvcnQgJ0BmdWxsY2FsZW5kYXIvZGF5Z3JpZC9pbnRlcm5hbC5qcyc7XG5cbmNvbnN0IE9QVElPTl9SRUZJTkVSUyA9IHtcbiAgICBhbGxEYXlTbG90OiBCb29sZWFuLFxufTtcblxudmFyIGluZGV4ID0gY3JlYXRlUGx1Z2luKHtcbiAgICBuYW1lOiAnQGZ1bGxjYWxlbmRhci90aW1lZ3JpZCcsXG4gICAgaW5pdGlhbFZpZXc6ICd0aW1lR3JpZFdlZWsnLFxuICAgIG9wdGlvblJlZmluZXJzOiBPUFRJT05fUkVGSU5FUlMsXG4gICAgdmlld3M6IHtcbiAgICAgICAgdGltZUdyaWQ6IHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogRGF5VGltZUNvbHNWaWV3LFxuICAgICAgICAgICAgdXNlc01pbk1heFRpbWU6IHRydWUsXG4gICAgICAgICAgICBhbGxEYXlTbG90OiB0cnVlLFxuICAgICAgICAgICAgc2xvdER1cmF0aW9uOiAnMDA6MzA6MDAnLFxuICAgICAgICAgICAgc2xvdEV2ZW50T3ZlcmxhcDogdHJ1ZSwgLy8gYSBiYWQgbmFtZS4gY29uZnVzZWQgd2l0aCBvdmVybGFwL2NvbnN0cmFpbnQgc3lzdGVtXG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVHcmlkRGF5OiB7XG4gICAgICAgICAgICB0eXBlOiAndGltZUdyaWQnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgZGF5czogMSB9LFxuICAgICAgICB9LFxuICAgICAgICB0aW1lR3JpZFdlZWs6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0aW1lR3JpZCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyB3ZWVrczogMSB9LFxuICAgICAgICB9LFxuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgaW5kZXggYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVBsdWdpbiIsIkRheVRpbWVDb2xzVmlldyIsIk9QVElPTl9SRUZJTkVSUyIsImFsbERheVNsb3QiLCJCb29sZWFuIiwiaW5kZXgiLCJuYW1lIiwiaW5pdGlhbFZpZXciLCJvcHRpb25SZWZpbmVycyIsInZpZXdzIiwidGltZUdyaWQiLCJjb21wb25lbnQiLCJ1c2VzTWluTWF4VGltZSIsInNsb3REdXJhdGlvbiIsInNsb3RFdmVudE92ZXJsYXAiLCJ0aW1lR3JpZERheSIsInR5cGUiLCJkdXJhdGlvbiIsImRheXMiLCJ0aW1lR3JpZFdlZWsiLCJ3ZWVrcyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fullcalendar/timegrid/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fullcalendar/timegrid/internal.js":
/*!*********************************************************!*\
  !*** ./node_modules/@fullcalendar/timegrid/internal.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DayTimeCols: () => (/* binding */ DayTimeCols),\n/* harmony export */   DayTimeColsSlicer: () => (/* binding */ DayTimeColsSlicer),\n/* harmony export */   DayTimeColsView: () => (/* binding */ DayTimeColsView),\n/* harmony export */   TimeCols: () => (/* binding */ TimeCols),\n/* harmony export */   TimeColsSlatsCoords: () => (/* binding */ TimeColsSlatsCoords),\n/* harmony export */   TimeColsView: () => (/* binding */ TimeColsView),\n/* harmony export */   buildDayRanges: () => (/* binding */ buildDayRanges),\n/* harmony export */   buildSlatMetas: () => (/* binding */ buildSlatMetas),\n/* harmony export */   buildTimeColsModel: () => (/* binding */ buildTimeColsModel)\n/* harmony export */ });\n/* harmony import */ var _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core/internal.js */ \"(ssr)/./node_modules/@fullcalendar/core/internal-common.js\");\n/* harmony import */ var _fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/core/preact.js */ \"(ssr)/./node_modules/preact/dist/preact.mjs\");\n/* harmony import */ var _fullcalendar_daygrid_internal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/daygrid/internal.js */ \"(ssr)/./node_modules/@fullcalendar/daygrid/internal.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\nvar AllDaySplitter = /*#__PURE__*/function (_Splitter) {\n  function AllDaySplitter() {\n    _classCallCheck(this, AllDaySplitter);\n    return _callSuper(this, AllDaySplitter, arguments);\n  }\n  _inherits(AllDaySplitter, _Splitter);\n  return _createClass(AllDaySplitter, [{\n    key: \"getKeyInfo\",\n    value: function getKeyInfo() {\n      return {\n        allDay: {},\n        timed: {}\n      };\n    }\n  }, {\n    key: \"getKeysForDateSpan\",\n    value: function getKeysForDateSpan(dateSpan) {\n      if (dateSpan.allDay) {\n        return ['allDay'];\n      }\n      return ['timed'];\n    }\n  }, {\n    key: \"getKeysForEventDef\",\n    value: function getKeysForEventDef(eventDef) {\n      if (!eventDef.allDay) {\n        return ['timed'];\n      }\n      if ((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bP)(eventDef)) {\n        return ['timed', 'allDay'];\n      }\n      return ['allDay'];\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.aY);\nvar DEFAULT_SLAT_LABEL_FORMAT = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.x)({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short'\n});\nfunction TimeColsAxisCell(props) {\n  var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-label', props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'];\n  return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.V.Consumer, null, function (context) {\n    if (!props.isLabeled) {\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n        className: classNames.join(' '),\n        \"data-time\": props.isoTimeStr\n      });\n    }\n    var dateEnv = context.dateEnv,\n      options = context.options,\n      viewApi = context.viewApi;\n    var labelFormat =\n    // TODO: fully pre-parse\n    options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.x)(options.slotLabelFormat[0]) : (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.x)(options.slotLabelFormat);\n    var renderProps = {\n      level: 0,\n      time: props.time,\n      date: dateEnv.toDate(props.date),\n      view: viewApi,\n      text: dateEnv.format(props.date, labelFormat)\n    };\n    return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.C, {\n      elTag: \"td\",\n      elClasses: classNames,\n      elAttrs: {\n        'data-time': props.isoTimeStr\n      },\n      renderProps: renderProps,\n      generatorName: \"slotLabelContent\",\n      customGenerator: options.slotLabelContent,\n      defaultGenerator: renderInnerContent,\n      classNameGenerator: options.slotLabelClassNames,\n      didMount: options.slotLabelDidMount,\n      willUnmount: options.slotLabelWillUnmount\n    }, function (InnerContent) {\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(InnerContent, {\n        elTag: \"div\",\n        elClasses: ['fc-timegrid-slot-label-cushion', 'fc-scrollgrid-shrink-cushion']\n      }));\n    });\n  });\n}\nfunction renderInnerContent(props) {\n  return props.text;\n}\nvar TimeBodyAxis = /*#__PURE__*/function (_BaseComponent) {\n  function TimeBodyAxis() {\n    _classCallCheck(this, TimeBodyAxis);\n    return _callSuper(this, TimeBodyAxis, arguments);\n  }\n  _inherits(TimeBodyAxis, _BaseComponent);\n  return _createClass(TimeBodyAxis, [{\n    key: \"render\",\n    value: function render() {\n      return this.props.slatMetas.map(function (slatMeta) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n          key: slatMeta.key\n        }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsAxisCell, Object.assign({}, slatMeta)));\n      });\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.B);\nvar DEFAULT_WEEK_NUM_FORMAT = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.x)({\n  week: 'short'\n});\nvar AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\nvar TimeColsView = /*#__PURE__*/function (_DateComponent) {\n  function TimeColsView() {\n    var _this2;\n    _classCallCheck(this, TimeColsView);\n    _this2 = _callSuper(this, TimeColsView, arguments);\n    _this2.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n    _this2.headerElRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    _this2.rootElRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    _this2.scrollerElRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    _this2.state = {\n      slatCoords: null\n    };\n    _this2.handleScrollTopRequest = function (scrollTop) {\n      var scrollerEl = _this2.scrollerElRef.current;\n      if (scrollerEl) {\n        // TODO: not sure how this could ever be null. weirdness with the reducer\n        scrollerEl.scrollTop = scrollTop;\n      }\n    };\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    _this2.renderHeadAxis = function (rowKey) {\n      var frameHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var options = _this2.context.options;\n      var dateProfile = _this2.props.dateProfile;\n      var range = dateProfile.renderRange;\n      var dayCnt = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bl)(range.start, range.end);\n      // only do in day views (to avoid doing in week views that dont need it)\n      var navLinkAttrs = dayCnt === 1 ? (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b0)(_this2.context, range.start, 'week') : {};\n      if (options.weekNumbers && rowKey === 'day') {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cq, {\n          elTag: \"th\",\n          elClasses: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'],\n          elAttrs: {\n            'aria-hidden': true\n          },\n          date: range.start,\n          defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n        }, function (InnerContent) {\n          return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: ['fc-timegrid-axis-frame', 'fc-scrollgrid-shrink-frame', 'fc-timegrid-axis-frame-liquid'].join(' '),\n            style: {\n              height: frameHeight\n            }\n          }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(InnerContent, {\n            elTag: \"a\",\n            elClasses: ['fc-timegrid-axis-cushion', 'fc-scrollgrid-shrink-cushion', 'fc-scrollgrid-sync-inner'],\n            elAttrs: navLinkAttrs\n          }));\n        });\n      }\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"th\", {\n        \"aria-hidden\": true,\n        className: \"fc-timegrid-axis\"\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-timegrid-axis-frame\",\n        style: {\n          height: frameHeight\n        }\n      }));\n    };\n    /* Table Component Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n    // but DayGrid still needs to have classNames on inner elements in order to measure.\n    _this2.renderTableRowAxis = function (rowHeight) {\n      var _this2$context = _this2.context,\n        options = _this2$context.options,\n        viewApi = _this2$context.viewApi;\n      var renderProps = {\n        text: options.allDayText,\n        view: viewApi\n      };\n      return (\n        // TODO: make reusable hook. used in list view too\n        (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.C, {\n          elTag: \"td\",\n          elClasses: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'],\n          elAttrs: {\n            'aria-hidden': true\n          },\n          renderProps: renderProps,\n          generatorName: \"allDayContent\",\n          customGenerator: options.allDayContent,\n          defaultGenerator: renderAllDayInner,\n          classNameGenerator: options.allDayClassNames,\n          didMount: options.allDayDidMount,\n          willUnmount: options.allDayWillUnmount\n        }, function (InnerContent) {\n          return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: ['fc-timegrid-axis-frame', 'fc-scrollgrid-shrink-frame', rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''].join(' '),\n            style: {\n              height: rowHeight\n            }\n          }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(InnerContent, {\n            elTag: \"span\",\n            elClasses: ['fc-timegrid-axis-cushion', 'fc-scrollgrid-shrink-cushion', 'fc-scrollgrid-sync-inner']\n          }));\n        })\n      );\n    };\n    _this2.handleSlatCoords = function (slatCoords) {\n      _this2.setState({\n        slatCoords: slatCoords\n      });\n    };\n    return _this2;\n  }\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n  _inherits(TimeColsView, _DateComponent);\n  return _createClass(TimeColsView, [{\n    key: \"renderSimpleLayout\",\n    value: function renderSimpleLayout(headerRowContent, allDayContent, timeContent) {\n      var context = this.context,\n        props = this.props;\n      var sections = [];\n      var stickyHeaderDates = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cc)(context.options);\n      if (headerRowContent) {\n        sections.push({\n          type: 'header',\n          key: 'header',\n          isSticky: stickyHeaderDates,\n          chunk: {\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent\n          }\n        });\n      }\n      if (allDayContent) {\n        sections.push({\n          type: 'body',\n          key: 'all-day',\n          chunk: {\n            content: allDayContent\n          }\n        });\n        sections.push({\n          type: 'body',\n          key: 'all-day-divider',\n          outerContent:\n          // TODO: rename to cellContent so don't need to define <tr>?\n          (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n            role: \"presentation\",\n            className: \"fc-scrollgrid-section\"\n          }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n            className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n          }))\n        });\n      }\n      sections.push({\n        type: 'body',\n        key: 'body',\n        liquid: true,\n        expandRows: Boolean(context.options.expandRows),\n        chunk: {\n          scrollerElRef: this.scrollerElRef,\n          content: timeContent\n        }\n      });\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ct, {\n        elRef: this.rootElRef,\n        elClasses: ['fc-timegrid'],\n        viewSpec: context.viewSpec\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.b$, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        cols: [{\n          width: 'shrink'\n        }],\n        sections: sections\n      }));\n    }\n  }, {\n    key: \"renderHScrollLayout\",\n    value: function renderHScrollLayout(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n      var _this3 = this;\n      var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n      if (!ScrollGrid) {\n        throw new Error('No ScrollGrid implementation');\n      }\n      var context = this.context,\n        props = this.props;\n      var stickyHeaderDates = !props.forPrint && (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cc)(context.options);\n      var stickyFooterScrollbar = !props.forPrint && (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cb)(context.options);\n      var sections = [];\n      if (headerRowContent) {\n        sections.push({\n          type: 'header',\n          key: 'header',\n          isSticky: stickyHeaderDates,\n          syncRowHeights: true,\n          chunks: [{\n            key: 'axis',\n            rowContent: function rowContent(arg) {\n              return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                role: \"presentation\"\n              }, _this3.renderHeadAxis('day', arg.rowSyncHeights[0]));\n            }\n          }, {\n            key: 'cols',\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent\n          }]\n        });\n      }\n      if (allDayContent) {\n        sections.push({\n          type: 'body',\n          key: 'all-day',\n          syncRowHeights: true,\n          chunks: [{\n            key: 'axis',\n            rowContent: function rowContent(contentArg) {\n              return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                role: \"presentation\"\n              }, _this3.renderTableRowAxis(contentArg.rowSyncHeights[0]));\n            }\n          }, {\n            key: 'cols',\n            content: allDayContent\n          }]\n        });\n        sections.push({\n          key: 'all-day-divider',\n          type: 'body',\n          outerContent:\n          // TODO: rename to cellContent so don't need to define <tr>?\n          (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n            role: \"presentation\",\n            className: \"fc-scrollgrid-section\"\n          }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n            colSpan: 2,\n            className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n          }))\n        });\n      }\n      var isNowIndicator = context.options.nowIndicator;\n      sections.push({\n        type: 'body',\n        key: 'body',\n        liquid: true,\n        expandRows: Boolean(context.options.expandRows),\n        chunks: [{\n          key: 'axis',\n          content: function content(arg) {\n            return (\n              // TODO: make this now-indicator arrow more DRY with TimeColsContent\n              (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-axis-chunk\"\n              }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n                \"aria-hidden\": true,\n                style: {\n                  height: arg.expandRows ? arg.clientHeight : ''\n                }\n              }, arg.tableColGroupNode, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tbody\", null, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeBodyAxis, {\n                slatMetas: slatMetas\n              }))), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-now-indicator-container\"\n              }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ch, {\n                unit: isNowIndicator ? 'minute' : 'day' /* hacky */\n              }, function (nowDate) {\n                var nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n                if (typeof nowIndicatorTop === 'number') {\n                  return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ck, {\n                    elClasses: ['fc-timegrid-now-indicator-arrow'],\n                    elStyle: {\n                      top: nowIndicatorTop\n                    },\n                    isAxis: true,\n                    date: nowDate\n                  });\n                }\n                return null;\n              })))\n            );\n          }\n        }, {\n          key: 'cols',\n          scrollerElRef: this.scrollerElRef,\n          content: timeContent\n        }]\n      });\n      if (stickyFooterScrollbar) {\n        sections.push({\n          key: 'footer',\n          type: 'footer',\n          isSticky: true,\n          chunks: [{\n            key: 'axis',\n            content: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ca\n          }, {\n            key: 'cols',\n            content: _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ca\n          }]\n        });\n      }\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ct, {\n        elRef: this.rootElRef,\n        elClasses: ['fc-timegrid'],\n        viewSpec: context.viewSpec\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        forPrint: props.forPrint,\n        collapsibleWidth: false,\n        colGroups: [{\n          width: 'shrink',\n          cols: [{\n            width: 'shrink'\n          }]\n        }, {\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    }\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/\n  }, {\n    key: \"getAllDayMaxEventProps\",\n    value: function getAllDayMaxEventProps() {\n      var _this$context$options = this.context.options,\n        dayMaxEvents = _this$context$options.dayMaxEvents,\n        dayMaxEventRows = _this$context$options.dayMaxEventRows;\n      if (dayMaxEvents === true || dayMaxEventRows === true) {\n        // is auto?\n        dayMaxEvents = undefined;\n        dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n      }\n\n      return {\n        dayMaxEvents: dayMaxEvents,\n        dayMaxEventRows: dayMaxEventRows\n      };\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.be);\nfunction renderAllDayInner(renderProps) {\n  return renderProps.text;\n}\nvar TimeColsSlatsCoords = /*#__PURE__*/function () {\n  function TimeColsSlatsCoords(positions, dateProfile, slotDuration) {\n    _classCallCheck(this, TimeColsSlatsCoords);\n    this.positions = positions;\n    this.dateProfile = dateProfile;\n    this.slotDuration = slotDuration;\n  }\n  return _createClass(TimeColsSlatsCoords, [{\n    key: \"safeComputeTop\",\n    value: function safeComputeTop(date) {\n      var dateProfile = this.dateProfile;\n      if ((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.H)(dateProfile.currentRange, date)) {\n        var startOfDayDate = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.q)(date);\n        var timeMs = date.valueOf() - startOfDayDate.valueOf();\n        if (timeMs >= (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bs)(dateProfile.slotMinTime) && timeMs < (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bs)(dateProfile.slotMaxTime)) {\n          return this.computeTimeTop((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.d)(timeMs));\n        }\n      }\n      return null;\n    }\n    // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  }, {\n    key: \"computeDateTop\",\n    value: function computeDateTop(when, startOfDayDate) {\n      if (!startOfDayDate) {\n        startOfDayDate = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.q)(when);\n      }\n      return this.computeTimeTop((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.d)(when.valueOf() - startOfDayDate.valueOf()));\n    }\n    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n    // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n    // Eventually allow computation with arbirary slat dates.\n  }, {\n    key: \"computeTimeTop\",\n    value: function computeTimeTop(duration) {\n      var positions = this.positions,\n        dateProfile = this.dateProfile;\n      var len = positions.els.length;\n      // floating-point value of # of slots covered\n      var slatCoverage = (duration.milliseconds - (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bs)(dateProfile.slotMinTime)) / (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bs)(this.slotDuration);\n      var slatIndex;\n      var slatRemainder;\n      // compute a floating-point number for how many slats should be progressed through.\n      // from 0 to number of slats (inclusive)\n      // constrained because slotMinTime/slotMaxTime might be customized.\n      slatCoverage = Math.max(0, slatCoverage);\n      slatCoverage = Math.min(len, slatCoverage);\n      // an integer index of the furthest whole slat\n      // from 0 to number slats (*exclusive*, so len-1)\n      slatIndex = Math.floor(slatCoverage);\n      slatIndex = Math.min(slatIndex, len - 1);\n      // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n      // could be 1.0 if slatCoverage is covering *all* the slots\n      slatRemainder = slatCoverage - slatIndex;\n      return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n    }\n  }]);\n}();\nvar TimeColsSlatsBody = /*#__PURE__*/function (_BaseComponent2) {\n  function TimeColsSlatsBody() {\n    _classCallCheck(this, TimeColsSlatsBody);\n    return _callSuper(this, TimeColsSlatsBody, arguments);\n  }\n  _inherits(TimeColsSlatsBody, _BaseComponent2);\n  return _createClass(TimeColsSlatsBody, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      var options = context.options;\n      var slatElRefs = props.slatElRefs;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tbody\", null, props.slatMetas.map(function (slatMeta, i) {\n        var renderProps = {\n          time: slatMeta.time,\n          date: context.dateEnv.toDate(slatMeta.date),\n          view: context.viewApi\n        };\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n          key: slatMeta.key,\n          ref: slatElRefs.createRef(slatMeta.key)\n        }, props.axis && (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsAxisCell, Object.assign({}, slatMeta)), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.C, {\n          elTag: \"td\",\n          elClasses: ['fc-timegrid-slot', 'fc-timegrid-slot-lane', !slatMeta.isLabeled && 'fc-timegrid-slot-minor'],\n          elAttrs: {\n            'data-time': slatMeta.isoTimeStr\n          },\n          renderProps: renderProps,\n          generatorName: \"slotLaneContent\",\n          customGenerator: options.slotLaneContent,\n          classNameGenerator: options.slotLaneClassNames,\n          didMount: options.slotLaneDidMount,\n          willUnmount: options.slotLaneWillUnmount\n        }));\n      }));\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.B);\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\nvar TimeColsSlats = /*#__PURE__*/function (_BaseComponent3) {\n  function TimeColsSlats() {\n    var _this4;\n    _classCallCheck(this, TimeColsSlats);\n    _this4 = _callSuper(this, TimeColsSlats, arguments);\n    _this4.rootElRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    _this4.slatElRefs = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cf();\n    return _this4;\n  }\n  _inherits(TimeColsSlats, _BaseComponent3);\n  return _createClass(TimeColsSlats, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        context = this.context;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        ref: this.rootElRef,\n        className: \"fc-timegrid-slots\"\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n        \"aria-hidden\": true,\n        className: context.theme.getClass('table'),\n        style: {\n          minWidth: props.tableMinWidth,\n          width: props.clientWidth,\n          height: props.minHeight\n        }\n      }, props.tableColGroupNode /* relies on there only being a single <col> for the axis */, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsSlatsBody, {\n        slatElRefs: this.slatElRefs,\n        axis: props.axis,\n        slatMetas: props.slatMetas\n      })));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateSizing();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateSizing();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.onCoords) {\n        this.props.onCoords(null);\n      }\n    }\n  }, {\n    key: \"updateSizing\",\n    value: function updateSizing() {\n      var context = this.context,\n        props = this.props;\n      if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n      ) {\n        var rootEl = this.rootElRef.current;\n        if (rootEl.offsetHeight) {\n          // not hidden by css\n          props.onCoords(new TimeColsSlatsCoords(new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ba(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n        }\n      }\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.B);\nfunction collectSlatEls(elMap, slatMetas) {\n  return slatMetas.map(function (slatMeta) {\n    return elMap[slatMeta.key];\n  });\n}\nfunction splitSegsByCol(segs, colCnt) {\n  var segsByCol = [];\n  var i;\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([]);\n  }\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n  }\n  return segsByCol;\n}\nfunction splitInteractionByCol(ui, colCnt) {\n  var byRow = [];\n  if (!ui) {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var _i = 0; _i < colCnt; _i += 1) {\n      byRow[_i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n    var _iterator = _createForOfIteratorHelper(ui.segs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var seg = _step.value;\n        byRow[seg.col].segs.push(seg);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return byRow;\n}\nvar TimeColMoreLink = /*#__PURE__*/function (_BaseComponent4) {\n  function TimeColMoreLink() {\n    _classCallCheck(this, TimeColMoreLink);\n    return _callSuper(this, TimeColMoreLink, arguments);\n  }\n  _inherits(TimeColMoreLink, _BaseComponent4);\n  return _createClass(TimeColMoreLink, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cr, {\n        elClasses: ['fc-timegrid-more-link'],\n        elStyle: {\n          top: props.top,\n          bottom: props.bottom\n        },\n        allDayDate: null,\n        moreCnt: props.hiddenSegs.length,\n        allSegs: props.hiddenSegs,\n        hiddenSegs: props.hiddenSegs,\n        extraDateSpan: props.extraDateSpan,\n        dateProfile: props.dateProfile,\n        todayRange: props.todayRange,\n        popoverContent: function popoverContent() {\n          return renderPlainFgSegs(props.hiddenSegs, props);\n        },\n        defaultGenerator: renderMoreLinkInner,\n        forceTimed: true\n      }, function (InnerContent) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(InnerContent, {\n          elTag: \"div\",\n          elClasses: ['fc-timegrid-more-link-inner', 'fc-sticky']\n        });\n      });\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.B);\nfunction renderMoreLinkInner(props) {\n  return props.shortText;\n}\n\n// segInputs assumed sorted\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n  var hierarchy = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bA();\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder;\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt;\n  }\n  var hiddenEntries = hierarchy.addSegs(segInputs);\n  var hiddenGroups = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bE)(hiddenEntries);\n  var web = buildWeb(hierarchy);\n  web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n  var segRects = webToRects(web);\n  return {\n    segRects: segRects,\n    hiddenGroups: hiddenGroups\n  };\n}\nfunction buildWeb(hierarchy) {\n  var entriesByLevel = hierarchy.entriesByLevel;\n  var buildNode = cacheable(function (level, lateral) {\n    return level + ':' + lateral;\n  }, function (level, lateral) {\n    var siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n    var nextLevelRes = buildNodes(siblingRange, buildNode);\n    var entry = entriesByLevel[level][lateral];\n    return [Object.assign(Object.assign({}, entry), {\n      nextLevelNodes: nextLevelRes[0]\n    }), entry.thickness + nextLevelRes[1] // the pressure builds\n    ];\n  });\n\n  return buildNodes(entriesByLevel.length ? {\n    level: 0,\n    lateralStart: 0,\n    lateralEnd: entriesByLevel[0].length\n  } : null, buildNode)[0];\n}\nfunction buildNodes(siblingRange, buildNode) {\n  if (!siblingRange) {\n    return [[], 0];\n  }\n  var level = siblingRange.level,\n    lateralStart = siblingRange.lateralStart,\n    lateralEnd = siblingRange.lateralEnd;\n  var lateral = lateralStart;\n  var pairs = [];\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral));\n    lateral += 1;\n  }\n  pairs.sort(cmpDescPressures);\n  return [pairs.map(extractNode), pairs[0][1] // first item's pressure\n  ];\n}\n\nfunction cmpDescPressures(a, b) {\n  return b[1] - a[1];\n}\nfunction extractNode(a) {\n  return a[0];\n}\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n  var levelCoords = hierarchy.levelCoords,\n    entriesByLevel = hierarchy.entriesByLevel;\n  var subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n  var afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n  var levelCnt = levelCoords.length;\n  var level = subjectLevel;\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1); // do nothing\n  for (; level < levelCnt; level += 1) {\n    var entries = entriesByLevel[level];\n    var entry = void 0;\n    var searchIndex = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bD)(entries, subjectEntry.span.start, _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bC);\n    var lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n    var lateralEnd = lateralStart;\n    while (\n    // loop through entries that horizontally intersect\n    (entry = entries[lateralEnd]) &&\n    // but not past the whole seg list\n    entry.span.start < subjectEntry.span.end) {\n      lateralEnd += 1;\n    }\n    if (lateralStart < lateralEnd) {\n      return {\n        level: level,\n        lateralStart: lateralStart,\n        lateralEnd: lateralEnd\n      };\n    }\n  }\n  return null;\n}\nfunction stretchWeb(topLevelNodes, totalThickness) {\n  var stretchNode = cacheable(function (node, startCoord, prevThickness) {\n    return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bB)(node);\n  }, function (node, startCoord, prevThickness) {\n    var nextLevelNodes = node.nextLevelNodes,\n      thickness = node.thickness;\n    var allThickness = thickness + prevThickness;\n    var thicknessFraction = thickness / allThickness;\n    var endCoord;\n    var newChildren = [];\n    if (!nextLevelNodes.length) {\n      endCoord = totalThickness;\n    } else {\n      var _iterator2 = _createForOfIteratorHelper(nextLevelNodes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var childNode = _step2.value;\n          if (endCoord === undefined) {\n            var res = stretchNode(childNode, startCoord, allThickness);\n            endCoord = res[0];\n            newChildren.push(res[1]);\n          } else {\n            var _res = stretchNode(childNode, endCoord, 0);\n            newChildren.push(_res[1]);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    var newThickness = (endCoord - startCoord) * thicknessFraction;\n    return [endCoord - newThickness, Object.assign(Object.assign({}, node), {\n      thickness: newThickness,\n      nextLevelNodes: newChildren\n    })];\n  });\n  return topLevelNodes.map(function (node) {\n    return stretchNode(node, 0, 0)[1];\n  });\n}\n// not sorted in any particular order\nfunction webToRects(topLevelNodes) {\n  var rects = [];\n  var processNode = cacheable(function (node, levelCoord, stackDepth) {\n    return (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bB)(node);\n  }, function (node, levelCoord, stackDepth) {\n    var rect = Object.assign(Object.assign({}, node), {\n      levelCoord: levelCoord,\n      stackDepth: stackDepth,\n      stackForward: 0\n    });\n    rects.push(rect);\n    return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;\n  });\n  function processNodes(nodes, levelCoord, stackDepth) {\n    var stackForward = 0;\n    var _iterator3 = _createForOfIteratorHelper(nodes),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var node = _step3.value;\n        stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return stackForward;\n  }\n  processNodes(topLevelNodes, 0, 0);\n  return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n// TODO: move to general util\nfunction cacheable(keyFunc, workFunc) {\n  var cache = {};\n  return function () {\n    var key = keyFunc.apply(void 0, arguments);\n    return key in cache ? cache[key] : cache[key] = workFunc.apply(void 0, arguments);\n  };\n}\nfunction computeSegVCoords(segs, colDate) {\n  var slatCoords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var eventMinHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var vcoords = [];\n  if (slatCoords) {\n    for (var i = 0; i < segs.length; i += 1) {\n      var seg = segs[i];\n      var spanStart = slatCoords.computeDateTop(seg.start, colDate);\n      var spanEnd = Math.max(spanStart + (eventMinHeight || 0),\n      // :(\n      slatCoords.computeDateTop(seg.end, colDate));\n      vcoords.push({\n        start: Math.round(spanStart),\n        end: Math.round(spanEnd) //\n      });\n    }\n  }\n\n  return vcoords;\n}\nfunction computeFgSegPlacements(segs, segVCoords,\n// might not have for every seg\neventOrderStrict, eventMaxStack) {\n  var segInputs = [];\n  var dumbSegs = []; // segs without coords\n  for (var i = 0; i < segs.length; i += 1) {\n    var vcoords = segVCoords[i];\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords\n      });\n    } else {\n      dumbSegs.push(segs[i]);\n    }\n  }\n  var _buildPositioning = buildPositioning(segInputs, eventOrderStrict, eventMaxStack),\n    segRects = _buildPositioning.segRects,\n    hiddenGroups = _buildPositioning.hiddenGroups;\n  var segPlacements = [];\n  var _iterator4 = _createForOfIteratorHelper(segRects),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var segRect = _step4.value;\n      segPlacements.push({\n        seg: segs[segRect.index],\n        rect: segRect\n      });\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  for (var _i2 = 0, _dumbSegs = dumbSegs; _i2 < _dumbSegs.length; _i2++) {\n    var dumbSeg = _dumbSegs[_i2];\n    segPlacements.push({\n      seg: dumbSeg,\n      rect: null\n    });\n  }\n  return {\n    segPlacements: segPlacements,\n    hiddenGroups: hiddenGroups\n  };\n}\nvar DEFAULT_TIME_FORMAT = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.x)({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false\n});\nvar TimeColEvent = /*#__PURE__*/function (_BaseComponent5) {\n  function TimeColEvent() {\n    _classCallCheck(this, TimeColEvent);\n    return _callSuper(this, TimeColEvent, arguments);\n  }\n  _inherits(TimeColEvent, _BaseComponent5);\n  return _createClass(TimeColEvent, [{\n    key: \"render\",\n    value: function render() {\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cj, Object.assign({}, this.props, {\n        elClasses: ['fc-timegrid-event', 'fc-v-event', this.props.isShort && 'fc-timegrid-event-short'],\n        defaultTimeFormat: DEFAULT_TIME_FORMAT\n      }));\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.B);\nvar TimeCol = /*#__PURE__*/function (_BaseComponent6) {\n  function TimeCol() {\n    var _this5;\n    _classCallCheck(this, TimeCol);\n    _this5 = _callSuper(this, TimeCol, arguments);\n    _this5.sortEventSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bR);\n    return _this5;\n  }\n  // TODO: memoize event-placement?\n  _inherits(TimeCol, _BaseComponent6);\n  return _createClass(TimeCol, [{\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n      var props = this.props,\n        context = this.context;\n      var options = context.options;\n      var isSelectMirror = options.selectMirror;\n      var mirrorSegs =\n      // yuck\n      props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n      var interactionAffectedInstances =\n      // TODO: messy way to compute this\n      props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n      var sortedFgSegs = this.sortEventSegs(props.fgEventSegs, options.eventOrder);\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cl, {\n        elTag: \"td\",\n        elRef: props.elRef,\n        elClasses: ['fc-timegrid-col'].concat(_toConsumableArray(props.extraClassNames || [])),\n        elAttrs: Object.assign({\n          role: 'gridcell'\n        }, props.extraDataAttrs),\n        date: props.date,\n        dateProfile: props.dateProfile,\n        todayRange: props.todayRange,\n        extraRenderProps: props.extraRenderProps\n      }, function (InnerContent) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n          className: \"fc-timegrid-col-frame\"\n        }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n          className: \"fc-timegrid-col-bg\"\n        }, _this6.renderFillSegs(props.businessHourSegs, 'non-business'), _this6.renderFillSegs(props.bgEventSegs, 'bg-event'), _this6.renderFillSegs(props.dateSelectionSegs, 'highlight')), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n          className: \"fc-timegrid-col-events\"\n        }, _this6.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n          className: \"fc-timegrid-col-events\"\n        }, _this6.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror), 'mirror')), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n          className: \"fc-timegrid-now-indicator-container\"\n        }, _this6.renderNowIndicator(props.nowIndicatorSegs)), (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cm)(options) && (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(InnerContent, {\n          elTag: \"div\",\n          elClasses: ['fc-timegrid-col-misc']\n        }));\n      });\n    }\n  }, {\n    key: \"renderFgSegs\",\n    value: function renderFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {\n      var props = this.props;\n      if (props.forPrint) {\n        return renderPlainFgSegs(sortedFgSegs, props);\n      }\n      return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey);\n    }\n  }, {\n    key: \"renderPositionedFgSegs\",\n    value: function renderPositionedFgSegs(segs,\n    // if not mirror, needs to be sorted\n    segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {\n      var _this7 = this;\n      var _this$context$options2 = this.context.options,\n        eventMaxStack = _this$context$options2.eventMaxStack,\n        eventShortHeight = _this$context$options2.eventShortHeight,\n        eventOrderStrict = _this$context$options2.eventOrderStrict,\n        eventMinHeight = _this$context$options2.eventMinHeight;\n      var _this$props = this.props,\n        date = _this$props.date,\n        slatCoords = _this$props.slatCoords,\n        eventSelection = _this$props.eventSelection,\n        todayRange = _this$props.todayRange,\n        nowDate = _this$props.nowDate;\n      var isMirror = isDragging || isResizing || isDateSelecting;\n      var segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n      var _computeFgSegPlacemen = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack),\n        segPlacements = _computeFgSegPlacemen.segPlacements,\n        hiddenGroups = _computeFgSegPlacemen.hiddenGroups;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map(function (segPlacement) {\n        var seg = segPlacement.seg,\n          rect = segPlacement.rect;\n        var instanceId = seg.eventRange.instance.instanceId;\n        var isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n        var vStyle = computeSegVStyle(rect && rect.span);\n        var hStyle = !isMirror && rect ? _this7.computeSegHStyle(rect) : {\n          left: 0,\n          right: 0\n        };\n        var isInset = Boolean(rect) && rect.stackForward > 0;\n        var isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n          className: 'fc-timegrid-event-harness' + (isInset ? ' fc-timegrid-event-harness-inset' : ''),\n          key: forcedKey || instanceId,\n          style: Object.assign(Object.assign({\n            visibility: isVisible ? '' : 'hidden'\n          }, vStyle), hStyle)\n        }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColEvent, Object.assign({\n          seg: seg,\n          isDragging: isDragging,\n          isResizing: isResizing,\n          isDateSelecting: isDateSelecting,\n          isSelected: instanceId === eventSelection,\n          isShort: isShort\n        }, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bS)(seg, todayRange, nowDate))));\n      }));\n    }\n    // will already have eventMinHeight applied because segInputs already had it\n  }, {\n    key: \"renderHiddenGroups\",\n    value: function renderHiddenGroups(hiddenGroups, segs) {\n      var _this$props2 = this.props,\n        extraDateSpan = _this$props2.extraDateSpan,\n        dateProfile = _this$props2.dateProfile,\n        todayRange = _this$props2.todayRange,\n        nowDate = _this$props2.nowDate,\n        eventSelection = _this$props2.eventSelection,\n        eventDrag = _this$props2.eventDrag,\n        eventResize = _this$props2.eventResize;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, hiddenGroups.map(function (hiddenGroup) {\n        var positionCss = computeSegVStyle(hiddenGroup.span);\n        var hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColMoreLink, {\n          key: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bw)((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cs)(hiddenSegs)),\n          hiddenSegs: hiddenSegs,\n          top: positionCss.top,\n          bottom: positionCss.bottom,\n          extraDateSpan: extraDateSpan,\n          dateProfile: dateProfile,\n          todayRange: todayRange,\n          nowDate: nowDate,\n          eventSelection: eventSelection,\n          eventDrag: eventDrag,\n          eventResize: eventResize\n        });\n      }));\n    }\n  }, {\n    key: \"renderFillSegs\",\n    value: function renderFillSegs(segs, fillType) {\n      var props = this.props,\n        context = this.context;\n      var segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n      var children = segVCoords.map(function (vcoords, i) {\n        var seg = segs[i];\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n          key: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bT)(seg.eventRange),\n          className: \"fc-timegrid-bg-harness\",\n          style: computeSegVStyle(vcoords)\n        }, fillType === 'bg-event' ? (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cp, Object.assign({\n          seg: seg\n        }, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bS)(seg, props.todayRange, props.nowDate))) : (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.co)(fillType));\n      });\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, children);\n    }\n  }, {\n    key: \"renderNowIndicator\",\n    value: function renderNowIndicator(segs) {\n      var _this$props3 = this.props,\n        slatCoords = _this$props3.slatCoords,\n        date = _this$props3.date;\n      if (!slatCoords) {\n        return null;\n      }\n      return segs.map(function (seg, i) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ck\n        // key doesn't matter. will only ever be one\n        , {\n          // key doesn't matter. will only ever be one\n          key: i,\n          elClasses: ['fc-timegrid-now-indicator-line'],\n          elStyle: {\n            top: slatCoords.computeDateTop(seg.start, date)\n          },\n          isAxis: false,\n          date: date\n        });\n      });\n    }\n  }, {\n    key: \"computeSegHStyle\",\n    value: function computeSegHStyle(segHCoords) {\n      var _this$context = this.context,\n        isRtl = _this$context.isRtl,\n        options = _this$context.options;\n      var shouldOverlap = options.slotEventOverlap;\n      var nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n      var farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n      var left; // amount of space from left edge, a fraction of the total width\n      var right; // amount of space from right edge, a fraction of the total width\n      if (shouldOverlap) {\n        // double the width, but don't go beyond the maximum forward coordinate (1.0)\n        farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n      }\n      if (isRtl) {\n        left = 1 - farCoord;\n        right = nearCoord;\n      } else {\n        left = nearCoord;\n        right = 1 - farCoord;\n      }\n      var props = {\n        zIndex: segHCoords.stackDepth + 1,\n        left: left * 100 + '%',\n        right: right * 100 + '%'\n      };\n      if (shouldOverlap && !segHCoords.stackForward) {\n        // add padding to the edge so that forward stacked events don't cover the resizer's icon\n        props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n      }\n\n      return props;\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.B);\nfunction renderPlainFgSegs(sortedFgSegs, _ref) {\n  var todayRange = _ref.todayRange,\n    nowDate = _ref.nowDate,\n    eventSelection = _ref.eventSelection,\n    eventDrag = _ref.eventDrag,\n    eventResize = _ref.eventResize;\n  var hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};\n  return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, sortedFgSegs.map(function (seg) {\n    var instanceId = seg.eventRange.instance.instanceId;\n    return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n      key: instanceId,\n      style: {\n        visibility: hiddenInstances[instanceId] ? 'hidden' : ''\n      }\n    }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColEvent, Object.assign({\n      seg: seg,\n      isDragging: false,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: instanceId === eventSelection,\n      isShort: false\n    }, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bS)(seg, todayRange, nowDate))));\n  }));\n}\nfunction computeSegVStyle(segVCoords) {\n  if (!segVCoords) {\n    return {\n      top: '',\n      bottom: ''\n    };\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end\n  };\n}\nfunction compileSegsFromEntries(segEntries, allSegs) {\n  return segEntries.map(function (segEntry) {\n    return allSegs[segEntry.index];\n  });\n}\nvar TimeColsContent = /*#__PURE__*/function (_BaseComponent7) {\n  function TimeColsContent() {\n    var _this8;\n    _classCallCheck(this, TimeColsContent);\n    _this8 = _callSuper(this, TimeColsContent, arguments);\n    _this8.splitFgEventSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(splitSegsByCol);\n    _this8.splitBgEventSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(splitSegsByCol);\n    _this8.splitBusinessHourSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(splitSegsByCol);\n    _this8.splitNowIndicatorSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(splitSegsByCol);\n    _this8.splitDateSelectionSegs = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(splitSegsByCol);\n    _this8.splitEventDrag = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(splitInteractionByCol);\n    _this8.splitEventResize = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(splitInteractionByCol);\n    _this8.rootElRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    _this8.cellElRefs = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cf();\n    return _this8;\n  }\n  _inherits(TimeColsContent, _BaseComponent7);\n  return _createClass(TimeColsContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n      var props = this.props,\n        context = this.context;\n      var nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n      var colCnt = props.cells.length;\n      var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n      var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n      var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n      var nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n      var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n      var eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n      var eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-timegrid-cols\",\n        ref: this.rootElRef\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n        role: \"presentation\",\n        style: {\n          minWidth: props.tableMinWidth,\n          width: props.clientWidth\n        }\n      }, props.tableColGroupNode, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tbody\", {\n        role: \"presentation\"\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n        role: \"row\"\n      }, props.axis && (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n        \"aria-hidden\": true,\n        className: \"fc-timegrid-col fc-timegrid-axis\"\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-timegrid-col-frame\"\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-timegrid-now-indicator-container\"\n      }, typeof nowIndicatorTop === 'number' && (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ck, {\n        elClasses: ['fc-timegrid-now-indicator-arrow'],\n        elStyle: {\n          top: nowIndicatorTop\n        },\n        isAxis: true,\n        date: props.nowDate\n      })))), props.cells.map(function (cell, i) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeCol, {\n          key: cell.key,\n          elRef: _this9.cellElRefs.createRef(cell.key),\n          dateProfile: props.dateProfile,\n          date: cell.date,\n          nowDate: props.nowDate,\n          todayRange: props.todayRange,\n          extraRenderProps: cell.extraRenderProps,\n          extraDataAttrs: cell.extraDataAttrs,\n          extraClassNames: cell.extraClassNames,\n          extraDateSpan: cell.extraDateSpan,\n          fgEventSegs: fgEventSegsByRow[i],\n          bgEventSegs: bgEventSegsByRow[i],\n          businessHourSegs: businessHourSegsByRow[i],\n          nowIndicatorSegs: nowIndicatorSegsByRow[i],\n          dateSelectionSegs: dateSelectionSegsByRow[i],\n          eventDrag: eventDragByRow[i],\n          eventResize: eventResizeByRow[i],\n          slatCoords: props.slatCoords,\n          eventSelection: props.eventSelection,\n          forPrint: props.forPrint\n        });\n      })))));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateCoords();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateCoords();\n    }\n  }, {\n    key: \"updateCoords\",\n    value: function updateCoords() {\n      var props = this.props;\n      if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n      ) {\n        props.onColCoords(new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ba(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true,\n        // horizontal\n        false));\n      }\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.B);\nfunction collectCellEls(elMap, cells) {\n  return cells.map(function (cell) {\n    return elMap[cell.key];\n  });\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\nvar TimeCols = /*#__PURE__*/function (_DateComponent2) {\n  function TimeCols() {\n    var _this10;\n    _classCallCheck(this, TimeCols);\n    _this10 = _callSuper(this, TimeCols, arguments);\n    _this10.processSlotOptions = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(processSlotOptions);\n    _this10.state = {\n      slatCoords: null\n    };\n    _this10.handleRootEl = function (el) {\n      if (el) {\n        _this10.context.registerInteractiveComponent(_this10, {\n          el: el,\n          isHitComboAllowed: _this10.props.isHitComboAllowed\n        });\n      } else {\n        _this10.context.unregisterInteractiveComponent(_this10);\n      }\n    };\n    _this10.handleScrollRequest = function (request) {\n      var onScrollTopRequest = _this10.props.onScrollTopRequest;\n      var slatCoords = _this10.state.slatCoords;\n      if (onScrollTopRequest && slatCoords) {\n        if (request.time) {\n          var top = slatCoords.computeTimeTop(request.time);\n          top = Math.ceil(top); // zoom can give weird floating-point values. rather scroll a little bit further\n          if (top) {\n            top += 1; // to overcome top border that slots beyond the first have. looks better\n          }\n\n          onScrollTopRequest(top);\n        }\n        return true;\n      }\n      return false;\n    };\n    _this10.handleColCoords = function (colCoords) {\n      _this10.colCoords = colCoords;\n    };\n    _this10.handleSlatCoords = function (slatCoords) {\n      _this10.setState({\n        slatCoords: slatCoords\n      });\n      if (_this10.props.onSlatCoords) {\n        _this10.props.onSlatCoords(slatCoords);\n      }\n    };\n    return _this10;\n  }\n  _inherits(TimeCols, _DateComponent2);\n  return _createClass(TimeCols, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n        state = this.state;\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-timegrid-body\",\n        ref: this.handleRootEl,\n        style: {\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth\n        }\n      }, (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsSlats, {\n        axis: props.axis,\n        dateProfile: props.dateProfile,\n        slatMetas: props.slatMetas,\n        clientWidth: props.clientWidth,\n        minHeight: props.expandRows ? props.clientHeight : '',\n        tableMinWidth: props.tableMinWidth,\n        tableColGroupNode: props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */,\n        onCoords: this.handleSlatCoords\n      }), (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsContent, {\n        cells: props.cells,\n        axis: props.axis,\n        dateProfile: props.dateProfile,\n        businessHourSegs: props.businessHourSegs,\n        bgEventSegs: props.bgEventSegs,\n        fgEventSegs: props.fgEventSegs,\n        dateSelectionSegs: props.dateSelectionSegs,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        todayRange: props.todayRange,\n        nowDate: props.nowDate,\n        nowIndicatorSegs: props.nowIndicatorSegs,\n        clientWidth: props.clientWidth,\n        tableMinWidth: props.tableMinWidth,\n        tableColGroupNode: props.tableColGroupNode,\n        slatCoords: state.slatCoords,\n        onColCoords: this.handleColCoords,\n        forPrint: props.forPrint\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.scrollResponder.detach();\n    }\n  }, {\n    key: \"queryHit\",\n    value: function queryHit(positionLeft, positionTop) {\n      var _this$context2 = this.context,\n        dateEnv = _this$context2.dateEnv,\n        options = _this$context2.options;\n      var colCoords = this.colCoords;\n      var dateProfile = this.props.dateProfile;\n      var slatCoords = this.state.slatCoords;\n      var _this$processSlotOpti = this.processSlotOptions(this.props.slotDuration, options.snapDuration),\n        snapDuration = _this$processSlotOpti.snapDuration,\n        snapsPerSlot = _this$processSlotOpti.snapsPerSlot;\n      var colIndex = colCoords.leftToIndex(positionLeft);\n      var slatIndex = slatCoords.positions.topToIndex(positionTop);\n      if (colIndex != null && slatIndex != null) {\n        var cell = this.props.cells[colIndex];\n        var slatTop = slatCoords.positions.tops[slatIndex];\n        var slatHeight = slatCoords.positions.getHeight(slatIndex);\n        var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n        var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n        var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n        var dayDate = this.props.cells[colIndex].date;\n        var time = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bp)(dateProfile.slotMinTime, (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bo)(snapDuration, snapIndex));\n        var start = dateEnv.add(dayDate, time);\n        var end = dateEnv.add(start, snapDuration);\n        return {\n          dateProfile: dateProfile,\n          dateSpan: Object.assign({\n            range: {\n              start: start,\n              end: end\n            },\n            allDay: false\n          }, cell.extraDateSpan),\n          dayEl: colCoords.els[colIndex],\n          rect: {\n            left: colCoords.lefts[colIndex],\n            right: colCoords.rights[colIndex],\n            top: slatTop,\n            bottom: slatTop + slatHeight\n          },\n          layer: 0\n        };\n      }\n      return null;\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.be);\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n  var snapDuration = snapDurationOverride || slotDuration;\n  var snapsPerSlot = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bt)(slotDuration, snapDuration);\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration;\n    snapsPerSlot = 1;\n    // TODO: say warning?\n  }\n\n  return {\n    snapDuration: snapDuration,\n    snapsPerSlot: snapsPerSlot\n  };\n}\nvar DayTimeColsSlicer = /*#__PURE__*/function (_Slicer) {\n  function DayTimeColsSlicer() {\n    _classCallCheck(this, DayTimeColsSlicer);\n    return _callSuper(this, DayTimeColsSlicer, arguments);\n  }\n  _inherits(DayTimeColsSlicer, _Slicer);\n  return _createClass(DayTimeColsSlicer, [{\n    key: \"sliceRange\",\n    value: function sliceRange(range, dayRanges) {\n      var segs = [];\n      for (var col = 0; col < dayRanges.length; col += 1) {\n        var segRange = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.o)(range, dayRanges[col]);\n        if (segRange) {\n          segs.push({\n            start: segRange.start,\n            end: segRange.end,\n            isStart: segRange.start.valueOf() === range.start.valueOf(),\n            isEnd: segRange.end.valueOf() === range.end.valueOf(),\n            col: col\n          });\n        }\n      }\n      return segs;\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bW);\nvar DayTimeCols = /*#__PURE__*/function (_DateComponent3) {\n  function DayTimeCols() {\n    var _this11;\n    _classCallCheck(this, DayTimeCols);\n    _this11 = _callSuper(this, DayTimeCols, arguments);\n    _this11.buildDayRanges = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildDayRanges);\n    _this11.slicer = new DayTimeColsSlicer();\n    _this11.timeColsRef = (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n    return _this11;\n  }\n  _inherits(DayTimeCols, _DateComponent3);\n  return _createClass(DayTimeCols, [{\n    key: \"render\",\n    value: function render() {\n      var _this12 = this;\n      var props = this.props,\n        context = this.context;\n      var dateProfile = props.dateProfile,\n        dayTableModel = props.dayTableModel;\n      var _context$options = context.options,\n        nowIndicator = _context$options.nowIndicator,\n        nextDayThreshold = _context$options.nextDayThreshold;\n      var dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);\n      // give it the first row of cells\n      // TODO: would move this further down hierarchy, but sliceNowDate needs it\n      return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.ch, {\n        unit: nowIndicator ? 'minute' : 'day'\n      }, function (nowDate, todayRange) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeCols, Object.assign({\n          ref: _this12.timeColsRef\n        }, _this12.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n          forPrint: props.forPrint,\n          axis: props.axis,\n          dateProfile: dateProfile,\n          slatMetas: props.slatMetas,\n          slotDuration: props.slotDuration,\n          cells: dayTableModel.cells[0],\n          tableColGroupNode: props.tableColGroupNode,\n          tableMinWidth: props.tableMinWidth,\n          clientWidth: props.clientWidth,\n          clientHeight: props.clientHeight,\n          expandRows: props.expandRows,\n          nowDate: nowDate,\n          nowIndicatorSegs: nowIndicator && _this12.slicer.sliceNowDate(nowDate, dateProfile, nextDayThreshold, context, dayRanges),\n          todayRange: todayRange,\n          onScrollTopRequest: props.onScrollTopRequest,\n          onSlatCoords: props.onSlatCoords\n        }));\n      });\n    }\n  }]);\n}(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.be);\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n  var ranges = [];\n  var _iterator5 = _createForOfIteratorHelper(dayTableModel.headerDates),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var date = _step5.value;\n      ranges.push({\n        start: dateEnv.add(date, dateProfile.slotMinTime),\n        end: dateEnv.add(date, dateProfile.slotMaxTime)\n      });\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return ranges;\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nvar STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n  var dayStart = new Date(0);\n  var slatTime = slotMinTime;\n  var slatIterator = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.d)(0);\n  var labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n  var metas = [];\n  while ((0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bs)(slatTime) < (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bs)(slotMaxTime)) {\n    var date = dateEnv.add(dayStart, slatTime);\n    var isLabeled = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bt)(slatIterator, labelInterval) !== null;\n    metas.push({\n      date: date,\n      time: slatTime,\n      key: date.toISOString(),\n      isoTimeStr: (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bu)(date),\n      isLabeled: isLabeled\n    });\n    slatTime = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bp)(slatTime, slotDuration);\n    slatIterator = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bp)(slatIterator, slotDuration);\n  }\n  return metas;\n}\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  var i;\n  var labelInterval;\n  var slotsPerLabel;\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.d)(STOCK_SUB_DURATIONS[i]);\n    slotsPerLabel = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bt)(labelInterval, slotDuration);\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval;\n    }\n  }\n  return slotDuration; // fall back\n}\nvar DayTimeColsView = /*#__PURE__*/function (_TimeColsView) {\n  function DayTimeColsView() {\n    var _this13;\n    _classCallCheck(this, DayTimeColsView);\n    _this13 = _callSuper(this, DayTimeColsView, arguments);\n    _this13.buildTimeColsModel = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildTimeColsModel);\n    _this13.buildSlatMetas = (0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.z)(buildSlatMetas);\n    return _this13;\n  }\n  _inherits(DayTimeColsView, _TimeColsView);\n  return _createClass(DayTimeColsView, [{\n    key: \"render\",\n    value: function render() {\n      var _this14 = this;\n      var _this$context3 = this.context,\n        options = _this$context3.options,\n        dateEnv = _this$context3.dateEnv,\n        dateProfileGenerator = _this$context3.dateProfileGenerator;\n      var props = this.props;\n      var dateProfile = props.dateProfile;\n      var dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n      var splitProps = this.allDaySplitter.splitProps(props);\n      var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n      var dayMinWidth = options.dayMinWidth;\n      var hasAttachedAxis = !dayMinWidth;\n      var hasDetachedAxis = dayMinWidth;\n      var headerContent = options.dayHeaders && (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bK, {\n        dates: dayTableModel.headerDates,\n        dateProfile: dateProfile,\n        datesRepDistinctDays: true,\n        renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n      });\n      var allDayContent = options.allDaySlot !== false && function (contentArg) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_daygrid_internal_js__WEBPACK_IMPORTED_MODULE_2__.DayTable, Object.assign({}, splitProps.allDay, {\n          dateProfile: dateProfile,\n          dayTableModel: dayTableModel,\n          nextDayThreshold: options.nextDayThreshold,\n          tableMinWidth: contentArg.tableMinWidth,\n          colGroupNode: contentArg.tableColGroupNode,\n          renderRowIntro: hasAttachedAxis ? _this14.renderTableRowAxis : null,\n          showWeekNumbers: false,\n          expandRows: false,\n          headerAlignElRef: _this14.headerElRef,\n          clientWidth: contentArg.clientWidth,\n          clientHeight: contentArg.clientHeight,\n          forPrint: props.forPrint\n        }, _this14.getAllDayMaxEventProps()));\n      };\n      var timeGridContent = function timeGridContent(contentArg) {\n        return (0,_fullcalendar_core_preact_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(DayTimeCols, Object.assign({}, splitProps.timed, {\n          dayTableModel: dayTableModel,\n          dateProfile: dateProfile,\n          axis: hasAttachedAxis,\n          slotDuration: options.slotDuration,\n          slatMetas: slatMetas,\n          forPrint: props.forPrint,\n          tableColGroupNode: contentArg.tableColGroupNode,\n          tableMinWidth: contentArg.tableMinWidth,\n          clientWidth: contentArg.clientWidth,\n          clientHeight: contentArg.clientHeight,\n          onSlatCoords: _this14.handleSlatCoords,\n          expandRows: contentArg.expandRows,\n          onScrollTopRequest: _this14.handleScrollTopRequest\n        }));\n      };\n      return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n    }\n  }]);\n}(TimeColsView);\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bO(dateProfile.renderRange, dateProfileGenerator);\n  return new _fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.bV(daySeries, false);\n}\nvar css_248z = \".fc-v-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-v-event .fc-event-main{color:var(--fc-event-text-color);height:100%}.fc-v-event .fc-event-main-frame{display:flex;flex-direction:column;height:100%}.fc-v-event .fc-event-time{flex-grow:0;flex-shrink:0;max-height:100%;overflow:hidden}.fc-v-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-height:0}.fc-v-event .fc-event-title{bottom:0;max-height:100%;overflow:hidden;top:0}.fc-v-event:not(.fc-event-start){border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.fc-v-event:not(.fc-event-end){border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-width:0}.fc-v-event.fc-event-selected:before{left:-10px;right:-10px}.fc-v-event .fc-event-resizer-start{cursor:n-resize}.fc-v-event .fc-event-resizer-end{cursor:s-resize}.fc-v-event:not(.fc-event-selected) .fc-event-resizer{height:var(--fc-event-resizer-thickness);left:0;right:0}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-start{top:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer{left:50%;margin-left:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-start{top:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc .fc-timegrid .fc-daygrid-body{z-index:2}.fc .fc-timegrid-divider{padding:0 0 2px}.fc .fc-timegrid-body{min-height:100%;position:relative;z-index:1}.fc .fc-timegrid-axis-chunk{position:relative}.fc .fc-timegrid-axis-chunk>table,.fc .fc-timegrid-slots{position:relative;z-index:1}.fc .fc-timegrid-slot{border-bottom:0;height:1.5em}.fc .fc-timegrid-slot:empty:before{content:\\\"\\\\00a0\\\"}.fc .fc-timegrid-slot-minor{border-top-style:dotted}.fc .fc-timegrid-slot-label-cushion{display:inline-block;white-space:nowrap}.fc .fc-timegrid-slot-label{vertical-align:middle}.fc .fc-timegrid-axis-cushion,.fc .fc-timegrid-slot-label-cushion{padding:0 4px}.fc .fc-timegrid-axis-frame-liquid{height:100%}.fc .fc-timegrid-axis-frame{align-items:center;display:flex;justify-content:flex-end;overflow:hidden}.fc .fc-timegrid-axis-cushion{flex-shrink:0;max-width:60px}.fc-direction-ltr .fc-timegrid-slot-label-frame{text-align:right}.fc-direction-rtl .fc-timegrid-slot-label-frame{text-align:left}.fc-liquid-hack .fc-timegrid-axis-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-timegrid-col-frame{min-height:100%;position:relative}.fc-media-screen.fc-liquid-hack .fc-timegrid-col-frame{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols{bottom:0;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols>table{height:100%}.fc-media-screen .fc-timegrid-col-bg,.fc-media-screen .fc-timegrid-col-events,.fc-media-screen .fc-timegrid-now-indicator-container{left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col-bg{z-index:2}.fc .fc-timegrid-col-bg .fc-non-business{z-index:1}.fc .fc-timegrid-col-bg .fc-bg-event{z-index:2}.fc .fc-timegrid-col-bg .fc-highlight{z-index:3}.fc .fc-timegrid-bg-harness{left:0;position:absolute;right:0}.fc .fc-timegrid-col-events{z-index:3}.fc .fc-timegrid-now-indicator-container{bottom:0;overflow:hidden}.fc-direction-ltr .fc-timegrid-col-events{margin:0 2.5% 0 2px}.fc-direction-rtl .fc-timegrid-col-events{margin:0 2px 0 2.5%}.fc-timegrid-event-harness{position:absolute}.fc-timegrid-event-harness>.fc-timegrid-event{bottom:0;left:0;position:absolute;right:0;top:0}.fc-timegrid-event-harness-inset .fc-timegrid-event,.fc-timegrid-event.fc-event-mirror,.fc-timegrid-more-link{box-shadow:0 0 0 1px var(--fc-page-bg-color)}.fc-timegrid-event,.fc-timegrid-more-link{border-radius:3px;font-size:var(--fc-small-font-size)}.fc-timegrid-event{margin-bottom:1px}.fc-timegrid-event .fc-event-main{padding:1px 1px 0}.fc-timegrid-event .fc-event-time{font-size:var(--fc-small-font-size);margin-bottom:1px;white-space:nowrap}.fc-timegrid-event-short .fc-event-main-frame{flex-direction:row;overflow:hidden}.fc-timegrid-event-short .fc-event-time:after{content:\\\"\\\\00a0-\\\\00a0\\\"}.fc-timegrid-event-short .fc-event-title{font-size:var(--fc-small-font-size)}.fc-timegrid-more-link{background:var(--fc-more-link-bg-color);color:var(--fc-more-link-text-color);cursor:pointer;margin-bottom:1px;position:absolute;z-index:9999}.fc-timegrid-more-link-inner{padding:3px 2px;top:0}.fc-direction-ltr .fc-timegrid-more-link{right:0}.fc-direction-rtl .fc-timegrid-more-link{left:0}.fc .fc-timegrid-now-indicator-line{border-color:var(--fc-now-indicator-color);border-style:solid;border-width:1px 0 0;left:0;position:absolute;right:0;z-index:4}.fc .fc-timegrid-now-indicator-arrow{border-color:var(--fc-now-indicator-color);border-style:solid;margin-top:-5px;position:absolute;z-index:4}.fc-direction-ltr .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 0 5px 6px;left:0}.fc-direction-rtl .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 6px 5px 0;right:0}\";\n(0,_fullcalendar_core_internal_js__WEBPACK_IMPORTED_MODULE_0__.cw)(css_248z);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fullcalendar/timegrid/internal.js\n");

/***/ })

};
;